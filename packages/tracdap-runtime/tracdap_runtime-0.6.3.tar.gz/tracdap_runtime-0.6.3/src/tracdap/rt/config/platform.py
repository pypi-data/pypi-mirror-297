# Code generated by TRAC

from __future__ import annotations
import typing as _tp  # noqa
import dataclasses as _dc  # noqa
import enum as _enum  # noqa

import tracdap.rt.metadata as metadata
from .common import *  # noqa


class RoutingProtocol(_enum.Enum):

    PROTOCOL_NOT_SET = 0

    HTTP = 1

    GRPC = 2

    GRPC_WEB = 3

    REST = 4


class DeploymentLayout(_enum.Enum):

    LAYOUT_NOT_SET = 0

    SANDBOX = 1

    HOSTED = 2

    CUSTOM = 3


@_dc.dataclass
class PlatformConfig:

    config: _tp.Dict[str, str] = _dc.field(default_factory=dict)

    platformInfo: PlatformInfo = None

    authentication: AuthenticationConfig = None

    metadata: MetadataConfig = None

    storage: StorageConfig = None

    repositories: _tp.Dict[str, PluginConfig] = _dc.field(default_factory=dict)

    executor: PluginConfig = None

    jobCache: PluginConfig = None

    tenants: _tp.Dict[str, TenantConfig] = _dc.field(default_factory=dict)

    webServer: _tp.Optional[WebServerConfig] = None

    gateway: _tp.Optional[GatewayConfig] = None

    services: _tp.Dict[str, ServiceConfig] = _dc.field(default_factory=dict)

    deployment: DeploymentConfig = None


@_dc.dataclass
class MetadataConfig:

    database: PluginConfig = None

    format: metadata.MetadataFormat = metadata.MetadataFormat.METADATA_FORMAT_NOT_SET


@_dc.dataclass
class TenantConfig:

    defaultBucket: _tp.Optional[str] = None

    defaultFormat: _tp.Optional[str] = None


@_dc.dataclass
class WebServerConfig:

    enabled: bool = None

    contentRoot: PluginConfig = None

    rewriteRules: _tp.List[WebServerRewriteRule] = _dc.field(default_factory=list)

    redirects: _tp.List[WebServerRedirect] = _dc.field(default_factory=list)


@_dc.dataclass
class WebServerRewriteRule:

    source: str = None

    target: str = None


@_dc.dataclass
class WebServerRedirect:

    source: str = None

    target: str = None

    status: int = None


@_dc.dataclass
class GatewayConfig:

    idleTimeout: int = None

    routes: _tp.List[RouteConfig] = _dc.field(default_factory=list)

    redirects: _tp.List[WebServerRedirect] = _dc.field(default_factory=list)


@_dc.dataclass
class RouteConfig:

    routeName: str = None

    routeType: RoutingProtocol = RoutingProtocol.PROTOCOL_NOT_SET

    protocols: _tp.List[RoutingProtocol] = _dc.field(default_factory=list)

    match: RoutingMatch = None

    target: RoutingTarget = None


@_dc.dataclass
class RoutingMatch:

    host: str = None

    path: str = None


@_dc.dataclass
class RoutingTarget:

    scheme: str = None

    host: str = None

    port: int = None

    path: str = None


@_dc.dataclass
class DeploymentConfig:

    layout: DeploymentLayout = DeploymentLayout.LAYOUT_NOT_SET
