"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from datetime import datetime
import httpx
from plex_api_client.types import BaseModel
from plex_api_client.utils import FieldMetadata, QueryParamMetadata
import pydantic
from typing import List, Optional, TypedDict
from typing_extensions import Annotated, NotRequired


class GetRecentlyAddedRequestTypedDict(TypedDict):
    x_plex_container_start: NotRequired[int]
    r"""The index of the first item to return. If not specified, the first item will be returned.
    If the number of items exceeds the limit, the response will be paginated.
    By default this is 0

    """
    x_plex_container_size: NotRequired[int]
    r"""The number of items to return. If not specified, all items will be returned.
    If the number of items exceeds the limit, the response will be paginated.
    By default this is 50

    """


class GetRecentlyAddedRequest(BaseModel):
    x_plex_container_start: Annotated[
        Optional[int],
        pydantic.Field(alias="X-Plex-Container-Start"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = 0
    r"""The index of the first item to return. If not specified, the first item will be returned.
    If the number of items exceeds the limit, the response will be paginated.
    By default this is 0

    """

    x_plex_container_size: Annotated[
        Optional[int],
        pydantic.Field(alias="X-Plex-Container-Size"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = 50
    r"""The number of items to return. If not specified, all items will be returned.
    If the number of items exceeds the limit, the response will be paginated.
    By default this is 50

    """


class PartTypedDict(TypedDict):
    id: NotRequired[float]
    key: NotRequired[str]
    duration: NotRequired[float]
    file: NotRequired[str]
    size: NotRequired[float]
    container: NotRequired[str]
    has64bit_offsets: NotRequired[bool]
    has_thumbnail: NotRequired[float]
    optimized_for_streaming: NotRequired[bool]
    video_profile: NotRequired[str]


class Part(BaseModel):
    id: Optional[float] = None

    key: Optional[str] = None

    duration: Optional[float] = None

    file: Optional[str] = None

    size: Optional[float] = None

    container: Optional[str] = None

    has64bit_offsets: Annotated[
        Optional[bool], pydantic.Field(alias="has64bitOffsets")
    ] = None

    has_thumbnail: Annotated[Optional[float], pydantic.Field(alias="hasThumbnail")] = (
        None
    )

    optimized_for_streaming: Annotated[
        Optional[bool], pydantic.Field(alias="optimizedForStreaming")
    ] = None

    video_profile: Annotated[Optional[str], pydantic.Field(alias="videoProfile")] = None


class MediaTypedDict(TypedDict):
    id: NotRequired[float]
    duration: NotRequired[float]
    bitrate: NotRequired[float]
    width: NotRequired[float]
    height: NotRequired[float]
    aspect_ratio: NotRequired[float]
    audio_channels: NotRequired[float]
    audio_codec: NotRequired[str]
    video_codec: NotRequired[str]
    video_resolution: NotRequired[float]
    container: NotRequired[str]
    video_frame_rate: NotRequired[str]
    optimized_for_streaming: NotRequired[float]
    has64bit_offsets: NotRequired[bool]
    video_profile: NotRequired[str]
    part: NotRequired[List[PartTypedDict]]


class Media(BaseModel):
    id: Optional[float] = None

    duration: Optional[float] = None

    bitrate: Optional[float] = None

    width: Optional[float] = None

    height: Optional[float] = None

    aspect_ratio: Annotated[Optional[float], pydantic.Field(alias="aspectRatio")] = None

    audio_channels: Annotated[
        Optional[float], pydantic.Field(alias="audioChannels")
    ] = None

    audio_codec: Annotated[Optional[str], pydantic.Field(alias="audioCodec")] = None

    video_codec: Annotated[Optional[str], pydantic.Field(alias="videoCodec")] = None

    video_resolution: Annotated[
        Optional[float], pydantic.Field(alias="videoResolution")
    ] = None

    container: Optional[str] = None

    video_frame_rate: Annotated[
        Optional[str], pydantic.Field(alias="videoFrameRate")
    ] = None

    optimized_for_streaming: Annotated[
        Optional[float], pydantic.Field(alias="optimizedForStreaming")
    ] = None

    has64bit_offsets: Annotated[
        Optional[bool], pydantic.Field(alias="has64bitOffsets")
    ] = None

    video_profile: Annotated[Optional[str], pydantic.Field(alias="videoProfile")] = None

    part: Annotated[Optional[List[Part]], pydantic.Field(alias="Part")] = None


class GenreTypedDict(TypedDict):
    tag: NotRequired[str]


class Genre(BaseModel):
    tag: Optional[str] = None


class DirectorTypedDict(TypedDict):
    tag: NotRequired[str]


class Director(BaseModel):
    tag: Optional[str] = None


class WriterTypedDict(TypedDict):
    tag: NotRequired[str]


class Writer(BaseModel):
    tag: Optional[str] = None


class CountryTypedDict(TypedDict):
    tag: NotRequired[str]


class Country(BaseModel):
    tag: Optional[str] = None


class RoleTypedDict(TypedDict):
    tag: NotRequired[str]


class Role(BaseModel):
    tag: Optional[str] = None


class GetRecentlyAddedMetadataTypedDict(TypedDict):
    allow_sync: NotRequired[bool]
    library_section_id: NotRequired[float]
    library_section_title: NotRequired[str]
    library_section_uuid: NotRequired[str]
    rating_key: NotRequired[float]
    key: NotRequired[str]
    guid: NotRequired[str]
    studio: NotRequired[str]
    type: NotRequired[str]
    title: NotRequired[str]
    content_rating: NotRequired[str]
    summary: NotRequired[str]
    rating: NotRequired[float]
    audience_rating: NotRequired[float]
    year: NotRequired[float]
    tagline: NotRequired[str]
    thumb: NotRequired[str]
    art: NotRequired[str]
    duration: NotRequired[float]
    originally_available_at: NotRequired[datetime]
    added_at: NotRequired[float]
    updated_at: NotRequired[float]
    audience_rating_image: NotRequired[str]
    chapter_source: NotRequired[str]
    primary_extra_key: NotRequired[str]
    rating_image: NotRequired[str]
    media: NotRequired[List[MediaTypedDict]]
    genre: NotRequired[List[GenreTypedDict]]
    director: NotRequired[List[DirectorTypedDict]]
    writer: NotRequired[List[WriterTypedDict]]
    country: NotRequired[List[CountryTypedDict]]
    role: NotRequired[List[RoleTypedDict]]


class GetRecentlyAddedMetadata(BaseModel):
    allow_sync: Annotated[Optional[bool], pydantic.Field(alias="allowSync")] = None

    library_section_id: Annotated[
        Optional[float], pydantic.Field(alias="librarySectionID")
    ] = None

    library_section_title: Annotated[
        Optional[str], pydantic.Field(alias="librarySectionTitle")
    ] = None

    library_section_uuid: Annotated[
        Optional[str], pydantic.Field(alias="librarySectionUUID")
    ] = None

    rating_key: Annotated[Optional[float], pydantic.Field(alias="ratingKey")] = None

    key: Optional[str] = None

    guid: Optional[str] = None

    studio: Optional[str] = None

    type: Optional[str] = None

    title: Optional[str] = None

    content_rating: Annotated[Optional[str], pydantic.Field(alias="contentRating")] = (
        None
    )

    summary: Optional[str] = None

    rating: Optional[float] = None

    audience_rating: Annotated[
        Optional[float], pydantic.Field(alias="audienceRating")
    ] = None

    year: Optional[float] = None

    tagline: Optional[str] = None

    thumb: Optional[str] = None

    art: Optional[str] = None

    duration: Optional[float] = None

    originally_available_at: Annotated[
        Optional[datetime], pydantic.Field(alias="originallyAvailableAt")
    ] = None

    added_at: Annotated[Optional[float], pydantic.Field(alias="addedAt")] = None

    updated_at: Annotated[Optional[float], pydantic.Field(alias="updatedAt")] = None

    audience_rating_image: Annotated[
        Optional[str], pydantic.Field(alias="audienceRatingImage")
    ] = None

    chapter_source: Annotated[Optional[str], pydantic.Field(alias="chapterSource")] = (
        None
    )

    primary_extra_key: Annotated[
        Optional[str], pydantic.Field(alias="primaryExtraKey")
    ] = None

    rating_image: Annotated[Optional[str], pydantic.Field(alias="ratingImage")] = None

    media: Annotated[Optional[List[Media]], pydantic.Field(alias="Media")] = None

    genre: Annotated[Optional[List[Genre]], pydantic.Field(alias="Genre")] = None

    director: Annotated[Optional[List[Director]], pydantic.Field(alias="Director")] = (
        None
    )

    writer: Annotated[Optional[List[Writer]], pydantic.Field(alias="Writer")] = None

    country: Annotated[Optional[List[Country]], pydantic.Field(alias="Country")] = None

    role: Annotated[Optional[List[Role]], pydantic.Field(alias="Role")] = None


class GetRecentlyAddedMediaContainerTypedDict(TypedDict):
    size: NotRequired[float]
    allow_sync: NotRequired[bool]
    identifier: NotRequired[str]
    media_tag_prefix: NotRequired[str]
    media_tag_version: NotRequired[float]
    mixed_parents: NotRequired[bool]
    metadata: NotRequired[List[GetRecentlyAddedMetadataTypedDict]]


class GetRecentlyAddedMediaContainer(BaseModel):
    size: Optional[float] = None

    allow_sync: Annotated[Optional[bool], pydantic.Field(alias="allowSync")] = None

    identifier: Optional[str] = None

    media_tag_prefix: Annotated[
        Optional[str], pydantic.Field(alias="mediaTagPrefix")
    ] = None

    media_tag_version: Annotated[
        Optional[float], pydantic.Field(alias="mediaTagVersion")
    ] = None

    mixed_parents: Annotated[Optional[bool], pydantic.Field(alias="mixedParents")] = (
        None
    )

    metadata: Annotated[
        Optional[List[GetRecentlyAddedMetadata]], pydantic.Field(alias="Metadata")
    ] = None


class GetRecentlyAddedResponseBodyTypedDict(TypedDict):
    r"""The recently added content"""

    media_container: NotRequired[GetRecentlyAddedMediaContainerTypedDict]


class GetRecentlyAddedResponseBody(BaseModel):
    r"""The recently added content"""

    media_container: Annotated[
        Optional[GetRecentlyAddedMediaContainer], pydantic.Field(alias="MediaContainer")
    ] = None


class GetRecentlyAddedResponseTypedDict(TypedDict):
    content_type: str
    r"""HTTP response content type for this operation"""
    status_code: int
    r"""HTTP response status code for this operation"""
    raw_response: httpx.Response
    r"""Raw HTTP response; suitable for custom response parsing"""
    object: NotRequired[GetRecentlyAddedResponseBodyTypedDict]
    r"""The recently added content"""


class GetRecentlyAddedResponse(BaseModel):
    content_type: str
    r"""HTTP response content type for this operation"""

    status_code: int
    r"""HTTP response status code for this operation"""

    raw_response: httpx.Response
    r"""Raw HTTP response; suitable for custom response parsing"""

    object: Optional[GetRecentlyAddedResponseBody] = None
    r"""The recently added content"""
