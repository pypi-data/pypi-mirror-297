.\" Man page generated from reStructuredText.
.
.
.nr rst2man-indent-level 0
.
.de1 rstReportMargin
\\$1 \\n[an-margin]
level \\n[rst2man-indent-level]
level margin: \\n[rst2man-indent\\n[rst2man-indent-level]]
-
\\n[rst2man-indent0]
\\n[rst2man-indent1]
\\n[rst2man-indent2]
..
.de1 INDENT
.\" .rstReportMargin pre:
. RS \\$1
. nr rst2man-indent\\n[rst2man-indent-level] \\n[an-margin]
. nr rst2man-indent-level +1
.\" .rstReportMargin post:
..
.de UNINDENT
. RE
.\" indent \\n[an-margin]
.\" old: \\n[rst2man-indent\\n[rst2man-indent-level]]
.nr rst2man-indent-level -1
.\" new: \\n[rst2man-indent\\n[rst2man-indent-level]]
.in \\n[rst2man-indent\\n[rst2man-indent-level]]u
..
.TH "SIERRA-PLATFORMS" "7" "Sep 23, 2024" "1.3.11" "SIERRA"
.SH NAME
sierra-platforms \- The platforms SIERRA supports, and platform-specific Batch Criteria.
.SH ARGOS PLATFORM
.sp
This platform can be selected via \fB\-\-platform=platform.argos\fP\&.
.sp
This is the default platform on which SIERRA will run experiments, and uses the
\fI\%ARGoS\fP simulator. It cannot be used to run experiments on real robots.
.SS Batch Criteria
.sp
See \fI\%Batch Criteria\fP for a thorough explanation of batch criteria, but the
short version is that they are the core of SIERRA\-\-how to get it to DO stuff for
you.  The following batch criteria are defined which can be used with any
\fI\%Project\fP\&.
.INDENT 0.0
.IP \(bu 2
\fI\%Population Size\fP
.IP \(bu 2
\fI\%Constant Population Density\fP
.IP \(bu 2
\fI\%Variable Population Density\fP
.UNINDENT
.SS Population Size
.sp
Changing the population size to investigate behavior across scales within a
static arena size (i.e., variable density). This criteria is functionally
identical to \fI\%Variable Population Density\fP in
terms of changes to the template XML file, but has a different semantic meaning
which can make generated deliverables more immediately understandable, depending
on the context of what is being investigated (e.g., population size
vs. population density on the X axis).
.SS Cmdline Syntax
.sp
\fBpopulation_size.{model}{N}[.C{cardinality}]\fP
.INDENT 0.0
.IP \(bu 2
\fBmodel\fP \- The population size model to use.
.INDENT 2.0
.IP \(bu 2
\fBLog\fP \- Population sizes for each experiment are distributed 1...N by
powers of 2.
.IP \(bu 2
\fBLinear\fP \- Population sizes for each experiment are distributed linearly
between 1...N, split evenly into 10 different sizes.
.UNINDENT
.IP \(bu 2
\fBN\fP \- The maximum population size.
.IP \(bu 2
\fBcardinality\fP \- If the model is \fBLinear\fP, then this can be used
to specify how many experiments to generate; i.e, it defines the \fIsize\fP of the
linear increment. Defaults to 10 if omitted.
.UNINDENT
.SS Examples
.INDENT 0.0
.IP \(bu 2
\fBpopulation_size.Log1024\fP: Static population sizes 1...1024
.IP \(bu 2
\fBpopulation_size.Linear1000\fP: Static population sizes 100...1000 (10)
.IP \(bu 2
\fBpopulation_size.Linear3.C3\fP: Static population sizes 1...3 (3)
.IP \(bu 2
\fBpopulation_size.Linear10.C2\fP: Static population sizes 5...10 (2)
.UNINDENT
.SS Constant Population Density
.sp
Changing the population size and arena size together to maintain the same population
size/arena size ratio to investigate behavior across scales.
.sp
\fBNOTE:\fP
.INDENT 0.0
.INDENT 3.5
This criteria is for \fIconstant\fP density of robots as population sizes
increase. For \fIvariable\fP robot density, use
\fI\%Population Size\fP or
\fI\%Variable Population Density\fP\&.
.UNINDENT
.UNINDENT
.SS Cmdline Syntax
.sp
\fBpopulation_constant_density.{density}.I{Arena Size Increment}.C{cardinality}\fP
.INDENT 0.0
.IP \(bu 2
\fBdensity\fP \- <integer>p<integer> (i.e. 5p0 for 5.0)
.IP \(bu 2
\fBArena Size Increment\fP \- Size in meters that the X and Y dimensions should
increase by in between experiments. Larger values here will result in larger
arenas and more robots being simulated at a given density. Must be an integer.
.IP \(bu 2
\fBcardinality\fP How many experiments should be generated?
.UNINDENT
.SS Examples
.INDENT 0.0
.IP \(bu 2
\fBpopulation_constant_density.1p0.I16.C4\fP: Constant density of 1.0. Arena
dimensions will increase by 16 in both X and Y for each experiment in the
batch (4 total).
.UNINDENT
.SS Variable Population Density
.sp
Changing the population size to investigate behavior across scales within a
static arena size. This criteria is functionally identical to
\fI\%Population Size\fP in terms of changes to the
template XML file, but has a different semantic meaning which can make generated
deliverables more immediately understandable, depending on the context of what
is being investigated (e.g., population density vs. population size on the X
axis).
.sp
\fBNOTE:\fP
.INDENT 0.0
.INDENT 3.5
This criteria is for \fIvariable\fP density of robots as population sizes
increase. For \fIconstant\fP robot density, use
\fI\%Constant Population Density\fP\&.
.UNINDENT
.UNINDENT
.SS Cmdline Syntax
.sp
\fBpopulation_variable_density.{density_min}.{density_max}.C{cardinality}\fP
.INDENT 0.0
.IP \(bu 2
\fBdensity_min\fP \- <integer>p<integer> (i.e. 5p0 for 5.0)
.IP \(bu 2
\fBdensity_max\fP \- <integer>p<integer> (i.e. 5p0 for 5.0)
.IP \(bu 2
\fBcardinality\fP How many experiments should be generated? Densities for each
experiment will be linearly spaced between the min and max densities.
.UNINDENT
.SS Examples
.INDENT 0.0
.IP \(bu 2
\fBpopulation_variable_density.1p0.4p0.C4\fP: Densities of 1.0,2.0,3.0,4.0.
.UNINDENT
.SS Environment Variables
.sp
This platform respects \fI\%SIERRA_ARCH\fP\&.
.SS Random Seeding For Reproducibility
.sp
ARGoS provides its own random seed mechanism under \fB<experiment>\fP which SIERRA
uses to seed each experiment. \fI\%Project\fP code should use this mechanism or
a similar random seed generator manager seeded by the same value so that
experiments can be reproduced exactly. By default SIERRA does not overwrite its
generated random seeds for each experiment once generated; you can override with
\fB\-\-no\-preserve\-seeds\fP\&. See ln\-sierra\-tutorials\-project\-template\-input\-file and
\fI\%Experimental Definition Requirements\fP for details on the format of the provided seed.
.SH ROS1+GAZEBO PLATFORM
.sp
This platform can be selected via \fB\-\-platform=platform.ros1gazebo\fP\&.
.sp
This is the platform on which SIERRA will run experiments using the
\fI\%Gazebo\fP simulator and \fI\%ROS1\fP\&. It cannot be used to run
experiments on real robots. To use this platform, you must setup the
\fI\%SIERRA ROSBridge\fP\&.
.sp
Worlds within ROS1+Gazebo are infinite from the perspective of physics engines,
even though a finite area shows up in rendering. So, to place robots randomly in
the arena at the start of simulation across \fI\%Experimental Runs\fP (if you want to do that) \(dqdimensions\(dq for a given world must
be specified as part of the \fB\-\-scenario\fP argument. If you don\(aqt specify
dimensions as part of the \fB\-\-scenario\fP argument, then you need to supply a
list of valid robot positions via \fB\-\-robot\-positions\fP which SIERRA will choose
from randomly for each robot.
.SS Batch Criteria
.sp
See \fI\%Batch Criteria\fP for a thorough explanation of batch criteria, but the
short version is that they are the core of SIERRA\-\-how to get it to DO stuff for
you.  The following batch criteria are defined which can be used with any
\fI\%Project\fP\&.
.INDENT 0.0
.IP \(bu 2
\fI\%System Population Size\fP
.UNINDENT
.SS System Population Size
.sp
Changing the system size to investigate behavior across scales within a static
arena size (i.e., variable density). Systems are homogeneous.
.SS Cmdline Syntax
.sp
\fBpopulation_size.{model}{N}[.C{cardinality}]\fP
.INDENT 0.0
.IP \(bu 2
\fBmodel\fP \- The population size model to use.
.INDENT 2.0
.IP \(bu 2
\fBLog\fP \- Population sizes for each experiment are distributed 1...N by
powers of 2.
.IP \(bu 2
\fBLinear\fP \- Population sizes for each experiment are distributed linearly
between 1...N, split evenly into 10 different sizes.
.UNINDENT
.IP \(bu 2
\fBN\fP \- The maximum population size.
.IP \(bu 2
\fBcardinality\fP \- If the model is \fBLinear\fP, then this can be used
to specify how many experiments to generate; i.e, it defines the \fIsize\fP of the
linear increment. Defaults to 10 if omitted.
.UNINDENT
.SS Examples
.INDENT 0.0
.IP \(bu 2
\fBpopulation_size.Log1024\fP: Static population sizes 1...1024
.IP \(bu 2
\fBpopulation_size.Linear1000\fP: Static population sizes 100...1000 (10)
.IP \(bu 2
\fBpopulation_size.Linear3.C3\fP: Static population sizes 1...3 (3)
.IP \(bu 2
\fBpopulation_size.Linear10.C2\fP: Static population sizes 5...10 (2)
.UNINDENT
.SS Environment Variables
.sp
This platform ignores \fI\%SIERRA_ARCH\fP\&.
.SS Random Seeding For Reproducibility
.sp
ROS1+Gazebo do not provide a random number generator manager, but SIERRA
provides random seeds to each \fI\%Experimental Run\fP which \fI\%Project\fP
code should use to manage random number generation, if needed, to maximize
reproducability. See ln\-sierra\-tutorials\-project\-template\-input\-file and
\fI\%Experimental Definition Requirements\fP for details on the format of the provided seed. By default
SIERRA does not overwrite its generated random seeds for each experiment once
generated; you can override with \fB\-\-no\-preserve\-seeds\fP\&.
.SH ROS1+ROBOT PLATFORM
.sp
This platform can be selected via \fB\-\-platform=platform.ros1robot\fP\&.
.sp
This is the platform on which SIERRA will run experiments using \fI\%ROS1\fP on
a real robot of your choice. To use this platform, you must setup the
\fI\%SIERRA ROSBridge\fP\&.  This is a generic
platform meant to work with most real robots which \fI\%ROS1\fP supports, and as
a starting point to derive more specific platform configuration for a given
robot (if needed). For all execution environments using this platform (see
\fI\%Real Robot Execution Environment Plugins\fP for examples), SIERRA will run experiments
spread across multiple robots using GNU parallel.
.sp
SIERRA designates the host machine as the ROS master, and allows you to
(optionally) specify configuration for running one or more nodes on it in the
\fB\-\-template\-input\-file\fP to gather data from robots (see below). This is
helpful in some situations (e.g., simple robots which can\(aqt manage network
mounted filesystems).
.SS Batch Criteria
.sp
See \fI\%Batch Criteria\fP for a thorough explanation of batch criteria, but the
short version is that they are the core of SIERRA\-\-how to get it to DO stuff for
you. The following batch criteria are defined which can be used with any
\fI\%Project\fP\&.
.INDENT 0.0
.IP \(bu 2
\fI\%System Population Size\fP
.UNINDENT
.SS System Population Size
.sp
Changing the system size to investigate behavior across scales within a static
arena size (i.e., variable density). Systems are homogeneous.
.sp
\fBpopulation_size.{model}{N}[.C{cardinality}]\fP
.INDENT 0.0
.IP \(bu 2
\fBmodel\fP \- The population size model to use.
.INDENT 2.0
.IP \(bu 2
\fBLog\fP \- Population sizes for each experiment are distributed 1...N by
powers of 2.
.IP \(bu 2
\fBLinear\fP \- Population sizes for each experiment are distributed linearly
between 1...N, split evenly into 10 different sizes.
.UNINDENT
.IP \(bu 2
\fBN\fP \- The maximum population size.
.IP \(bu 2
\fBcardinality\fP \- If the model is \fBLinear\fP, then this can be used
to specify how many experiments to generate; i.e, it defines the \fIsize\fP of the
linear increment. Defaults to 10 if omitted.
.UNINDENT
.SS Examples
.INDENT 0.0
.IP \(bu 2
\fBpopulation_size.Log1024\fP: Static population sizes 1...1024
.IP \(bu 2
\fBpopulation_size.Linear1000\fP: Static population sizes 100...1000 (10)
.IP \(bu 2
\fBpopulation_size.Linear3.C3\fP: Static population sizes 1...3 (3)
.IP \(bu 2
\fBpopulation_size.Linear10.C2\fP: Static population sizes 5...10 (2)
.UNINDENT
.SS Environment Variables
.sp
This platform ignores \fI\%SIERRA_ARCH\fP\&.
.SS Random Seeding For Reproducibility
.sp
ROS do not provide a random number generator manager, but SIERRA provides random
seeds to each \fI\%Experimental Run\fP which \fI\%Project\fP code should use to
manage random number generation, if needed, to maximize reproducability. See
ln\-sierra\-tutorials\-project\-template\-input\-file and
\fI\%Experimental Definition Requirements\fP for details on the format of the provided seed. By
default SIERRA does not overwrite its generated random seeds for each experiment
once generated; you can override with \fB\-\-no\-preserve\-seeds\fP\&.
.SS Real Robot Considerations
.sp
SIERRA makes the following assumptions about the robots it is allocated each
invocation:
.INDENT 0.0
.IP \(bu 2
No robots will die/run out of battery during an \fI\%Experimental Run\fP\&.
.IP \(bu 2
Password\-less ssh is setup to each robot SIERRA is handed to use (can be as a
different user than the one which is invoking SIERRA on the host machine).
.IP \(bu 2
The robots have static IP addresses, or are always allocated an IP from a
known set so you can pass the set of IPs to SIERRA to use. This set of IP
address/hostnames can be explicitly passed to SIERRA via cmdline (see
\fI\%Command Line Interface\fP) or implicitly passed via
\fI\%SIERRA_NODEFILE\fP\&.
.IP \(bu 2
The ROS environment is setup either in the .bashrc for the robot login user,
or the necessary bits are in a script which SIERRA sources on login to each
robot (this is a configuration parameter\-\-see
ln\-sierra\-tutorials\-project\-main\-config).
.IP \(bu 2
ROS does not provide a way to say \(dqRun this experiment for X seconds\(dq, so
SIERRA inserts its own timekeeper node into each robot which will exit after X
seconds and take the roslaunch process with it on each robot and/or the master
node.
.UNINDENT
.sp
See also \fI\%ROS1+Robot Platform\fP\&.
.SH AUTHOR
John Harwell
.SH COPYRIGHT
2022, John Harwell
.\" Generated by docutils manpage writer.
.
