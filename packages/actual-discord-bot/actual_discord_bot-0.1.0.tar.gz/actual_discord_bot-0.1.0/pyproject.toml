[build-system]
requires = ["poetry-core>=1.2.0", "wheel",]
build-backend = "poetry.core.masonry.api"


[tool.coverage.run]
branch = true
relative_files = true
omit = [
    ".tox/*",
    "tests/*",
]


[tool.poetry]
name = "actual-discord-bot"
version = "0.1.0"
description = "A template Poetry project structure."

packages = [
    { include = "actual_discord_bot", from = "." },
]

authors = ["Mariusz Bielecki",]
maintainers = ["Mariusz Bielecki",]

include = []
license = "GPLv3"
readme = "README.md"

homepage = "https://pypi.org/project/actual-discord-bot/"
repository = "https://github.com/MariuszBielecki288728/actual-discord-bot"
documentation = "https://github.com/MariuszBielecki288728/actual-discord-bot"

keywords = [
    "python3",
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: Implementation :: CPython",
    "Typing :: Typed",
]


[tool.poetry.dependencies]
python = "^3.12"

discord = "*"


[tool.poetry.group.dev.dependencies]
mypy = "^1.11.2"


[tool.poetry.group.linters]
optional = true


[tool.poetry.group.linters.dependencies]
ruff = "^0.6.6"


[tool.poetry.group.tests]
optional = true


[tool.poetry.group.tests.dependencies]
pytest = "*"
pytest-asyncio = "*"
pytest-cov = "*"
tox = "*"
tox-gh-actions = "*"


[tool.poetry.urls]
"Tracker" = "https://github.com/MariuszBielecki288728/actual-discord-bot/issues"


[tool.pytest.ini_options]
minversion = "6.0"
asyncio_mode = "auto"
addopts = """
--doctest-modules \
--cov=./ \
--cov-append \
--cov-report html:tests/reports/coverage-html \
--cov-report xml:tests/reports/coverage.xml \
--ignore=docs/
"""
testpaths = [
    "tests",
]

[tool.ruff]
show-fixes = true
target-version = "py312"

[tool.ruff.lint.pycodestyle]
max-line-length = 120

[tool.ruff.lint]
select = [
    "A",    # Builtins
    "ANN",  # Annotations
    "ARG",  # Unused arguments
    "B",    # Bugbear
    "BLE",  # Blind except
    "C4",   # Comprehensions
    "C90",  # mccabe
    "COM",  # Commas
    "D2",   # Docstring conventions
    "D3",   # Triple double quotes
    "D4",   # Docstring text format
    "DTZ",  # Datetimes
    "EM",   # Error messages
    "ERA",  # Commented-out code
    "EXE",  # Executable
    "F",    # Pyflakes
    "FA",   # __future__ annotations
    "FLY",  # F-strings
    # "FURB", # Refurb
    "G",    # Logging format
    "I",    # Isort
    "ICN",  # Import conventions
    "INP",  # Disallow PEP-420 (Implicit namespace packages)
    "INT",  # gettext
    "ISC",  # Implicit str concat
    # "LOG",  # Logging
    "N",    # PEP-8 Naming
    "NPY",  # Numpy
    "PERF", # Unnecessary performance costs
    "PGH",  # Pygrep hooks
    "PIE",  # Unnecessary code
    "PL",   # Pylint
    "PT",   # Pytest
    "PTH",  # Use Pathlib
    "PYI",  # Stub files
    "Q",    # Quotes
    "RET",  # Return
    "RUF",  # Ruff
    "RSE",  # Raise
    "S",    # Bandit
    "SIM",  # Code simplification
    "SLF",  # Private member access
    "SLOT", # __slots__
    "T10",  # Debugger
    "T20",  # Print
    "TCH",  # Type checking
    "TID",  # Tidy imports
    "TRY",  # Exception handling
    "UP",   # Pyupgrade
    "W",    # Warnings
    "YTT",  # sys.version
]
ignore = [
    "D203",    # One blank line before class docstring
    "D212",    # Multi-line summary first line
]


[tool.ruff.lint.flake8-quotes]
docstring-quotes = "double"
multiline-quotes = "double"


[tool.ruff.lint.mccabe]
# Unlike Flake8, default to a complexity level of 10.
max-complexity = 10


[tool.ruff.lint.per-file-ignores]
# https://beta.ruff.rs/docs/rules/
"__init__.py" = ["F401","F403","F405",]
"tests/*" = ["ANN", "ARG", "INP001", "S101",]


[tool.ruff.lint.pylint]
max-args = 15
max-branches = 20
max-returns = 10
max-statements = 80


[tool.ruff.lint.flake8-tidy-imports]
ban-relative-imports = "all"


[tool.tox]
legacy_tox_ini = """
[tox]
envlist = py312
skip_missing_interpreters = true

[gh-actions]
python =
    3.12: py312

[testenv]
passenv = GITHUB_*
allowlist_externals = poetry

commands =
    poetry run pytest
    poetry run coverage report
"""
