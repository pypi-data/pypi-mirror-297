[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "openfigi-client"
version = "0.4.1"
description = "Python client for the OpenFIGI API."
authors = [{ name = "ljnsn", email = "info@ljnsn.com" }]
license = { file = "LICENSE" }
readme = "README.md"
requires-python = ">=3.10"
classifiers = [
  "License :: OSI Approved :: MIT License",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3",
]
keywords = ["openfigi", "api", "bloomberg", "figi", "python"]
dependencies = ["msgspec>=0.18.6", "httpx>=0.27.2"]

[tool.commitizen]
name = "cz_gitmoji"
version_provider = "pep621"
tag_format = "v$version"
bump_message = "ðŸ”– bump(release): v$current_version â†’ v$new_version"
update_changelog_on_bump = true
major_version_zero = true

[tool.uv]
dev-dependencies = [
  "commitizen>=3.25.0",
  "coverage>=7.5.1",
  "cz-conventional-gitmoji>=0.3.1",
  "ipython!=8.18.0",
  "pre-commit>=3.7.0",
  "pytest-anyio>=0.0.0",
  "pytest-recording>=0.13.1",
  "pytest>=8.2.0",
  "ruff>=0.4.3",
]

[tool.pdm.scripts]
test = { composite = [
  "coverage run -m pytest -m 'not slow'",
  "coverage report",
  "coverage xml",
] }
lint = "pre-commit run --all-files --color always"

[tool.ruff]
fix = true
target-version = "py310"
src = ["openfigi_client", "test"]
line-length = 88

[tool.ruff.lint]
select = ["ALL"]
# only during development, these will be fixed by pre-commit
unfixable = ["ERA001", "F401", "F841"]
ignore = [
  # Missing docstring in public module
  "D100",
  # Missing docstring in `__init__`
  "D107",
  # Multi-line docstring summary should start at the first line
  "D212",
  # Class attribute `id` is shadowing a python builtin
  "A003",
  # Missing type annotation for `self` in method
  "ANN101",
  # Missing type annotation for `cls` in classmethod
  "ANN102",
  # Dynamically typed expressions (typing.Any) are disallowed in `*args`
  "ANN401",
  # Exception must not use a string literal, assign to variable first
  "EM101",
  # Missing authot in TODO
  "TD002",
  # Missing issue link on the line following this TODO
  "TD003",
  # Line contains TODO
  "FIX002",
  # Avoid specifying long messages outside the exception class
  "TRY003",
  # Move application import into a type-checking block
  "TCH001",
  # Move third-party import into a type-checking block
  "TCH002",
  # Move standard library import into a type-checking block
  "TCH003",
  # Invalid TODO tag
  "TD001",
  # Line contains FIXME, consider resolving the issue
  "FIX001",
  #############################################################################
  # Rules conflicting with `ruff format`
  # https://docs.astral.sh/ruff/formatter/#conflicting-lint-rules
  #############################################################################
  # Checks for indentation that uses tabs.
  "W191",
  # Checks for indentation with a non-multiple of 4 spaces.
  "E111",
  # Checks for indentation of comments with a non-multiple of 4 spaces.
  "E114",
  # Checks for over-indented code.
  "E117",
  # Line length violation
  "E501",
  # Checks for docstrings that are indented with tabs.
  "D206",
  # Checks for docstrings that use '''triple single quotes''' instead of """triple double quotes"""
  "D300",
  # Make sure that inline strings are quoted consistently.
  "Q000",
  # Make sure that multiline strings are quoted consistently.
  "Q001",
  # Make sure that docstrings are quoted consistently.
  "Q002",
  # Checks for strings that include escaped quotes
  "Q003",
  # Missing trailing comma
  # "COM812",
  # Prohibited trailing comma
  "COM819",
  # Single line implicit string concatenation
  "ISC001",
  # Multiline implicit string concatenation
  "ISC002",
]

[tool.ruff.lint.per-file-ignores]
"test_*.py" = [
  # The use of `datetime.datetime()` without `tzinfo` argument is not allowed
  "DTZ001",
  # positional boolean args
  "FBT001",
  # usage of `assert` in tests
  "S101",
  # magic value used in comarison
  "PLR2004",
  # private member accessed
  "SLF001",
  # one line between summary and docstring
  "D205",
]
"examples/**/*.py" = [
  # part of implicit namespace package
  "INP001",
]

[tool.ruff.format]
line-ending = "lf"
indent-style = "space"

[tool.ruff.lint.isort]
known-first-party = ["openfigi_client", "test"]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.flake8-tidy-imports]
# Disallow all relative imports.
ban-relative-imports = "all"

[tool.ruff.lint.pep8-naming]
# Allow Pydantic's `@validator` decorator to trigger class method treatment.
classmethod-decorators = ["classmethod", "validator"]

[tool.coverage.run]
branch = true
command_line = "--module pytest"
data_file = "reports/.coverage"
source = ["openfigi_client"]

[tool.coverage.report]
fail_under = 50
precision = 1
show_missing = true
skip_covered = true

[tool.coverage.xml]
output = "reports/coverage.xml"

[tool.pytest]
anyio_backend = "asyncio"

[tool.pytest.ini_options]
addopts = """--color=yes --doctest-modules --exitfirst --failed-first \
  --strict-markers --strict-config --verbosity=2 \
  --junitxml=reports/pytest.xml --ignore=examples"""
markers = ["slow: mark a test as slow"]
filterwarnings = ["error"]

[tool.hatch.build.targets.sdist]
exclude = [
  ".gitignore",
  ".gitlab-ci.yml",
  ".pre-commit-config.yaml",
  "examples/*",
  "scripts/*",
  "tests/*",
]
