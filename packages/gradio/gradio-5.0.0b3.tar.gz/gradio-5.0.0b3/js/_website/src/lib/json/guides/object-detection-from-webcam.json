{"guide": {"name": "object-detection-from-webcam", "category": "streaming", "pretty_category": "Streaming", "guide_index": 2, "absolute_index": 35, "pretty_name": "Object Detection From Webcam", "content": "# Object Detection from a Webcam Stream\n\n\n\nIn this guide we'll use Yolo-v10 to do near-real time object detection in Gradio from a user's webcam.\nAlong the way, we'll be using the latest streaming features introduced in Gradio 5.0.\n\n## Setting up the Model\n\nFirst, we'll follow the installation instructions for [Yolov10n](https://huggingface.co/jameslahm/yolov10n) on the Hugging Face hub. \n\nRun `pip install git+https://github.com/THU-MIG/yolov10.git` in your virtual environment.\n\nThen, we'll download the model from the Hub (`ultralytics` is the library we've just installed).\n\n```python\nfrom ultralytics import YOLOv10\n\nmodel = YOLOv10.from_pretrained('jameslahm/yolov10n')\n```\n\nWe are using the `yolov10-n` variant because it has the lowest latency. See the [Performance](https://github.com/THU-MIG/yolov10?tab=readme-ov-file#performance) section of the README in the github repository.\n\n\n## The Inference Function\n\nOur inference function will accept a PIL image from the webcam as well as a desired conference threshold.\nObject detection models like YOLO identify many objects and assign a confidence score to each object. The lower the confidence, the higher the chance of a false positive. So we will let our users play with the conference threshold.\n\n```python\ndef yolov10_inference(image, conf_threshold):\n    width, _ = image.size\n    results = model.predict(source=image, imgsz=width, conf=conf_threshold)\n    annotated_image = results[0].plot()\n    return annotated_image[:, :, ::-1]\n```\n\nWe will use the `plot` method to draw a bounding box around each detected object. YoloV10 asses images are in the BGR color format, so we will flip them to be in the expected RGB format of web browsers.\n\n## The Gradio Demo\n\nThe Gradio demo will be pretty straightforward but we'll do a couple of things that are specific to streaming:\n\n* The user's webcam will be both an input and an output. That way, the user will only see their stream with the detected objects.\n* We'll use the `time_limit` and `stream_every` parameters of the `stream` event. The `time_limit` parameter will mean that we'll process each user's stream for that amount of time. In a multi-user setting, such as on Spaces, this means that after this period of time, the next user in the queue will be able to use the demo. The `stream_every` function will control how frequently the webcam stream is sent to the server.\n\nIn addition, we'll apply some custom css so that the webcam and slider are centered on the page.\n\n```python\ncss=\"\"\".my-group {max-width: 600px !important; max-height: 600 !important;}\n                      .my-column {display: flex !important; justify-content: center !important; align-items: center !important};\"\"\"\n\n\nwith gr.Blocks(css=css) as app:\n    gr.HTML(\n        \"\"\"\n    <h1 style='text-align: center'>\n    YOLOv10 Webcam Stream\n    </h1>\n    \"\"\")\n    gr.HTML(\n        \"\"\"\n        <h3 style='text-align: center'>\n        <a href='https://arxiv.org/abs/2405.14458' target='_blank'>arXiv</a> | <a href='https://github.com/THU-MIG/yolov10' target='_blank'>github</a>\n        </h3>\n        \"\"\")\n    with gr.Column(elem_classes=[\"my-column\"]):\n        with gr.Group(elem_classes=[\"my-group\"]):\n            image = gr.Image(type=\"pil\", label=\"Image\", sources=\"webcam\")\n            conf_threshold = gr.Slider(\n                label=\"Confidence Threshold\",\n                minimum=0.0,\n                maximum=1.0,\n                step=0.05,\n                value=0.30,\n            )\n        image.stream(\n            fn=yolov10_inference,\n            inputs=[image, conf_threshold],\n            outputs=[image],\n            stream_every=0.1,\n            time_limit=30\n        )\n```\n\n\n## Conclusion\n\nYou can check out our demo hosted on Hugging Face Spaces [here](https://huggingface.co/spaces/gradio/YOLOv10-webcam-stream). \n\nIt is also embedded on this page below\n\n<gradio-app space='gradio/yolov10_webcam_stream'></gradio-app>", "tags": ["VISION", "STREAMING", "WEBCAM"], "spaces": [], "url": "/guides/object-detection-from-webcam/", "contributor": null}}