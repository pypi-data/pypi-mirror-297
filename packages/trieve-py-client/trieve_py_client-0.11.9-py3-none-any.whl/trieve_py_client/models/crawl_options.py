# coding: utf-8

"""
    Trieve API

    Trieve OpenAPI Specification. This document describes all of the operations available through the Trieve API.

    The version of the OpenAPI document: 0.11.9
    Contact: developers@trieve.ai
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from trieve_py_client.models.crawl_interval import CrawlInterval
from typing import Optional, Set
from typing_extensions import Self

class CrawlOptions(BaseModel):
    """
    CrawlOptions
    """ # noqa: E501
    exclude_paths: Optional[List[StrictStr]] = Field(default=None, description="URL Patterns to exclude from the crawl")
    exclude_tags: Optional[List[StrictStr]] = Field(default=None, description="Specify the HTML tags, classes and ids to exclude from the response.")
    include_paths: Optional[List[StrictStr]] = Field(default=None, description="URL Patterns to include in the crawl")
    include_tags: Optional[List[StrictStr]] = Field(default=None, description="Specify the HTML tags, classes and ids to include in the response.")
    interval: Optional[CrawlInterval] = None
    limit: Optional[StrictInt] = Field(default=None, description="How many pages to crawl, defaults to 20")
    max_depth: Optional[StrictInt] = Field(default=None, description="How many levels deep to crawl, defaults to 2")
    site_url: Optional[StrictStr] = Field(default=None, description="The URL to crawl")
    __properties: ClassVar[List[str]] = ["exclude_paths", "exclude_tags", "include_paths", "include_tags", "interval", "limit", "max_depth", "site_url"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CrawlOptions from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if exclude_paths (nullable) is None
        # and model_fields_set contains the field
        if self.exclude_paths is None and "exclude_paths" in self.model_fields_set:
            _dict['exclude_paths'] = None

        # set to None if exclude_tags (nullable) is None
        # and model_fields_set contains the field
        if self.exclude_tags is None and "exclude_tags" in self.model_fields_set:
            _dict['exclude_tags'] = None

        # set to None if include_paths (nullable) is None
        # and model_fields_set contains the field
        if self.include_paths is None and "include_paths" in self.model_fields_set:
            _dict['include_paths'] = None

        # set to None if include_tags (nullable) is None
        # and model_fields_set contains the field
        if self.include_tags is None and "include_tags" in self.model_fields_set:
            _dict['include_tags'] = None

        # set to None if interval (nullable) is None
        # and model_fields_set contains the field
        if self.interval is None and "interval" in self.model_fields_set:
            _dict['interval'] = None

        # set to None if limit (nullable) is None
        # and model_fields_set contains the field
        if self.limit is None and "limit" in self.model_fields_set:
            _dict['limit'] = None

        # set to None if max_depth (nullable) is None
        # and model_fields_set contains the field
        if self.max_depth is None and "max_depth" in self.model_fields_set:
            _dict['max_depth'] = None

        # set to None if site_url (nullable) is None
        # and model_fields_set contains the field
        if self.site_url is None and "site_url" in self.model_fields_set:
            _dict['site_url'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CrawlOptions from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "exclude_paths": obj.get("exclude_paths"),
            "exclude_tags": obj.get("exclude_tags"),
            "include_paths": obj.get("include_paths"),
            "include_tags": obj.get("include_tags"),
            "interval": obj.get("interval"),
            "limit": obj.get("limit"),
            "max_depth": obj.get("max_depth"),
            "site_url": obj.get("site_url")
        })
        return _obj


