/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 5.28.2
 * source: forwarder/trade.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../google/protobuf/empty";
import * as pb_1 from "google-protobuf";
export class FuturePosition extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        code?: string;
        direction?: string;
        quantity?: number;
        price?: number;
        last_price?: number;
        pnl?: number;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("code" in data && data.code != undefined) {
                this.code = data.code;
            }
            if ("direction" in data && data.direction != undefined) {
                this.direction = data.direction;
            }
            if ("quantity" in data && data.quantity != undefined) {
                this.quantity = data.quantity;
            }
            if ("price" in data && data.price != undefined) {
                this.price = data.price;
            }
            if ("last_price" in data && data.last_price != undefined) {
                this.last_price = data.last_price;
            }
            if ("pnl" in data && data.pnl != undefined) {
                this.pnl = data.pnl;
            }
        }
    }
    get code() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set code(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get direction() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set direction(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    get quantity() {
        return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
    }
    set quantity(value: number) {
        pb_1.Message.setField(this, 3, value);
    }
    get price() {
        return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
    }
    set price(value: number) {
        pb_1.Message.setField(this, 4, value);
    }
    get last_price() {
        return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
    }
    set last_price(value: number) {
        pb_1.Message.setField(this, 5, value);
    }
    get pnl() {
        return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
    }
    set pnl(value: number) {
        pb_1.Message.setField(this, 6, value);
    }
    static fromObject(data: {
        code?: string;
        direction?: string;
        quantity?: number;
        price?: number;
        last_price?: number;
        pnl?: number;
    }): FuturePosition {
        const message = new FuturePosition({});
        if (data.code != null) {
            message.code = data.code;
        }
        if (data.direction != null) {
            message.direction = data.direction;
        }
        if (data.quantity != null) {
            message.quantity = data.quantity;
        }
        if (data.price != null) {
            message.price = data.price;
        }
        if (data.last_price != null) {
            message.last_price = data.last_price;
        }
        if (data.pnl != null) {
            message.pnl = data.pnl;
        }
        return message;
    }
    toObject() {
        const data: {
            code?: string;
            direction?: string;
            quantity?: number;
            price?: number;
            last_price?: number;
            pnl?: number;
        } = {};
        if (this.code != null) {
            data.code = this.code;
        }
        if (this.direction != null) {
            data.direction = this.direction;
        }
        if (this.quantity != null) {
            data.quantity = this.quantity;
        }
        if (this.price != null) {
            data.price = this.price;
        }
        if (this.last_price != null) {
            data.last_price = this.last_price;
        }
        if (this.pnl != null) {
            data.pnl = this.pnl;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.code.length)
            writer.writeString(1, this.code);
        if (this.direction.length)
            writer.writeString(2, this.direction);
        if (this.quantity != 0)
            writer.writeInt32(3, this.quantity);
        if (this.price != 0)
            writer.writeDouble(4, this.price);
        if (this.last_price != 0)
            writer.writeDouble(5, this.last_price);
        if (this.pnl != 0)
            writer.writeDouble(6, this.pnl);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): FuturePosition {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new FuturePosition();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.code = reader.readString();
                    break;
                case 2:
                    message.direction = reader.readString();
                    break;
                case 3:
                    message.quantity = reader.readInt32();
                    break;
                case 4:
                    message.price = reader.readDouble();
                    break;
                case 5:
                    message.last_price = reader.readDouble();
                    break;
                case 6:
                    message.pnl = reader.readDouble();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): FuturePosition {
        return FuturePosition.deserialize(bytes);
    }
}
export class FuturePositionArr extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        position_arr?: FuturePosition[];
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("position_arr" in data && data.position_arr != undefined) {
                this.position_arr = data.position_arr;
            }
        }
    }
    get position_arr() {
        return pb_1.Message.getRepeatedWrapperField(this, FuturePosition, 1) as FuturePosition[];
    }
    set position_arr(value: FuturePosition[]) {
        pb_1.Message.setRepeatedWrapperField(this, 1, value);
    }
    static fromObject(data: {
        position_arr?: ReturnType<typeof FuturePosition.prototype.toObject>[];
    }): FuturePositionArr {
        const message = new FuturePositionArr({});
        if (data.position_arr != null) {
            message.position_arr = data.position_arr.map(item => FuturePosition.fromObject(item));
        }
        return message;
    }
    toObject() {
        const data: {
            position_arr?: ReturnType<typeof FuturePosition.prototype.toObject>[];
        } = {};
        if (this.position_arr != null) {
            data.position_arr = this.position_arr.map((item: FuturePosition) => item.toObject());
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.position_arr.length)
            writer.writeRepeatedMessage(1, this.position_arr, (item: FuturePosition) => item.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): FuturePositionArr {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new FuturePositionArr();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.position_arr, () => pb_1.Message.addToRepeatedWrapperField(message, 1, FuturePosition.deserialize(reader), FuturePosition));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): FuturePositionArr {
        return FuturePositionArr.deserialize(bytes);
    }
}
export class StockPosition extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        id?: number;
        code?: string;
        direction?: string;
        quantity?: number;
        price?: number;
        last_price?: number;
        pnl?: number;
        yd_quantity?: number;
        cond?: string;
        margin_purchase_amount?: number;
        collateral?: number;
        short_sale_margin?: number;
        interest?: number;
        detail_arr?: StockPositionDetail[];
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [14], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("id" in data && data.id != undefined) {
                this.id = data.id;
            }
            if ("code" in data && data.code != undefined) {
                this.code = data.code;
            }
            if ("direction" in data && data.direction != undefined) {
                this.direction = data.direction;
            }
            if ("quantity" in data && data.quantity != undefined) {
                this.quantity = data.quantity;
            }
            if ("price" in data && data.price != undefined) {
                this.price = data.price;
            }
            if ("last_price" in data && data.last_price != undefined) {
                this.last_price = data.last_price;
            }
            if ("pnl" in data && data.pnl != undefined) {
                this.pnl = data.pnl;
            }
            if ("yd_quantity" in data && data.yd_quantity != undefined) {
                this.yd_quantity = data.yd_quantity;
            }
            if ("cond" in data && data.cond != undefined) {
                this.cond = data.cond;
            }
            if ("margin_purchase_amount" in data && data.margin_purchase_amount != undefined) {
                this.margin_purchase_amount = data.margin_purchase_amount;
            }
            if ("collateral" in data && data.collateral != undefined) {
                this.collateral = data.collateral;
            }
            if ("short_sale_margin" in data && data.short_sale_margin != undefined) {
                this.short_sale_margin = data.short_sale_margin;
            }
            if ("interest" in data && data.interest != undefined) {
                this.interest = data.interest;
            }
            if ("detail_arr" in data && data.detail_arr != undefined) {
                this.detail_arr = data.detail_arr;
            }
        }
    }
    get id() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
    }
    set id(value: number) {
        pb_1.Message.setField(this, 1, value);
    }
    get code() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set code(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    get direction() {
        return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
    }
    set direction(value: string) {
        pb_1.Message.setField(this, 3, value);
    }
    get quantity() {
        return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
    }
    set quantity(value: number) {
        pb_1.Message.setField(this, 4, value);
    }
    get price() {
        return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
    }
    set price(value: number) {
        pb_1.Message.setField(this, 5, value);
    }
    get last_price() {
        return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
    }
    set last_price(value: number) {
        pb_1.Message.setField(this, 6, value);
    }
    get pnl() {
        return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
    }
    set pnl(value: number) {
        pb_1.Message.setField(this, 7, value);
    }
    get yd_quantity() {
        return pb_1.Message.getFieldWithDefault(this, 8, 0) as number;
    }
    set yd_quantity(value: number) {
        pb_1.Message.setField(this, 8, value);
    }
    get cond() {
        return pb_1.Message.getFieldWithDefault(this, 9, "") as string;
    }
    set cond(value: string) {
        pb_1.Message.setField(this, 9, value);
    }
    get margin_purchase_amount() {
        return pb_1.Message.getFieldWithDefault(this, 10, 0) as number;
    }
    set margin_purchase_amount(value: number) {
        pb_1.Message.setField(this, 10, value);
    }
    get collateral() {
        return pb_1.Message.getFieldWithDefault(this, 11, 0) as number;
    }
    set collateral(value: number) {
        pb_1.Message.setField(this, 11, value);
    }
    get short_sale_margin() {
        return pb_1.Message.getFieldWithDefault(this, 12, 0) as number;
    }
    set short_sale_margin(value: number) {
        pb_1.Message.setField(this, 12, value);
    }
    get interest() {
        return pb_1.Message.getFieldWithDefault(this, 13, 0) as number;
    }
    set interest(value: number) {
        pb_1.Message.setField(this, 13, value);
    }
    get detail_arr() {
        return pb_1.Message.getRepeatedWrapperField(this, StockPositionDetail, 14) as StockPositionDetail[];
    }
    set detail_arr(value: StockPositionDetail[]) {
        pb_1.Message.setRepeatedWrapperField(this, 14, value);
    }
    static fromObject(data: {
        id?: number;
        code?: string;
        direction?: string;
        quantity?: number;
        price?: number;
        last_price?: number;
        pnl?: number;
        yd_quantity?: number;
        cond?: string;
        margin_purchase_amount?: number;
        collateral?: number;
        short_sale_margin?: number;
        interest?: number;
        detail_arr?: ReturnType<typeof StockPositionDetail.prototype.toObject>[];
    }): StockPosition {
        const message = new StockPosition({});
        if (data.id != null) {
            message.id = data.id;
        }
        if (data.code != null) {
            message.code = data.code;
        }
        if (data.direction != null) {
            message.direction = data.direction;
        }
        if (data.quantity != null) {
            message.quantity = data.quantity;
        }
        if (data.price != null) {
            message.price = data.price;
        }
        if (data.last_price != null) {
            message.last_price = data.last_price;
        }
        if (data.pnl != null) {
            message.pnl = data.pnl;
        }
        if (data.yd_quantity != null) {
            message.yd_quantity = data.yd_quantity;
        }
        if (data.cond != null) {
            message.cond = data.cond;
        }
        if (data.margin_purchase_amount != null) {
            message.margin_purchase_amount = data.margin_purchase_amount;
        }
        if (data.collateral != null) {
            message.collateral = data.collateral;
        }
        if (data.short_sale_margin != null) {
            message.short_sale_margin = data.short_sale_margin;
        }
        if (data.interest != null) {
            message.interest = data.interest;
        }
        if (data.detail_arr != null) {
            message.detail_arr = data.detail_arr.map(item => StockPositionDetail.fromObject(item));
        }
        return message;
    }
    toObject() {
        const data: {
            id?: number;
            code?: string;
            direction?: string;
            quantity?: number;
            price?: number;
            last_price?: number;
            pnl?: number;
            yd_quantity?: number;
            cond?: string;
            margin_purchase_amount?: number;
            collateral?: number;
            short_sale_margin?: number;
            interest?: number;
            detail_arr?: ReturnType<typeof StockPositionDetail.prototype.toObject>[];
        } = {};
        if (this.id != null) {
            data.id = this.id;
        }
        if (this.code != null) {
            data.code = this.code;
        }
        if (this.direction != null) {
            data.direction = this.direction;
        }
        if (this.quantity != null) {
            data.quantity = this.quantity;
        }
        if (this.price != null) {
            data.price = this.price;
        }
        if (this.last_price != null) {
            data.last_price = this.last_price;
        }
        if (this.pnl != null) {
            data.pnl = this.pnl;
        }
        if (this.yd_quantity != null) {
            data.yd_quantity = this.yd_quantity;
        }
        if (this.cond != null) {
            data.cond = this.cond;
        }
        if (this.margin_purchase_amount != null) {
            data.margin_purchase_amount = this.margin_purchase_amount;
        }
        if (this.collateral != null) {
            data.collateral = this.collateral;
        }
        if (this.short_sale_margin != null) {
            data.short_sale_margin = this.short_sale_margin;
        }
        if (this.interest != null) {
            data.interest = this.interest;
        }
        if (this.detail_arr != null) {
            data.detail_arr = this.detail_arr.map((item: StockPositionDetail) => item.toObject());
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.id != 0)
            writer.writeInt32(1, this.id);
        if (this.code.length)
            writer.writeString(2, this.code);
        if (this.direction.length)
            writer.writeString(3, this.direction);
        if (this.quantity != 0)
            writer.writeInt32(4, this.quantity);
        if (this.price != 0)
            writer.writeDouble(5, this.price);
        if (this.last_price != 0)
            writer.writeDouble(6, this.last_price);
        if (this.pnl != 0)
            writer.writeDouble(7, this.pnl);
        if (this.yd_quantity != 0)
            writer.writeInt32(8, this.yd_quantity);
        if (this.cond.length)
            writer.writeString(9, this.cond);
        if (this.margin_purchase_amount != 0)
            writer.writeInt32(10, this.margin_purchase_amount);
        if (this.collateral != 0)
            writer.writeInt32(11, this.collateral);
        if (this.short_sale_margin != 0)
            writer.writeInt32(12, this.short_sale_margin);
        if (this.interest != 0)
            writer.writeInt32(13, this.interest);
        if (this.detail_arr.length)
            writer.writeRepeatedMessage(14, this.detail_arr, (item: StockPositionDetail) => item.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): StockPosition {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new StockPosition();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.id = reader.readInt32();
                    break;
                case 2:
                    message.code = reader.readString();
                    break;
                case 3:
                    message.direction = reader.readString();
                    break;
                case 4:
                    message.quantity = reader.readInt32();
                    break;
                case 5:
                    message.price = reader.readDouble();
                    break;
                case 6:
                    message.last_price = reader.readDouble();
                    break;
                case 7:
                    message.pnl = reader.readDouble();
                    break;
                case 8:
                    message.yd_quantity = reader.readInt32();
                    break;
                case 9:
                    message.cond = reader.readString();
                    break;
                case 10:
                    message.margin_purchase_amount = reader.readInt32();
                    break;
                case 11:
                    message.collateral = reader.readInt32();
                    break;
                case 12:
                    message.short_sale_margin = reader.readInt32();
                    break;
                case 13:
                    message.interest = reader.readInt32();
                    break;
                case 14:
                    reader.readMessage(message.detail_arr, () => pb_1.Message.addToRepeatedWrapperField(message, 14, StockPositionDetail.deserialize(reader), StockPositionDetail));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): StockPosition {
        return StockPosition.deserialize(bytes);
    }
}
export class StockPositionArr extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        position_arr?: StockPosition[];
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("position_arr" in data && data.position_arr != undefined) {
                this.position_arr = data.position_arr;
            }
        }
    }
    get position_arr() {
        return pb_1.Message.getRepeatedWrapperField(this, StockPosition, 1) as StockPosition[];
    }
    set position_arr(value: StockPosition[]) {
        pb_1.Message.setRepeatedWrapperField(this, 1, value);
    }
    static fromObject(data: {
        position_arr?: ReturnType<typeof StockPosition.prototype.toObject>[];
    }): StockPositionArr {
        const message = new StockPositionArr({});
        if (data.position_arr != null) {
            message.position_arr = data.position_arr.map(item => StockPosition.fromObject(item));
        }
        return message;
    }
    toObject() {
        const data: {
            position_arr?: ReturnType<typeof StockPosition.prototype.toObject>[];
        } = {};
        if (this.position_arr != null) {
            data.position_arr = this.position_arr.map((item: StockPosition) => item.toObject());
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.position_arr.length)
            writer.writeRepeatedMessage(1, this.position_arr, (item: StockPosition) => item.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): StockPositionArr {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new StockPositionArr();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.position_arr, () => pb_1.Message.addToRepeatedWrapperField(message, 1, StockPosition.deserialize(reader), StockPosition));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): StockPositionArr {
        return StockPositionArr.deserialize(bytes);
    }
}
export class StockPositionDetail extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        date?: string;
        code?: string;
        quantity?: number;
        price?: number;
        last_price?: number;
        dseq?: string;
        direction?: string;
        pnl?: number;
        currency?: string;
        fee?: number;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("date" in data && data.date != undefined) {
                this.date = data.date;
            }
            if ("code" in data && data.code != undefined) {
                this.code = data.code;
            }
            if ("quantity" in data && data.quantity != undefined) {
                this.quantity = data.quantity;
            }
            if ("price" in data && data.price != undefined) {
                this.price = data.price;
            }
            if ("last_price" in data && data.last_price != undefined) {
                this.last_price = data.last_price;
            }
            if ("dseq" in data && data.dseq != undefined) {
                this.dseq = data.dseq;
            }
            if ("direction" in data && data.direction != undefined) {
                this.direction = data.direction;
            }
            if ("pnl" in data && data.pnl != undefined) {
                this.pnl = data.pnl;
            }
            if ("currency" in data && data.currency != undefined) {
                this.currency = data.currency;
            }
            if ("fee" in data && data.fee != undefined) {
                this.fee = data.fee;
            }
        }
    }
    get date() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set date(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get code() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set code(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    get quantity() {
        return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
    }
    set quantity(value: number) {
        pb_1.Message.setField(this, 3, value);
    }
    get price() {
        return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
    }
    set price(value: number) {
        pb_1.Message.setField(this, 4, value);
    }
    get last_price() {
        return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
    }
    set last_price(value: number) {
        pb_1.Message.setField(this, 5, value);
    }
    get dseq() {
        return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
    }
    set dseq(value: string) {
        pb_1.Message.setField(this, 6, value);
    }
    get direction() {
        return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
    }
    set direction(value: string) {
        pb_1.Message.setField(this, 7, value);
    }
    get pnl() {
        return pb_1.Message.getFieldWithDefault(this, 8, 0) as number;
    }
    set pnl(value: number) {
        pb_1.Message.setField(this, 8, value);
    }
    get currency() {
        return pb_1.Message.getFieldWithDefault(this, 9, "") as string;
    }
    set currency(value: string) {
        pb_1.Message.setField(this, 9, value);
    }
    get fee() {
        return pb_1.Message.getFieldWithDefault(this, 10, 0) as number;
    }
    set fee(value: number) {
        pb_1.Message.setField(this, 10, value);
    }
    static fromObject(data: {
        date?: string;
        code?: string;
        quantity?: number;
        price?: number;
        last_price?: number;
        dseq?: string;
        direction?: string;
        pnl?: number;
        currency?: string;
        fee?: number;
    }): StockPositionDetail {
        const message = new StockPositionDetail({});
        if (data.date != null) {
            message.date = data.date;
        }
        if (data.code != null) {
            message.code = data.code;
        }
        if (data.quantity != null) {
            message.quantity = data.quantity;
        }
        if (data.price != null) {
            message.price = data.price;
        }
        if (data.last_price != null) {
            message.last_price = data.last_price;
        }
        if (data.dseq != null) {
            message.dseq = data.dseq;
        }
        if (data.direction != null) {
            message.direction = data.direction;
        }
        if (data.pnl != null) {
            message.pnl = data.pnl;
        }
        if (data.currency != null) {
            message.currency = data.currency;
        }
        if (data.fee != null) {
            message.fee = data.fee;
        }
        return message;
    }
    toObject() {
        const data: {
            date?: string;
            code?: string;
            quantity?: number;
            price?: number;
            last_price?: number;
            dseq?: string;
            direction?: string;
            pnl?: number;
            currency?: string;
            fee?: number;
        } = {};
        if (this.date != null) {
            data.date = this.date;
        }
        if (this.code != null) {
            data.code = this.code;
        }
        if (this.quantity != null) {
            data.quantity = this.quantity;
        }
        if (this.price != null) {
            data.price = this.price;
        }
        if (this.last_price != null) {
            data.last_price = this.last_price;
        }
        if (this.dseq != null) {
            data.dseq = this.dseq;
        }
        if (this.direction != null) {
            data.direction = this.direction;
        }
        if (this.pnl != null) {
            data.pnl = this.pnl;
        }
        if (this.currency != null) {
            data.currency = this.currency;
        }
        if (this.fee != null) {
            data.fee = this.fee;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.date.length)
            writer.writeString(1, this.date);
        if (this.code.length)
            writer.writeString(2, this.code);
        if (this.quantity != 0)
            writer.writeInt32(3, this.quantity);
        if (this.price != 0)
            writer.writeDouble(4, this.price);
        if (this.last_price != 0)
            writer.writeDouble(5, this.last_price);
        if (this.dseq.length)
            writer.writeString(6, this.dseq);
        if (this.direction.length)
            writer.writeString(7, this.direction);
        if (this.pnl != 0)
            writer.writeDouble(8, this.pnl);
        if (this.currency.length)
            writer.writeString(9, this.currency);
        if (this.fee != 0)
            writer.writeDouble(10, this.fee);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): StockPositionDetail {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new StockPositionDetail();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.date = reader.readString();
                    break;
                case 2:
                    message.code = reader.readString();
                    break;
                case 3:
                    message.quantity = reader.readInt32();
                    break;
                case 4:
                    message.price = reader.readDouble();
                    break;
                case 5:
                    message.last_price = reader.readDouble();
                    break;
                case 6:
                    message.dseq = reader.readString();
                    break;
                case 7:
                    message.direction = reader.readString();
                    break;
                case 8:
                    message.pnl = reader.readDouble();
                    break;
                case 9:
                    message.currency = reader.readString();
                    break;
                case 10:
                    message.fee = reader.readDouble();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): StockPositionDetail {
        return StockPositionDetail.deserialize(bytes);
    }
}
export class StockOrderDetail extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        stock_num?: string;
        price?: number;
        quantity?: number;
        simulate?: boolean;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("stock_num" in data && data.stock_num != undefined) {
                this.stock_num = data.stock_num;
            }
            if ("price" in data && data.price != undefined) {
                this.price = data.price;
            }
            if ("quantity" in data && data.quantity != undefined) {
                this.quantity = data.quantity;
            }
            if ("simulate" in data && data.simulate != undefined) {
                this.simulate = data.simulate;
            }
        }
    }
    get stock_num() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set stock_num(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get price() {
        return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
    }
    set price(value: number) {
        pb_1.Message.setField(this, 2, value);
    }
    get quantity() {
        return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
    }
    set quantity(value: number) {
        pb_1.Message.setField(this, 3, value);
    }
    get simulate() {
        return pb_1.Message.getFieldWithDefault(this, 4, false) as boolean;
    }
    set simulate(value: boolean) {
        pb_1.Message.setField(this, 4, value);
    }
    static fromObject(data: {
        stock_num?: string;
        price?: number;
        quantity?: number;
        simulate?: boolean;
    }): StockOrderDetail {
        const message = new StockOrderDetail({});
        if (data.stock_num != null) {
            message.stock_num = data.stock_num;
        }
        if (data.price != null) {
            message.price = data.price;
        }
        if (data.quantity != null) {
            message.quantity = data.quantity;
        }
        if (data.simulate != null) {
            message.simulate = data.simulate;
        }
        return message;
    }
    toObject() {
        const data: {
            stock_num?: string;
            price?: number;
            quantity?: number;
            simulate?: boolean;
        } = {};
        if (this.stock_num != null) {
            data.stock_num = this.stock_num;
        }
        if (this.price != null) {
            data.price = this.price;
        }
        if (this.quantity != null) {
            data.quantity = this.quantity;
        }
        if (this.simulate != null) {
            data.simulate = this.simulate;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.stock_num.length)
            writer.writeString(1, this.stock_num);
        if (this.price != 0)
            writer.writeDouble(2, this.price);
        if (this.quantity != 0)
            writer.writeInt64(3, this.quantity);
        if (this.simulate != false)
            writer.writeBool(4, this.simulate);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): StockOrderDetail {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new StockOrderDetail();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.stock_num = reader.readString();
                    break;
                case 2:
                    message.price = reader.readDouble();
                    break;
                case 3:
                    message.quantity = reader.readInt64();
                    break;
                case 4:
                    message.simulate = reader.readBool();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): StockOrderDetail {
        return StockOrderDetail.deserialize(bytes);
    }
}
export class OddStockOrderDetail extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        stock_num?: string;
        price?: number;
        share?: number;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("stock_num" in data && data.stock_num != undefined) {
                this.stock_num = data.stock_num;
            }
            if ("price" in data && data.price != undefined) {
                this.price = data.price;
            }
            if ("share" in data && data.share != undefined) {
                this.share = data.share;
            }
        }
    }
    get stock_num() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set stock_num(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get price() {
        return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
    }
    set price(value: number) {
        pb_1.Message.setField(this, 2, value);
    }
    get share() {
        return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
    }
    set share(value: number) {
        pb_1.Message.setField(this, 3, value);
    }
    static fromObject(data: {
        stock_num?: string;
        price?: number;
        share?: number;
    }): OddStockOrderDetail {
        const message = new OddStockOrderDetail({});
        if (data.stock_num != null) {
            message.stock_num = data.stock_num;
        }
        if (data.price != null) {
            message.price = data.price;
        }
        if (data.share != null) {
            message.share = data.share;
        }
        return message;
    }
    toObject() {
        const data: {
            stock_num?: string;
            price?: number;
            share?: number;
        } = {};
        if (this.stock_num != null) {
            data.stock_num = this.stock_num;
        }
        if (this.price != null) {
            data.price = this.price;
        }
        if (this.share != null) {
            data.share = this.share;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.stock_num.length)
            writer.writeString(1, this.stock_num);
        if (this.price != 0)
            writer.writeDouble(2, this.price);
        if (this.share != 0)
            writer.writeInt64(3, this.share);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): OddStockOrderDetail {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new OddStockOrderDetail();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.stock_num = reader.readString();
                    break;
                case 2:
                    message.price = reader.readDouble();
                    break;
                case 3:
                    message.share = reader.readInt64();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): OddStockOrderDetail {
        return OddStockOrderDetail.deserialize(bytes);
    }
}
export class FutureOrderDetail extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        code?: string;
        price?: number;
        quantity?: number;
        simulate?: boolean;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("code" in data && data.code != undefined) {
                this.code = data.code;
            }
            if ("price" in data && data.price != undefined) {
                this.price = data.price;
            }
            if ("quantity" in data && data.quantity != undefined) {
                this.quantity = data.quantity;
            }
            if ("simulate" in data && data.simulate != undefined) {
                this.simulate = data.simulate;
            }
        }
    }
    get code() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set code(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get price() {
        return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
    }
    set price(value: number) {
        pb_1.Message.setField(this, 2, value);
    }
    get quantity() {
        return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
    }
    set quantity(value: number) {
        pb_1.Message.setField(this, 3, value);
    }
    get simulate() {
        return pb_1.Message.getFieldWithDefault(this, 4, false) as boolean;
    }
    set simulate(value: boolean) {
        pb_1.Message.setField(this, 4, value);
    }
    static fromObject(data: {
        code?: string;
        price?: number;
        quantity?: number;
        simulate?: boolean;
    }): FutureOrderDetail {
        const message = new FutureOrderDetail({});
        if (data.code != null) {
            message.code = data.code;
        }
        if (data.price != null) {
            message.price = data.price;
        }
        if (data.quantity != null) {
            message.quantity = data.quantity;
        }
        if (data.simulate != null) {
            message.simulate = data.simulate;
        }
        return message;
    }
    toObject() {
        const data: {
            code?: string;
            price?: number;
            quantity?: number;
            simulate?: boolean;
        } = {};
        if (this.code != null) {
            data.code = this.code;
        }
        if (this.price != null) {
            data.price = this.price;
        }
        if (this.quantity != null) {
            data.quantity = this.quantity;
        }
        if (this.simulate != null) {
            data.simulate = this.simulate;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.code.length)
            writer.writeString(1, this.code);
        if (this.price != 0)
            writer.writeDouble(2, this.price);
        if (this.quantity != 0)
            writer.writeInt64(3, this.quantity);
        if (this.simulate != false)
            writer.writeBool(4, this.simulate);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): FutureOrderDetail {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new FutureOrderDetail();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.code = reader.readString();
                    break;
                case 2:
                    message.price = reader.readDouble();
                    break;
                case 3:
                    message.quantity = reader.readInt64();
                    break;
                case 4:
                    message.simulate = reader.readBool();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): FutureOrderDetail {
        return FutureOrderDetail.deserialize(bytes);
    }
}
export class OptionOrderDetail extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        code?: string;
        price?: number;
        quantity?: number;
        simulate?: boolean;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("code" in data && data.code != undefined) {
                this.code = data.code;
            }
            if ("price" in data && data.price != undefined) {
                this.price = data.price;
            }
            if ("quantity" in data && data.quantity != undefined) {
                this.quantity = data.quantity;
            }
            if ("simulate" in data && data.simulate != undefined) {
                this.simulate = data.simulate;
            }
        }
    }
    get code() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set code(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get price() {
        return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
    }
    set price(value: number) {
        pb_1.Message.setField(this, 2, value);
    }
    get quantity() {
        return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
    }
    set quantity(value: number) {
        pb_1.Message.setField(this, 3, value);
    }
    get simulate() {
        return pb_1.Message.getFieldWithDefault(this, 4, false) as boolean;
    }
    set simulate(value: boolean) {
        pb_1.Message.setField(this, 4, value);
    }
    static fromObject(data: {
        code?: string;
        price?: number;
        quantity?: number;
        simulate?: boolean;
    }): OptionOrderDetail {
        const message = new OptionOrderDetail({});
        if (data.code != null) {
            message.code = data.code;
        }
        if (data.price != null) {
            message.price = data.price;
        }
        if (data.quantity != null) {
            message.quantity = data.quantity;
        }
        if (data.simulate != null) {
            message.simulate = data.simulate;
        }
        return message;
    }
    toObject() {
        const data: {
            code?: string;
            price?: number;
            quantity?: number;
            simulate?: boolean;
        } = {};
        if (this.code != null) {
            data.code = this.code;
        }
        if (this.price != null) {
            data.price = this.price;
        }
        if (this.quantity != null) {
            data.quantity = this.quantity;
        }
        if (this.simulate != null) {
            data.simulate = this.simulate;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.code.length)
            writer.writeString(1, this.code);
        if (this.price != 0)
            writer.writeDouble(2, this.price);
        if (this.quantity != 0)
            writer.writeInt64(3, this.quantity);
        if (this.simulate != false)
            writer.writeBool(4, this.simulate);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): OptionOrderDetail {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new OptionOrderDetail();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.code = reader.readString();
                    break;
                case 2:
                    message.price = reader.readDouble();
                    break;
                case 3:
                    message.quantity = reader.readInt64();
                    break;
                case 4:
                    message.simulate = reader.readBool();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): OptionOrderDetail {
        return OptionOrderDetail.deserialize(bytes);
    }
}
export class TradeResult extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        order_id?: string;
        status?: string;
        error?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("order_id" in data && data.order_id != undefined) {
                this.order_id = data.order_id;
            }
            if ("status" in data && data.status != undefined) {
                this.status = data.status;
            }
            if ("error" in data && data.error != undefined) {
                this.error = data.error;
            }
        }
    }
    get order_id() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set order_id(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get status() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set status(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    get error() {
        return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
    }
    set error(value: string) {
        pb_1.Message.setField(this, 3, value);
    }
    static fromObject(data: {
        order_id?: string;
        status?: string;
        error?: string;
    }): TradeResult {
        const message = new TradeResult({});
        if (data.order_id != null) {
            message.order_id = data.order_id;
        }
        if (data.status != null) {
            message.status = data.status;
        }
        if (data.error != null) {
            message.error = data.error;
        }
        return message;
    }
    toObject() {
        const data: {
            order_id?: string;
            status?: string;
            error?: string;
        } = {};
        if (this.order_id != null) {
            data.order_id = this.order_id;
        }
        if (this.status != null) {
            data.status = this.status;
        }
        if (this.error != null) {
            data.error = this.error;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.order_id.length)
            writer.writeString(1, this.order_id);
        if (this.status.length)
            writer.writeString(2, this.status);
        if (this.error.length)
            writer.writeString(3, this.error);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TradeResult {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TradeResult();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.order_id = reader.readString();
                    break;
                case 2:
                    message.status = reader.readString();
                    break;
                case 3:
                    message.error = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): TradeResult {
        return TradeResult.deserialize(bytes);
    }
}
export class OrderID extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        order_id?: string;
        simulate?: boolean;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("order_id" in data && data.order_id != undefined) {
                this.order_id = data.order_id;
            }
            if ("simulate" in data && data.simulate != undefined) {
                this.simulate = data.simulate;
            }
        }
    }
    get order_id() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set order_id(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get simulate() {
        return pb_1.Message.getFieldWithDefault(this, 2, false) as boolean;
    }
    set simulate(value: boolean) {
        pb_1.Message.setField(this, 2, value);
    }
    static fromObject(data: {
        order_id?: string;
        simulate?: boolean;
    }): OrderID {
        const message = new OrderID({});
        if (data.order_id != null) {
            message.order_id = data.order_id;
        }
        if (data.simulate != null) {
            message.simulate = data.simulate;
        }
        return message;
    }
    toObject() {
        const data: {
            order_id?: string;
            simulate?: boolean;
        } = {};
        if (this.order_id != null) {
            data.order_id = this.order_id;
        }
        if (this.simulate != null) {
            data.simulate = this.simulate;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.order_id.length)
            writer.writeString(1, this.order_id);
        if (this.simulate != false)
            writer.writeBool(2, this.simulate);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): OrderID {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new OrderID();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.order_id = reader.readString();
                    break;
                case 2:
                    message.simulate = reader.readBool();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): OrderID {
        return OrderID.deserialize(bytes);
    }
}
export class Margin extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        status?: string;
        yesterday_balance?: number;
        today_balance?: number;
        deposit_withdrawal?: number;
        fee?: number;
        tax?: number;
        initial_margin?: number;
        maintenance_margin?: number;
        margin_call?: number;
        risk_indicator?: number;
        royalty_revenue_expenditure?: number;
        equity?: number;
        equity_amount?: number;
        option_openbuy_market_value?: number;
        option_opensell_market_value?: number;
        option_open_position?: number;
        option_settle_profitloss?: number;
        future_open_position?: number;
        today_future_open_position?: number;
        future_settle_profitloss?: number;
        available_margin?: number;
        plus_margin?: number;
        plus_margin_indicator?: number;
        security_collateral_amount?: number;
        order_margin_premium?: number;
        collateral_amount?: number;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("status" in data && data.status != undefined) {
                this.status = data.status;
            }
            if ("yesterday_balance" in data && data.yesterday_balance != undefined) {
                this.yesterday_balance = data.yesterday_balance;
            }
            if ("today_balance" in data && data.today_balance != undefined) {
                this.today_balance = data.today_balance;
            }
            if ("deposit_withdrawal" in data && data.deposit_withdrawal != undefined) {
                this.deposit_withdrawal = data.deposit_withdrawal;
            }
            if ("fee" in data && data.fee != undefined) {
                this.fee = data.fee;
            }
            if ("tax" in data && data.tax != undefined) {
                this.tax = data.tax;
            }
            if ("initial_margin" in data && data.initial_margin != undefined) {
                this.initial_margin = data.initial_margin;
            }
            if ("maintenance_margin" in data && data.maintenance_margin != undefined) {
                this.maintenance_margin = data.maintenance_margin;
            }
            if ("margin_call" in data && data.margin_call != undefined) {
                this.margin_call = data.margin_call;
            }
            if ("risk_indicator" in data && data.risk_indicator != undefined) {
                this.risk_indicator = data.risk_indicator;
            }
            if ("royalty_revenue_expenditure" in data && data.royalty_revenue_expenditure != undefined) {
                this.royalty_revenue_expenditure = data.royalty_revenue_expenditure;
            }
            if ("equity" in data && data.equity != undefined) {
                this.equity = data.equity;
            }
            if ("equity_amount" in data && data.equity_amount != undefined) {
                this.equity_amount = data.equity_amount;
            }
            if ("option_openbuy_market_value" in data && data.option_openbuy_market_value != undefined) {
                this.option_openbuy_market_value = data.option_openbuy_market_value;
            }
            if ("option_opensell_market_value" in data && data.option_opensell_market_value != undefined) {
                this.option_opensell_market_value = data.option_opensell_market_value;
            }
            if ("option_open_position" in data && data.option_open_position != undefined) {
                this.option_open_position = data.option_open_position;
            }
            if ("option_settle_profitloss" in data && data.option_settle_profitloss != undefined) {
                this.option_settle_profitloss = data.option_settle_profitloss;
            }
            if ("future_open_position" in data && data.future_open_position != undefined) {
                this.future_open_position = data.future_open_position;
            }
            if ("today_future_open_position" in data && data.today_future_open_position != undefined) {
                this.today_future_open_position = data.today_future_open_position;
            }
            if ("future_settle_profitloss" in data && data.future_settle_profitloss != undefined) {
                this.future_settle_profitloss = data.future_settle_profitloss;
            }
            if ("available_margin" in data && data.available_margin != undefined) {
                this.available_margin = data.available_margin;
            }
            if ("plus_margin" in data && data.plus_margin != undefined) {
                this.plus_margin = data.plus_margin;
            }
            if ("plus_margin_indicator" in data && data.plus_margin_indicator != undefined) {
                this.plus_margin_indicator = data.plus_margin_indicator;
            }
            if ("security_collateral_amount" in data && data.security_collateral_amount != undefined) {
                this.security_collateral_amount = data.security_collateral_amount;
            }
            if ("order_margin_premium" in data && data.order_margin_premium != undefined) {
                this.order_margin_premium = data.order_margin_premium;
            }
            if ("collateral_amount" in data && data.collateral_amount != undefined) {
                this.collateral_amount = data.collateral_amount;
            }
        }
    }
    get status() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set status(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get yesterday_balance() {
        return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
    }
    set yesterday_balance(value: number) {
        pb_1.Message.setField(this, 2, value);
    }
    get today_balance() {
        return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
    }
    set today_balance(value: number) {
        pb_1.Message.setField(this, 3, value);
    }
    get deposit_withdrawal() {
        return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
    }
    set deposit_withdrawal(value: number) {
        pb_1.Message.setField(this, 4, value);
    }
    get fee() {
        return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
    }
    set fee(value: number) {
        pb_1.Message.setField(this, 5, value);
    }
    get tax() {
        return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
    }
    set tax(value: number) {
        pb_1.Message.setField(this, 6, value);
    }
    get initial_margin() {
        return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
    }
    set initial_margin(value: number) {
        pb_1.Message.setField(this, 7, value);
    }
    get maintenance_margin() {
        return pb_1.Message.getFieldWithDefault(this, 8, 0) as number;
    }
    set maintenance_margin(value: number) {
        pb_1.Message.setField(this, 8, value);
    }
    get margin_call() {
        return pb_1.Message.getFieldWithDefault(this, 9, 0) as number;
    }
    set margin_call(value: number) {
        pb_1.Message.setField(this, 9, value);
    }
    get risk_indicator() {
        return pb_1.Message.getFieldWithDefault(this, 10, 0) as number;
    }
    set risk_indicator(value: number) {
        pb_1.Message.setField(this, 10, value);
    }
    get royalty_revenue_expenditure() {
        return pb_1.Message.getFieldWithDefault(this, 11, 0) as number;
    }
    set royalty_revenue_expenditure(value: number) {
        pb_1.Message.setField(this, 11, value);
    }
    get equity() {
        return pb_1.Message.getFieldWithDefault(this, 12, 0) as number;
    }
    set equity(value: number) {
        pb_1.Message.setField(this, 12, value);
    }
    get equity_amount() {
        return pb_1.Message.getFieldWithDefault(this, 13, 0) as number;
    }
    set equity_amount(value: number) {
        pb_1.Message.setField(this, 13, value);
    }
    get option_openbuy_market_value() {
        return pb_1.Message.getFieldWithDefault(this, 14, 0) as number;
    }
    set option_openbuy_market_value(value: number) {
        pb_1.Message.setField(this, 14, value);
    }
    get option_opensell_market_value() {
        return pb_1.Message.getFieldWithDefault(this, 15, 0) as number;
    }
    set option_opensell_market_value(value: number) {
        pb_1.Message.setField(this, 15, value);
    }
    get option_open_position() {
        return pb_1.Message.getFieldWithDefault(this, 16, 0) as number;
    }
    set option_open_position(value: number) {
        pb_1.Message.setField(this, 16, value);
    }
    get option_settle_profitloss() {
        return pb_1.Message.getFieldWithDefault(this, 17, 0) as number;
    }
    set option_settle_profitloss(value: number) {
        pb_1.Message.setField(this, 17, value);
    }
    get future_open_position() {
        return pb_1.Message.getFieldWithDefault(this, 18, 0) as number;
    }
    set future_open_position(value: number) {
        pb_1.Message.setField(this, 18, value);
    }
    get today_future_open_position() {
        return pb_1.Message.getFieldWithDefault(this, 19, 0) as number;
    }
    set today_future_open_position(value: number) {
        pb_1.Message.setField(this, 19, value);
    }
    get future_settle_profitloss() {
        return pb_1.Message.getFieldWithDefault(this, 20, 0) as number;
    }
    set future_settle_profitloss(value: number) {
        pb_1.Message.setField(this, 20, value);
    }
    get available_margin() {
        return pb_1.Message.getFieldWithDefault(this, 21, 0) as number;
    }
    set available_margin(value: number) {
        pb_1.Message.setField(this, 21, value);
    }
    get plus_margin() {
        return pb_1.Message.getFieldWithDefault(this, 22, 0) as number;
    }
    set plus_margin(value: number) {
        pb_1.Message.setField(this, 22, value);
    }
    get plus_margin_indicator() {
        return pb_1.Message.getFieldWithDefault(this, 23, 0) as number;
    }
    set plus_margin_indicator(value: number) {
        pb_1.Message.setField(this, 23, value);
    }
    get security_collateral_amount() {
        return pb_1.Message.getFieldWithDefault(this, 24, 0) as number;
    }
    set security_collateral_amount(value: number) {
        pb_1.Message.setField(this, 24, value);
    }
    get order_margin_premium() {
        return pb_1.Message.getFieldWithDefault(this, 25, 0) as number;
    }
    set order_margin_premium(value: number) {
        pb_1.Message.setField(this, 25, value);
    }
    get collateral_amount() {
        return pb_1.Message.getFieldWithDefault(this, 26, 0) as number;
    }
    set collateral_amount(value: number) {
        pb_1.Message.setField(this, 26, value);
    }
    static fromObject(data: {
        status?: string;
        yesterday_balance?: number;
        today_balance?: number;
        deposit_withdrawal?: number;
        fee?: number;
        tax?: number;
        initial_margin?: number;
        maintenance_margin?: number;
        margin_call?: number;
        risk_indicator?: number;
        royalty_revenue_expenditure?: number;
        equity?: number;
        equity_amount?: number;
        option_openbuy_market_value?: number;
        option_opensell_market_value?: number;
        option_open_position?: number;
        option_settle_profitloss?: number;
        future_open_position?: number;
        today_future_open_position?: number;
        future_settle_profitloss?: number;
        available_margin?: number;
        plus_margin?: number;
        plus_margin_indicator?: number;
        security_collateral_amount?: number;
        order_margin_premium?: number;
        collateral_amount?: number;
    }): Margin {
        const message = new Margin({});
        if (data.status != null) {
            message.status = data.status;
        }
        if (data.yesterday_balance != null) {
            message.yesterday_balance = data.yesterday_balance;
        }
        if (data.today_balance != null) {
            message.today_balance = data.today_balance;
        }
        if (data.deposit_withdrawal != null) {
            message.deposit_withdrawal = data.deposit_withdrawal;
        }
        if (data.fee != null) {
            message.fee = data.fee;
        }
        if (data.tax != null) {
            message.tax = data.tax;
        }
        if (data.initial_margin != null) {
            message.initial_margin = data.initial_margin;
        }
        if (data.maintenance_margin != null) {
            message.maintenance_margin = data.maintenance_margin;
        }
        if (data.margin_call != null) {
            message.margin_call = data.margin_call;
        }
        if (data.risk_indicator != null) {
            message.risk_indicator = data.risk_indicator;
        }
        if (data.royalty_revenue_expenditure != null) {
            message.royalty_revenue_expenditure = data.royalty_revenue_expenditure;
        }
        if (data.equity != null) {
            message.equity = data.equity;
        }
        if (data.equity_amount != null) {
            message.equity_amount = data.equity_amount;
        }
        if (data.option_openbuy_market_value != null) {
            message.option_openbuy_market_value = data.option_openbuy_market_value;
        }
        if (data.option_opensell_market_value != null) {
            message.option_opensell_market_value = data.option_opensell_market_value;
        }
        if (data.option_open_position != null) {
            message.option_open_position = data.option_open_position;
        }
        if (data.option_settle_profitloss != null) {
            message.option_settle_profitloss = data.option_settle_profitloss;
        }
        if (data.future_open_position != null) {
            message.future_open_position = data.future_open_position;
        }
        if (data.today_future_open_position != null) {
            message.today_future_open_position = data.today_future_open_position;
        }
        if (data.future_settle_profitloss != null) {
            message.future_settle_profitloss = data.future_settle_profitloss;
        }
        if (data.available_margin != null) {
            message.available_margin = data.available_margin;
        }
        if (data.plus_margin != null) {
            message.plus_margin = data.plus_margin;
        }
        if (data.plus_margin_indicator != null) {
            message.plus_margin_indicator = data.plus_margin_indicator;
        }
        if (data.security_collateral_amount != null) {
            message.security_collateral_amount = data.security_collateral_amount;
        }
        if (data.order_margin_premium != null) {
            message.order_margin_premium = data.order_margin_premium;
        }
        if (data.collateral_amount != null) {
            message.collateral_amount = data.collateral_amount;
        }
        return message;
    }
    toObject() {
        const data: {
            status?: string;
            yesterday_balance?: number;
            today_balance?: number;
            deposit_withdrawal?: number;
            fee?: number;
            tax?: number;
            initial_margin?: number;
            maintenance_margin?: number;
            margin_call?: number;
            risk_indicator?: number;
            royalty_revenue_expenditure?: number;
            equity?: number;
            equity_amount?: number;
            option_openbuy_market_value?: number;
            option_opensell_market_value?: number;
            option_open_position?: number;
            option_settle_profitloss?: number;
            future_open_position?: number;
            today_future_open_position?: number;
            future_settle_profitloss?: number;
            available_margin?: number;
            plus_margin?: number;
            plus_margin_indicator?: number;
            security_collateral_amount?: number;
            order_margin_premium?: number;
            collateral_amount?: number;
        } = {};
        if (this.status != null) {
            data.status = this.status;
        }
        if (this.yesterday_balance != null) {
            data.yesterday_balance = this.yesterday_balance;
        }
        if (this.today_balance != null) {
            data.today_balance = this.today_balance;
        }
        if (this.deposit_withdrawal != null) {
            data.deposit_withdrawal = this.deposit_withdrawal;
        }
        if (this.fee != null) {
            data.fee = this.fee;
        }
        if (this.tax != null) {
            data.tax = this.tax;
        }
        if (this.initial_margin != null) {
            data.initial_margin = this.initial_margin;
        }
        if (this.maintenance_margin != null) {
            data.maintenance_margin = this.maintenance_margin;
        }
        if (this.margin_call != null) {
            data.margin_call = this.margin_call;
        }
        if (this.risk_indicator != null) {
            data.risk_indicator = this.risk_indicator;
        }
        if (this.royalty_revenue_expenditure != null) {
            data.royalty_revenue_expenditure = this.royalty_revenue_expenditure;
        }
        if (this.equity != null) {
            data.equity = this.equity;
        }
        if (this.equity_amount != null) {
            data.equity_amount = this.equity_amount;
        }
        if (this.option_openbuy_market_value != null) {
            data.option_openbuy_market_value = this.option_openbuy_market_value;
        }
        if (this.option_opensell_market_value != null) {
            data.option_opensell_market_value = this.option_opensell_market_value;
        }
        if (this.option_open_position != null) {
            data.option_open_position = this.option_open_position;
        }
        if (this.option_settle_profitloss != null) {
            data.option_settle_profitloss = this.option_settle_profitloss;
        }
        if (this.future_open_position != null) {
            data.future_open_position = this.future_open_position;
        }
        if (this.today_future_open_position != null) {
            data.today_future_open_position = this.today_future_open_position;
        }
        if (this.future_settle_profitloss != null) {
            data.future_settle_profitloss = this.future_settle_profitloss;
        }
        if (this.available_margin != null) {
            data.available_margin = this.available_margin;
        }
        if (this.plus_margin != null) {
            data.plus_margin = this.plus_margin;
        }
        if (this.plus_margin_indicator != null) {
            data.plus_margin_indicator = this.plus_margin_indicator;
        }
        if (this.security_collateral_amount != null) {
            data.security_collateral_amount = this.security_collateral_amount;
        }
        if (this.order_margin_premium != null) {
            data.order_margin_premium = this.order_margin_premium;
        }
        if (this.collateral_amount != null) {
            data.collateral_amount = this.collateral_amount;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.status.length)
            writer.writeString(1, this.status);
        if (this.yesterday_balance != 0)
            writer.writeDouble(2, this.yesterday_balance);
        if (this.today_balance != 0)
            writer.writeDouble(3, this.today_balance);
        if (this.deposit_withdrawal != 0)
            writer.writeDouble(4, this.deposit_withdrawal);
        if (this.fee != 0)
            writer.writeDouble(5, this.fee);
        if (this.tax != 0)
            writer.writeDouble(6, this.tax);
        if (this.initial_margin != 0)
            writer.writeDouble(7, this.initial_margin);
        if (this.maintenance_margin != 0)
            writer.writeDouble(8, this.maintenance_margin);
        if (this.margin_call != 0)
            writer.writeDouble(9, this.margin_call);
        if (this.risk_indicator != 0)
            writer.writeDouble(10, this.risk_indicator);
        if (this.royalty_revenue_expenditure != 0)
            writer.writeDouble(11, this.royalty_revenue_expenditure);
        if (this.equity != 0)
            writer.writeDouble(12, this.equity);
        if (this.equity_amount != 0)
            writer.writeDouble(13, this.equity_amount);
        if (this.option_openbuy_market_value != 0)
            writer.writeDouble(14, this.option_openbuy_market_value);
        if (this.option_opensell_market_value != 0)
            writer.writeDouble(15, this.option_opensell_market_value);
        if (this.option_open_position != 0)
            writer.writeDouble(16, this.option_open_position);
        if (this.option_settle_profitloss != 0)
            writer.writeDouble(17, this.option_settle_profitloss);
        if (this.future_open_position != 0)
            writer.writeDouble(18, this.future_open_position);
        if (this.today_future_open_position != 0)
            writer.writeDouble(19, this.today_future_open_position);
        if (this.future_settle_profitloss != 0)
            writer.writeDouble(20, this.future_settle_profitloss);
        if (this.available_margin != 0)
            writer.writeDouble(21, this.available_margin);
        if (this.plus_margin != 0)
            writer.writeDouble(22, this.plus_margin);
        if (this.plus_margin_indicator != 0)
            writer.writeDouble(23, this.plus_margin_indicator);
        if (this.security_collateral_amount != 0)
            writer.writeDouble(24, this.security_collateral_amount);
        if (this.order_margin_premium != 0)
            writer.writeDouble(25, this.order_margin_premium);
        if (this.collateral_amount != 0)
            writer.writeDouble(26, this.collateral_amount);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Margin {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Margin();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.status = reader.readString();
                    break;
                case 2:
                    message.yesterday_balance = reader.readDouble();
                    break;
                case 3:
                    message.today_balance = reader.readDouble();
                    break;
                case 4:
                    message.deposit_withdrawal = reader.readDouble();
                    break;
                case 5:
                    message.fee = reader.readDouble();
                    break;
                case 6:
                    message.tax = reader.readDouble();
                    break;
                case 7:
                    message.initial_margin = reader.readDouble();
                    break;
                case 8:
                    message.maintenance_margin = reader.readDouble();
                    break;
                case 9:
                    message.margin_call = reader.readDouble();
                    break;
                case 10:
                    message.risk_indicator = reader.readDouble();
                    break;
                case 11:
                    message.royalty_revenue_expenditure = reader.readDouble();
                    break;
                case 12:
                    message.equity = reader.readDouble();
                    break;
                case 13:
                    message.equity_amount = reader.readDouble();
                    break;
                case 14:
                    message.option_openbuy_market_value = reader.readDouble();
                    break;
                case 15:
                    message.option_opensell_market_value = reader.readDouble();
                    break;
                case 16:
                    message.option_open_position = reader.readDouble();
                    break;
                case 17:
                    message.option_settle_profitloss = reader.readDouble();
                    break;
                case 18:
                    message.future_open_position = reader.readDouble();
                    break;
                case 19:
                    message.today_future_open_position = reader.readDouble();
                    break;
                case 20:
                    message.future_settle_profitloss = reader.readDouble();
                    break;
                case 21:
                    message.available_margin = reader.readDouble();
                    break;
                case 22:
                    message.plus_margin = reader.readDouble();
                    break;
                case 23:
                    message.plus_margin_indicator = reader.readDouble();
                    break;
                case 24:
                    message.security_collateral_amount = reader.readDouble();
                    break;
                case 25:
                    message.order_margin_premium = reader.readDouble();
                    break;
                case 26:
                    message.collateral_amount = reader.readDouble();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): Margin {
        return Margin.deserialize(bytes);
    }
}
export class AccountBalance extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        date?: string;
        balance?: number;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("date" in data && data.date != undefined) {
                this.date = data.date;
            }
            if ("balance" in data && data.balance != undefined) {
                this.balance = data.balance;
            }
        }
    }
    get date() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set date(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get balance() {
        return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
    }
    set balance(value: number) {
        pb_1.Message.setField(this, 2, value);
    }
    static fromObject(data: {
        date?: string;
        balance?: number;
    }): AccountBalance {
        const message = new AccountBalance({});
        if (data.date != null) {
            message.date = data.date;
        }
        if (data.balance != null) {
            message.balance = data.balance;
        }
        return message;
    }
    toObject() {
        const data: {
            date?: string;
            balance?: number;
        } = {};
        if (this.date != null) {
            data.date = this.date;
        }
        if (this.balance != null) {
            data.balance = this.balance;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.date.length)
            writer.writeString(1, this.date);
        if (this.balance != 0)
            writer.writeDouble(2, this.balance);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AccountBalance {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AccountBalance();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.date = reader.readString();
                    break;
                case 2:
                    message.balance = reader.readDouble();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): AccountBalance {
        return AccountBalance.deserialize(bytes);
    }
}
export class Settlement extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        date?: string;
        amount?: number;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("date" in data && data.date != undefined) {
                this.date = data.date;
            }
            if ("amount" in data && data.amount != undefined) {
                this.amount = data.amount;
            }
        }
    }
    get date() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set date(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get amount() {
        return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
    }
    set amount(value: number) {
        pb_1.Message.setField(this, 2, value);
    }
    static fromObject(data: {
        date?: string;
        amount?: number;
    }): Settlement {
        const message = new Settlement({});
        if (data.date != null) {
            message.date = data.date;
        }
        if (data.amount != null) {
            message.amount = data.amount;
        }
        return message;
    }
    toObject() {
        const data: {
            date?: string;
            amount?: number;
        } = {};
        if (this.date != null) {
            data.date = this.date;
        }
        if (this.amount != null) {
            data.amount = this.amount;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.date.length)
            writer.writeString(1, this.date);
        if (this.amount != 0)
            writer.writeDouble(2, this.amount);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Settlement {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Settlement();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.date = reader.readString();
                    break;
                case 2:
                    message.amount = reader.readDouble();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): Settlement {
        return Settlement.deserialize(bytes);
    }
}
export class SettlementList extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        settlement?: Settlement[];
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("settlement" in data && data.settlement != undefined) {
                this.settlement = data.settlement;
            }
        }
    }
    get settlement() {
        return pb_1.Message.getRepeatedWrapperField(this, Settlement, 1) as Settlement[];
    }
    set settlement(value: Settlement[]) {
        pb_1.Message.setRepeatedWrapperField(this, 1, value);
    }
    static fromObject(data: {
        settlement?: ReturnType<typeof Settlement.prototype.toObject>[];
    }): SettlementList {
        const message = new SettlementList({});
        if (data.settlement != null) {
            message.settlement = data.settlement.map(item => Settlement.fromObject(item));
        }
        return message;
    }
    toObject() {
        const data: {
            settlement?: ReturnType<typeof Settlement.prototype.toObject>[];
        } = {};
        if (this.settlement != null) {
            data.settlement = this.settlement.map((item: Settlement) => item.toObject());
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.settlement.length)
            writer.writeRepeatedMessage(1, this.settlement, (item: Settlement) => item.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SettlementList {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SettlementList();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.settlement, () => pb_1.Message.addToRepeatedWrapperField(message, 1, Settlement.deserialize(reader), Settlement));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): SettlementList {
        return SettlementList.deserialize(bytes);
    }
}
