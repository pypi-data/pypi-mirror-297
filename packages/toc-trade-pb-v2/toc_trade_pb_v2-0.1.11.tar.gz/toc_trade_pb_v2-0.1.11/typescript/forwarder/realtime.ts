/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 5.28.2
 * source: forwarder/realtime.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../google/protobuf/empty";
import * as dependency_2 from "./entity";
import * as pb_1 from "google-protobuf";
export class SnapshotResponse extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        data?: SnapshotMessage[];
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("data" in data && data.data != undefined) {
                this.data = data.data;
            }
        }
    }
    get data() {
        return pb_1.Message.getRepeatedWrapperField(this, SnapshotMessage, 1) as SnapshotMessage[];
    }
    set data(value: SnapshotMessage[]) {
        pb_1.Message.setRepeatedWrapperField(this, 1, value);
    }
    static fromObject(data: {
        data?: ReturnType<typeof SnapshotMessage.prototype.toObject>[];
    }): SnapshotResponse {
        const message = new SnapshotResponse({});
        if (data.data != null) {
            message.data = data.data.map(item => SnapshotMessage.fromObject(item));
        }
        return message;
    }
    toObject() {
        const data: {
            data?: ReturnType<typeof SnapshotMessage.prototype.toObject>[];
        } = {};
        if (this.data != null) {
            data.data = this.data.map((item: SnapshotMessage) => item.toObject());
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.data.length)
            writer.writeRepeatedMessage(1, this.data, (item: SnapshotMessage) => item.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SnapshotResponse {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SnapshotResponse();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.data, () => pb_1.Message.addToRepeatedWrapperField(message, 1, SnapshotMessage.deserialize(reader), SnapshotMessage));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): SnapshotResponse {
        return SnapshotResponse.deserialize(bytes);
    }
}
export class YahooFinancePrice extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        price?: number;
        last?: number;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("price" in data && data.price != undefined) {
                this.price = data.price;
            }
            if ("last" in data && data.last != undefined) {
                this.last = data.last;
            }
        }
    }
    get price() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
    }
    set price(value: number) {
        pb_1.Message.setField(this, 1, value);
    }
    get last() {
        return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
    }
    set last(value: number) {
        pb_1.Message.setField(this, 2, value);
    }
    static fromObject(data: {
        price?: number;
        last?: number;
    }): YahooFinancePrice {
        const message = new YahooFinancePrice({});
        if (data.price != null) {
            message.price = data.price;
        }
        if (data.last != null) {
            message.last = data.last;
        }
        return message;
    }
    toObject() {
        const data: {
            price?: number;
            last?: number;
        } = {};
        if (this.price != null) {
            data.price = this.price;
        }
        if (this.last != null) {
            data.last = this.last;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.price != 0)
            writer.writeDouble(1, this.price);
        if (this.last != 0)
            writer.writeDouble(2, this.last);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): YahooFinancePrice {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new YahooFinancePrice();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.price = reader.readDouble();
                    break;
                case 2:
                    message.last = reader.readDouble();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): YahooFinancePrice {
        return YahooFinancePrice.deserialize(bytes);
    }
}
export class VolumeRankRequest extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        count?: number;
        date?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("count" in data && data.count != undefined) {
                this.count = data.count;
            }
            if ("date" in data && data.date != undefined) {
                this.date = data.date;
            }
        }
    }
    get count() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
    }
    set count(value: number) {
        pb_1.Message.setField(this, 1, value);
    }
    get date() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set date(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    static fromObject(data: {
        count?: number;
        date?: string;
    }): VolumeRankRequest {
        const message = new VolumeRankRequest({});
        if (data.count != null) {
            message.count = data.count;
        }
        if (data.date != null) {
            message.date = data.date;
        }
        return message;
    }
    toObject() {
        const data: {
            count?: number;
            date?: string;
        } = {};
        if (this.count != null) {
            data.count = this.count;
        }
        if (this.date != null) {
            data.date = this.date;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.count != 0)
            writer.writeInt64(1, this.count);
        if (this.date.length)
            writer.writeString(2, this.date);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): VolumeRankRequest {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new VolumeRankRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.count = reader.readInt64();
                    break;
                case 2:
                    message.date = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): VolumeRankRequest {
        return VolumeRankRequest.deserialize(bytes);
    }
}
export class SnapshotMessage extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        ts?: number;
        code?: string;
        exchange?: string;
        open?: number;
        high?: number;
        low?: number;
        close?: number;
        tick_type?: string;
        change_price?: number;
        change_rate?: number;
        change_type?: string;
        average_price?: number;
        volume?: number;
        total_volume?: number;
        amount?: number;
        total_amount?: number;
        yesterday_volume?: number;
        buy_price?: number;
        buy_volume?: number;
        sell_price?: number;
        sell_volume?: number;
        volume_ratio?: number;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("ts" in data && data.ts != undefined) {
                this.ts = data.ts;
            }
            if ("code" in data && data.code != undefined) {
                this.code = data.code;
            }
            if ("exchange" in data && data.exchange != undefined) {
                this.exchange = data.exchange;
            }
            if ("open" in data && data.open != undefined) {
                this.open = data.open;
            }
            if ("high" in data && data.high != undefined) {
                this.high = data.high;
            }
            if ("low" in data && data.low != undefined) {
                this.low = data.low;
            }
            if ("close" in data && data.close != undefined) {
                this.close = data.close;
            }
            if ("tick_type" in data && data.tick_type != undefined) {
                this.tick_type = data.tick_type;
            }
            if ("change_price" in data && data.change_price != undefined) {
                this.change_price = data.change_price;
            }
            if ("change_rate" in data && data.change_rate != undefined) {
                this.change_rate = data.change_rate;
            }
            if ("change_type" in data && data.change_type != undefined) {
                this.change_type = data.change_type;
            }
            if ("average_price" in data && data.average_price != undefined) {
                this.average_price = data.average_price;
            }
            if ("volume" in data && data.volume != undefined) {
                this.volume = data.volume;
            }
            if ("total_volume" in data && data.total_volume != undefined) {
                this.total_volume = data.total_volume;
            }
            if ("amount" in data && data.amount != undefined) {
                this.amount = data.amount;
            }
            if ("total_amount" in data && data.total_amount != undefined) {
                this.total_amount = data.total_amount;
            }
            if ("yesterday_volume" in data && data.yesterday_volume != undefined) {
                this.yesterday_volume = data.yesterday_volume;
            }
            if ("buy_price" in data && data.buy_price != undefined) {
                this.buy_price = data.buy_price;
            }
            if ("buy_volume" in data && data.buy_volume != undefined) {
                this.buy_volume = data.buy_volume;
            }
            if ("sell_price" in data && data.sell_price != undefined) {
                this.sell_price = data.sell_price;
            }
            if ("sell_volume" in data && data.sell_volume != undefined) {
                this.sell_volume = data.sell_volume;
            }
            if ("volume_ratio" in data && data.volume_ratio != undefined) {
                this.volume_ratio = data.volume_ratio;
            }
        }
    }
    get ts() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
    }
    set ts(value: number) {
        pb_1.Message.setField(this, 1, value);
    }
    get code() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set code(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    get exchange() {
        return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
    }
    set exchange(value: string) {
        pb_1.Message.setField(this, 3, value);
    }
    get open() {
        return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
    }
    set open(value: number) {
        pb_1.Message.setField(this, 4, value);
    }
    get high() {
        return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
    }
    set high(value: number) {
        pb_1.Message.setField(this, 5, value);
    }
    get low() {
        return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
    }
    set low(value: number) {
        pb_1.Message.setField(this, 6, value);
    }
    get close() {
        return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
    }
    set close(value: number) {
        pb_1.Message.setField(this, 7, value);
    }
    get tick_type() {
        return pb_1.Message.getFieldWithDefault(this, 8, "") as string;
    }
    set tick_type(value: string) {
        pb_1.Message.setField(this, 8, value);
    }
    get change_price() {
        return pb_1.Message.getFieldWithDefault(this, 9, 0) as number;
    }
    set change_price(value: number) {
        pb_1.Message.setField(this, 9, value);
    }
    get change_rate() {
        return pb_1.Message.getFieldWithDefault(this, 10, 0) as number;
    }
    set change_rate(value: number) {
        pb_1.Message.setField(this, 10, value);
    }
    get change_type() {
        return pb_1.Message.getFieldWithDefault(this, 11, "") as string;
    }
    set change_type(value: string) {
        pb_1.Message.setField(this, 11, value);
    }
    get average_price() {
        return pb_1.Message.getFieldWithDefault(this, 12, 0) as number;
    }
    set average_price(value: number) {
        pb_1.Message.setField(this, 12, value);
    }
    get volume() {
        return pb_1.Message.getFieldWithDefault(this, 13, 0) as number;
    }
    set volume(value: number) {
        pb_1.Message.setField(this, 13, value);
    }
    get total_volume() {
        return pb_1.Message.getFieldWithDefault(this, 14, 0) as number;
    }
    set total_volume(value: number) {
        pb_1.Message.setField(this, 14, value);
    }
    get amount() {
        return pb_1.Message.getFieldWithDefault(this, 15, 0) as number;
    }
    set amount(value: number) {
        pb_1.Message.setField(this, 15, value);
    }
    get total_amount() {
        return pb_1.Message.getFieldWithDefault(this, 16, 0) as number;
    }
    set total_amount(value: number) {
        pb_1.Message.setField(this, 16, value);
    }
    get yesterday_volume() {
        return pb_1.Message.getFieldWithDefault(this, 17, 0) as number;
    }
    set yesterday_volume(value: number) {
        pb_1.Message.setField(this, 17, value);
    }
    get buy_price() {
        return pb_1.Message.getFieldWithDefault(this, 18, 0) as number;
    }
    set buy_price(value: number) {
        pb_1.Message.setField(this, 18, value);
    }
    get buy_volume() {
        return pb_1.Message.getFieldWithDefault(this, 19, 0) as number;
    }
    set buy_volume(value: number) {
        pb_1.Message.setField(this, 19, value);
    }
    get sell_price() {
        return pb_1.Message.getFieldWithDefault(this, 20, 0) as number;
    }
    set sell_price(value: number) {
        pb_1.Message.setField(this, 20, value);
    }
    get sell_volume() {
        return pb_1.Message.getFieldWithDefault(this, 21, 0) as number;
    }
    set sell_volume(value: number) {
        pb_1.Message.setField(this, 21, value);
    }
    get volume_ratio() {
        return pb_1.Message.getFieldWithDefault(this, 22, 0) as number;
    }
    set volume_ratio(value: number) {
        pb_1.Message.setField(this, 22, value);
    }
    static fromObject(data: {
        ts?: number;
        code?: string;
        exchange?: string;
        open?: number;
        high?: number;
        low?: number;
        close?: number;
        tick_type?: string;
        change_price?: number;
        change_rate?: number;
        change_type?: string;
        average_price?: number;
        volume?: number;
        total_volume?: number;
        amount?: number;
        total_amount?: number;
        yesterday_volume?: number;
        buy_price?: number;
        buy_volume?: number;
        sell_price?: number;
        sell_volume?: number;
        volume_ratio?: number;
    }): SnapshotMessage {
        const message = new SnapshotMessage({});
        if (data.ts != null) {
            message.ts = data.ts;
        }
        if (data.code != null) {
            message.code = data.code;
        }
        if (data.exchange != null) {
            message.exchange = data.exchange;
        }
        if (data.open != null) {
            message.open = data.open;
        }
        if (data.high != null) {
            message.high = data.high;
        }
        if (data.low != null) {
            message.low = data.low;
        }
        if (data.close != null) {
            message.close = data.close;
        }
        if (data.tick_type != null) {
            message.tick_type = data.tick_type;
        }
        if (data.change_price != null) {
            message.change_price = data.change_price;
        }
        if (data.change_rate != null) {
            message.change_rate = data.change_rate;
        }
        if (data.change_type != null) {
            message.change_type = data.change_type;
        }
        if (data.average_price != null) {
            message.average_price = data.average_price;
        }
        if (data.volume != null) {
            message.volume = data.volume;
        }
        if (data.total_volume != null) {
            message.total_volume = data.total_volume;
        }
        if (data.amount != null) {
            message.amount = data.amount;
        }
        if (data.total_amount != null) {
            message.total_amount = data.total_amount;
        }
        if (data.yesterday_volume != null) {
            message.yesterday_volume = data.yesterday_volume;
        }
        if (data.buy_price != null) {
            message.buy_price = data.buy_price;
        }
        if (data.buy_volume != null) {
            message.buy_volume = data.buy_volume;
        }
        if (data.sell_price != null) {
            message.sell_price = data.sell_price;
        }
        if (data.sell_volume != null) {
            message.sell_volume = data.sell_volume;
        }
        if (data.volume_ratio != null) {
            message.volume_ratio = data.volume_ratio;
        }
        return message;
    }
    toObject() {
        const data: {
            ts?: number;
            code?: string;
            exchange?: string;
            open?: number;
            high?: number;
            low?: number;
            close?: number;
            tick_type?: string;
            change_price?: number;
            change_rate?: number;
            change_type?: string;
            average_price?: number;
            volume?: number;
            total_volume?: number;
            amount?: number;
            total_amount?: number;
            yesterday_volume?: number;
            buy_price?: number;
            buy_volume?: number;
            sell_price?: number;
            sell_volume?: number;
            volume_ratio?: number;
        } = {};
        if (this.ts != null) {
            data.ts = this.ts;
        }
        if (this.code != null) {
            data.code = this.code;
        }
        if (this.exchange != null) {
            data.exchange = this.exchange;
        }
        if (this.open != null) {
            data.open = this.open;
        }
        if (this.high != null) {
            data.high = this.high;
        }
        if (this.low != null) {
            data.low = this.low;
        }
        if (this.close != null) {
            data.close = this.close;
        }
        if (this.tick_type != null) {
            data.tick_type = this.tick_type;
        }
        if (this.change_price != null) {
            data.change_price = this.change_price;
        }
        if (this.change_rate != null) {
            data.change_rate = this.change_rate;
        }
        if (this.change_type != null) {
            data.change_type = this.change_type;
        }
        if (this.average_price != null) {
            data.average_price = this.average_price;
        }
        if (this.volume != null) {
            data.volume = this.volume;
        }
        if (this.total_volume != null) {
            data.total_volume = this.total_volume;
        }
        if (this.amount != null) {
            data.amount = this.amount;
        }
        if (this.total_amount != null) {
            data.total_amount = this.total_amount;
        }
        if (this.yesterday_volume != null) {
            data.yesterday_volume = this.yesterday_volume;
        }
        if (this.buy_price != null) {
            data.buy_price = this.buy_price;
        }
        if (this.buy_volume != null) {
            data.buy_volume = this.buy_volume;
        }
        if (this.sell_price != null) {
            data.sell_price = this.sell_price;
        }
        if (this.sell_volume != null) {
            data.sell_volume = this.sell_volume;
        }
        if (this.volume_ratio != null) {
            data.volume_ratio = this.volume_ratio;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.ts != 0)
            writer.writeInt64(1, this.ts);
        if (this.code.length)
            writer.writeString(2, this.code);
        if (this.exchange.length)
            writer.writeString(3, this.exchange);
        if (this.open != 0)
            writer.writeDouble(4, this.open);
        if (this.high != 0)
            writer.writeDouble(5, this.high);
        if (this.low != 0)
            writer.writeDouble(6, this.low);
        if (this.close != 0)
            writer.writeDouble(7, this.close);
        if (this.tick_type.length)
            writer.writeString(8, this.tick_type);
        if (this.change_price != 0)
            writer.writeDouble(9, this.change_price);
        if (this.change_rate != 0)
            writer.writeDouble(10, this.change_rate);
        if (this.change_type.length)
            writer.writeString(11, this.change_type);
        if (this.average_price != 0)
            writer.writeDouble(12, this.average_price);
        if (this.volume != 0)
            writer.writeInt64(13, this.volume);
        if (this.total_volume != 0)
            writer.writeInt64(14, this.total_volume);
        if (this.amount != 0)
            writer.writeInt64(15, this.amount);
        if (this.total_amount != 0)
            writer.writeInt64(16, this.total_amount);
        if (this.yesterday_volume != 0)
            writer.writeDouble(17, this.yesterday_volume);
        if (this.buy_price != 0)
            writer.writeDouble(18, this.buy_price);
        if (this.buy_volume != 0)
            writer.writeDouble(19, this.buy_volume);
        if (this.sell_price != 0)
            writer.writeDouble(20, this.sell_price);
        if (this.sell_volume != 0)
            writer.writeInt64(21, this.sell_volume);
        if (this.volume_ratio != 0)
            writer.writeDouble(22, this.volume_ratio);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SnapshotMessage {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SnapshotMessage();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.ts = reader.readInt64();
                    break;
                case 2:
                    message.code = reader.readString();
                    break;
                case 3:
                    message.exchange = reader.readString();
                    break;
                case 4:
                    message.open = reader.readDouble();
                    break;
                case 5:
                    message.high = reader.readDouble();
                    break;
                case 6:
                    message.low = reader.readDouble();
                    break;
                case 7:
                    message.close = reader.readDouble();
                    break;
                case 8:
                    message.tick_type = reader.readString();
                    break;
                case 9:
                    message.change_price = reader.readDouble();
                    break;
                case 10:
                    message.change_rate = reader.readDouble();
                    break;
                case 11:
                    message.change_type = reader.readString();
                    break;
                case 12:
                    message.average_price = reader.readDouble();
                    break;
                case 13:
                    message.volume = reader.readInt64();
                    break;
                case 14:
                    message.total_volume = reader.readInt64();
                    break;
                case 15:
                    message.amount = reader.readInt64();
                    break;
                case 16:
                    message.total_amount = reader.readInt64();
                    break;
                case 17:
                    message.yesterday_volume = reader.readDouble();
                    break;
                case 18:
                    message.buy_price = reader.readDouble();
                    break;
                case 19:
                    message.buy_volume = reader.readDouble();
                    break;
                case 20:
                    message.sell_price = reader.readDouble();
                    break;
                case 21:
                    message.sell_volume = reader.readInt64();
                    break;
                case 22:
                    message.volume_ratio = reader.readDouble();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): SnapshotMessage {
        return SnapshotMessage.deserialize(bytes);
    }
}
export class StockVolumeRankResponse extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        data?: StockVolumeRankMessage[];
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("data" in data && data.data != undefined) {
                this.data = data.data;
            }
        }
    }
    get data() {
        return pb_1.Message.getRepeatedWrapperField(this, StockVolumeRankMessage, 1) as StockVolumeRankMessage[];
    }
    set data(value: StockVolumeRankMessage[]) {
        pb_1.Message.setRepeatedWrapperField(this, 1, value);
    }
    static fromObject(data: {
        data?: ReturnType<typeof StockVolumeRankMessage.prototype.toObject>[];
    }): StockVolumeRankResponse {
        const message = new StockVolumeRankResponse({});
        if (data.data != null) {
            message.data = data.data.map(item => StockVolumeRankMessage.fromObject(item));
        }
        return message;
    }
    toObject() {
        const data: {
            data?: ReturnType<typeof StockVolumeRankMessage.prototype.toObject>[];
        } = {};
        if (this.data != null) {
            data.data = this.data.map((item: StockVolumeRankMessage) => item.toObject());
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.data.length)
            writer.writeRepeatedMessage(1, this.data, (item: StockVolumeRankMessage) => item.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): StockVolumeRankResponse {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new StockVolumeRankResponse();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.data, () => pb_1.Message.addToRepeatedWrapperField(message, 1, StockVolumeRankMessage.deserialize(reader), StockVolumeRankMessage));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): StockVolumeRankResponse {
        return StockVolumeRankResponse.deserialize(bytes);
    }
}
export class StockVolumeRankMessage extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        date?: string;
        code?: string;
        name?: string;
        ts?: number;
        open?: number;
        high?: number;
        low?: number;
        close?: number;
        price_range?: number;
        tick_type?: number;
        change_price?: number;
        change_type?: number;
        average_price?: number;
        volume?: number;
        total_volume?: number;
        amount?: number;
        total_amount?: number;
        yesterday_volume?: number;
        volume_ratio?: number;
        buy_price?: number;
        buy_volume?: number;
        sell_price?: number;
        sell_volume?: number;
        bid_orders?: number;
        bid_volumes?: number;
        ask_orders?: number;
        ask_volumes?: number;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("date" in data && data.date != undefined) {
                this.date = data.date;
            }
            if ("code" in data && data.code != undefined) {
                this.code = data.code;
            }
            if ("name" in data && data.name != undefined) {
                this.name = data.name;
            }
            if ("ts" in data && data.ts != undefined) {
                this.ts = data.ts;
            }
            if ("open" in data && data.open != undefined) {
                this.open = data.open;
            }
            if ("high" in data && data.high != undefined) {
                this.high = data.high;
            }
            if ("low" in data && data.low != undefined) {
                this.low = data.low;
            }
            if ("close" in data && data.close != undefined) {
                this.close = data.close;
            }
            if ("price_range" in data && data.price_range != undefined) {
                this.price_range = data.price_range;
            }
            if ("tick_type" in data && data.tick_type != undefined) {
                this.tick_type = data.tick_type;
            }
            if ("change_price" in data && data.change_price != undefined) {
                this.change_price = data.change_price;
            }
            if ("change_type" in data && data.change_type != undefined) {
                this.change_type = data.change_type;
            }
            if ("average_price" in data && data.average_price != undefined) {
                this.average_price = data.average_price;
            }
            if ("volume" in data && data.volume != undefined) {
                this.volume = data.volume;
            }
            if ("total_volume" in data && data.total_volume != undefined) {
                this.total_volume = data.total_volume;
            }
            if ("amount" in data && data.amount != undefined) {
                this.amount = data.amount;
            }
            if ("total_amount" in data && data.total_amount != undefined) {
                this.total_amount = data.total_amount;
            }
            if ("yesterday_volume" in data && data.yesterday_volume != undefined) {
                this.yesterday_volume = data.yesterday_volume;
            }
            if ("volume_ratio" in data && data.volume_ratio != undefined) {
                this.volume_ratio = data.volume_ratio;
            }
            if ("buy_price" in data && data.buy_price != undefined) {
                this.buy_price = data.buy_price;
            }
            if ("buy_volume" in data && data.buy_volume != undefined) {
                this.buy_volume = data.buy_volume;
            }
            if ("sell_price" in data && data.sell_price != undefined) {
                this.sell_price = data.sell_price;
            }
            if ("sell_volume" in data && data.sell_volume != undefined) {
                this.sell_volume = data.sell_volume;
            }
            if ("bid_orders" in data && data.bid_orders != undefined) {
                this.bid_orders = data.bid_orders;
            }
            if ("bid_volumes" in data && data.bid_volumes != undefined) {
                this.bid_volumes = data.bid_volumes;
            }
            if ("ask_orders" in data && data.ask_orders != undefined) {
                this.ask_orders = data.ask_orders;
            }
            if ("ask_volumes" in data && data.ask_volumes != undefined) {
                this.ask_volumes = data.ask_volumes;
            }
        }
    }
    get date() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set date(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get code() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set code(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    get name() {
        return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
    }
    set name(value: string) {
        pb_1.Message.setField(this, 3, value);
    }
    get ts() {
        return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
    }
    set ts(value: number) {
        pb_1.Message.setField(this, 4, value);
    }
    get open() {
        return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
    }
    set open(value: number) {
        pb_1.Message.setField(this, 5, value);
    }
    get high() {
        return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
    }
    set high(value: number) {
        pb_1.Message.setField(this, 6, value);
    }
    get low() {
        return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
    }
    set low(value: number) {
        pb_1.Message.setField(this, 7, value);
    }
    get close() {
        return pb_1.Message.getFieldWithDefault(this, 8, 0) as number;
    }
    set close(value: number) {
        pb_1.Message.setField(this, 8, value);
    }
    get price_range() {
        return pb_1.Message.getFieldWithDefault(this, 9, 0) as number;
    }
    set price_range(value: number) {
        pb_1.Message.setField(this, 9, value);
    }
    get tick_type() {
        return pb_1.Message.getFieldWithDefault(this, 10, 0) as number;
    }
    set tick_type(value: number) {
        pb_1.Message.setField(this, 10, value);
    }
    get change_price() {
        return pb_1.Message.getFieldWithDefault(this, 11, 0) as number;
    }
    set change_price(value: number) {
        pb_1.Message.setField(this, 11, value);
    }
    get change_type() {
        return pb_1.Message.getFieldWithDefault(this, 12, 0) as number;
    }
    set change_type(value: number) {
        pb_1.Message.setField(this, 12, value);
    }
    get average_price() {
        return pb_1.Message.getFieldWithDefault(this, 13, 0) as number;
    }
    set average_price(value: number) {
        pb_1.Message.setField(this, 13, value);
    }
    get volume() {
        return pb_1.Message.getFieldWithDefault(this, 14, 0) as number;
    }
    set volume(value: number) {
        pb_1.Message.setField(this, 14, value);
    }
    get total_volume() {
        return pb_1.Message.getFieldWithDefault(this, 15, 0) as number;
    }
    set total_volume(value: number) {
        pb_1.Message.setField(this, 15, value);
    }
    get amount() {
        return pb_1.Message.getFieldWithDefault(this, 16, 0) as number;
    }
    set amount(value: number) {
        pb_1.Message.setField(this, 16, value);
    }
    get total_amount() {
        return pb_1.Message.getFieldWithDefault(this, 17, 0) as number;
    }
    set total_amount(value: number) {
        pb_1.Message.setField(this, 17, value);
    }
    get yesterday_volume() {
        return pb_1.Message.getFieldWithDefault(this, 18, 0) as number;
    }
    set yesterday_volume(value: number) {
        pb_1.Message.setField(this, 18, value);
    }
    get volume_ratio() {
        return pb_1.Message.getFieldWithDefault(this, 19, 0) as number;
    }
    set volume_ratio(value: number) {
        pb_1.Message.setField(this, 19, value);
    }
    get buy_price() {
        return pb_1.Message.getFieldWithDefault(this, 20, 0) as number;
    }
    set buy_price(value: number) {
        pb_1.Message.setField(this, 20, value);
    }
    get buy_volume() {
        return pb_1.Message.getFieldWithDefault(this, 21, 0) as number;
    }
    set buy_volume(value: number) {
        pb_1.Message.setField(this, 21, value);
    }
    get sell_price() {
        return pb_1.Message.getFieldWithDefault(this, 22, 0) as number;
    }
    set sell_price(value: number) {
        pb_1.Message.setField(this, 22, value);
    }
    get sell_volume() {
        return pb_1.Message.getFieldWithDefault(this, 23, 0) as number;
    }
    set sell_volume(value: number) {
        pb_1.Message.setField(this, 23, value);
    }
    get bid_orders() {
        return pb_1.Message.getFieldWithDefault(this, 24, 0) as number;
    }
    set bid_orders(value: number) {
        pb_1.Message.setField(this, 24, value);
    }
    get bid_volumes() {
        return pb_1.Message.getFieldWithDefault(this, 25, 0) as number;
    }
    set bid_volumes(value: number) {
        pb_1.Message.setField(this, 25, value);
    }
    get ask_orders() {
        return pb_1.Message.getFieldWithDefault(this, 26, 0) as number;
    }
    set ask_orders(value: number) {
        pb_1.Message.setField(this, 26, value);
    }
    get ask_volumes() {
        return pb_1.Message.getFieldWithDefault(this, 27, 0) as number;
    }
    set ask_volumes(value: number) {
        pb_1.Message.setField(this, 27, value);
    }
    static fromObject(data: {
        date?: string;
        code?: string;
        name?: string;
        ts?: number;
        open?: number;
        high?: number;
        low?: number;
        close?: number;
        price_range?: number;
        tick_type?: number;
        change_price?: number;
        change_type?: number;
        average_price?: number;
        volume?: number;
        total_volume?: number;
        amount?: number;
        total_amount?: number;
        yesterday_volume?: number;
        volume_ratio?: number;
        buy_price?: number;
        buy_volume?: number;
        sell_price?: number;
        sell_volume?: number;
        bid_orders?: number;
        bid_volumes?: number;
        ask_orders?: number;
        ask_volumes?: number;
    }): StockVolumeRankMessage {
        const message = new StockVolumeRankMessage({});
        if (data.date != null) {
            message.date = data.date;
        }
        if (data.code != null) {
            message.code = data.code;
        }
        if (data.name != null) {
            message.name = data.name;
        }
        if (data.ts != null) {
            message.ts = data.ts;
        }
        if (data.open != null) {
            message.open = data.open;
        }
        if (data.high != null) {
            message.high = data.high;
        }
        if (data.low != null) {
            message.low = data.low;
        }
        if (data.close != null) {
            message.close = data.close;
        }
        if (data.price_range != null) {
            message.price_range = data.price_range;
        }
        if (data.tick_type != null) {
            message.tick_type = data.tick_type;
        }
        if (data.change_price != null) {
            message.change_price = data.change_price;
        }
        if (data.change_type != null) {
            message.change_type = data.change_type;
        }
        if (data.average_price != null) {
            message.average_price = data.average_price;
        }
        if (data.volume != null) {
            message.volume = data.volume;
        }
        if (data.total_volume != null) {
            message.total_volume = data.total_volume;
        }
        if (data.amount != null) {
            message.amount = data.amount;
        }
        if (data.total_amount != null) {
            message.total_amount = data.total_amount;
        }
        if (data.yesterday_volume != null) {
            message.yesterday_volume = data.yesterday_volume;
        }
        if (data.volume_ratio != null) {
            message.volume_ratio = data.volume_ratio;
        }
        if (data.buy_price != null) {
            message.buy_price = data.buy_price;
        }
        if (data.buy_volume != null) {
            message.buy_volume = data.buy_volume;
        }
        if (data.sell_price != null) {
            message.sell_price = data.sell_price;
        }
        if (data.sell_volume != null) {
            message.sell_volume = data.sell_volume;
        }
        if (data.bid_orders != null) {
            message.bid_orders = data.bid_orders;
        }
        if (data.bid_volumes != null) {
            message.bid_volumes = data.bid_volumes;
        }
        if (data.ask_orders != null) {
            message.ask_orders = data.ask_orders;
        }
        if (data.ask_volumes != null) {
            message.ask_volumes = data.ask_volumes;
        }
        return message;
    }
    toObject() {
        const data: {
            date?: string;
            code?: string;
            name?: string;
            ts?: number;
            open?: number;
            high?: number;
            low?: number;
            close?: number;
            price_range?: number;
            tick_type?: number;
            change_price?: number;
            change_type?: number;
            average_price?: number;
            volume?: number;
            total_volume?: number;
            amount?: number;
            total_amount?: number;
            yesterday_volume?: number;
            volume_ratio?: number;
            buy_price?: number;
            buy_volume?: number;
            sell_price?: number;
            sell_volume?: number;
            bid_orders?: number;
            bid_volumes?: number;
            ask_orders?: number;
            ask_volumes?: number;
        } = {};
        if (this.date != null) {
            data.date = this.date;
        }
        if (this.code != null) {
            data.code = this.code;
        }
        if (this.name != null) {
            data.name = this.name;
        }
        if (this.ts != null) {
            data.ts = this.ts;
        }
        if (this.open != null) {
            data.open = this.open;
        }
        if (this.high != null) {
            data.high = this.high;
        }
        if (this.low != null) {
            data.low = this.low;
        }
        if (this.close != null) {
            data.close = this.close;
        }
        if (this.price_range != null) {
            data.price_range = this.price_range;
        }
        if (this.tick_type != null) {
            data.tick_type = this.tick_type;
        }
        if (this.change_price != null) {
            data.change_price = this.change_price;
        }
        if (this.change_type != null) {
            data.change_type = this.change_type;
        }
        if (this.average_price != null) {
            data.average_price = this.average_price;
        }
        if (this.volume != null) {
            data.volume = this.volume;
        }
        if (this.total_volume != null) {
            data.total_volume = this.total_volume;
        }
        if (this.amount != null) {
            data.amount = this.amount;
        }
        if (this.total_amount != null) {
            data.total_amount = this.total_amount;
        }
        if (this.yesterday_volume != null) {
            data.yesterday_volume = this.yesterday_volume;
        }
        if (this.volume_ratio != null) {
            data.volume_ratio = this.volume_ratio;
        }
        if (this.buy_price != null) {
            data.buy_price = this.buy_price;
        }
        if (this.buy_volume != null) {
            data.buy_volume = this.buy_volume;
        }
        if (this.sell_price != null) {
            data.sell_price = this.sell_price;
        }
        if (this.sell_volume != null) {
            data.sell_volume = this.sell_volume;
        }
        if (this.bid_orders != null) {
            data.bid_orders = this.bid_orders;
        }
        if (this.bid_volumes != null) {
            data.bid_volumes = this.bid_volumes;
        }
        if (this.ask_orders != null) {
            data.ask_orders = this.ask_orders;
        }
        if (this.ask_volumes != null) {
            data.ask_volumes = this.ask_volumes;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.date.length)
            writer.writeString(1, this.date);
        if (this.code.length)
            writer.writeString(2, this.code);
        if (this.name.length)
            writer.writeString(3, this.name);
        if (this.ts != 0)
            writer.writeInt64(4, this.ts);
        if (this.open != 0)
            writer.writeDouble(5, this.open);
        if (this.high != 0)
            writer.writeDouble(6, this.high);
        if (this.low != 0)
            writer.writeDouble(7, this.low);
        if (this.close != 0)
            writer.writeDouble(8, this.close);
        if (this.price_range != 0)
            writer.writeDouble(9, this.price_range);
        if (this.tick_type != 0)
            writer.writeInt64(10, this.tick_type);
        if (this.change_price != 0)
            writer.writeDouble(11, this.change_price);
        if (this.change_type != 0)
            writer.writeInt64(12, this.change_type);
        if (this.average_price != 0)
            writer.writeDouble(13, this.average_price);
        if (this.volume != 0)
            writer.writeInt64(14, this.volume);
        if (this.total_volume != 0)
            writer.writeInt64(15, this.total_volume);
        if (this.amount != 0)
            writer.writeInt64(16, this.amount);
        if (this.total_amount != 0)
            writer.writeInt64(17, this.total_amount);
        if (this.yesterday_volume != 0)
            writer.writeInt64(18, this.yesterday_volume);
        if (this.volume_ratio != 0)
            writer.writeDouble(19, this.volume_ratio);
        if (this.buy_price != 0)
            writer.writeDouble(20, this.buy_price);
        if (this.buy_volume != 0)
            writer.writeInt64(21, this.buy_volume);
        if (this.sell_price != 0)
            writer.writeDouble(22, this.sell_price);
        if (this.sell_volume != 0)
            writer.writeInt64(23, this.sell_volume);
        if (this.bid_orders != 0)
            writer.writeInt64(24, this.bid_orders);
        if (this.bid_volumes != 0)
            writer.writeInt64(25, this.bid_volumes);
        if (this.ask_orders != 0)
            writer.writeInt64(26, this.ask_orders);
        if (this.ask_volumes != 0)
            writer.writeInt64(27, this.ask_volumes);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): StockVolumeRankMessage {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new StockVolumeRankMessage();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.date = reader.readString();
                    break;
                case 2:
                    message.code = reader.readString();
                    break;
                case 3:
                    message.name = reader.readString();
                    break;
                case 4:
                    message.ts = reader.readInt64();
                    break;
                case 5:
                    message.open = reader.readDouble();
                    break;
                case 6:
                    message.high = reader.readDouble();
                    break;
                case 7:
                    message.low = reader.readDouble();
                    break;
                case 8:
                    message.close = reader.readDouble();
                    break;
                case 9:
                    message.price_range = reader.readDouble();
                    break;
                case 10:
                    message.tick_type = reader.readInt64();
                    break;
                case 11:
                    message.change_price = reader.readDouble();
                    break;
                case 12:
                    message.change_type = reader.readInt64();
                    break;
                case 13:
                    message.average_price = reader.readDouble();
                    break;
                case 14:
                    message.volume = reader.readInt64();
                    break;
                case 15:
                    message.total_volume = reader.readInt64();
                    break;
                case 16:
                    message.amount = reader.readInt64();
                    break;
                case 17:
                    message.total_amount = reader.readInt64();
                    break;
                case 18:
                    message.yesterday_volume = reader.readInt64();
                    break;
                case 19:
                    message.volume_ratio = reader.readDouble();
                    break;
                case 20:
                    message.buy_price = reader.readDouble();
                    break;
                case 21:
                    message.buy_volume = reader.readInt64();
                    break;
                case 22:
                    message.sell_price = reader.readDouble();
                    break;
                case 23:
                    message.sell_volume = reader.readInt64();
                    break;
                case 24:
                    message.bid_orders = reader.readInt64();
                    break;
                case 25:
                    message.bid_volumes = reader.readInt64();
                    break;
                case 26:
                    message.ask_orders = reader.readInt64();
                    break;
                case 27:
                    message.ask_volumes = reader.readInt64();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): StockVolumeRankMessage {
        return StockVolumeRankMessage.deserialize(bytes);
    }
}
