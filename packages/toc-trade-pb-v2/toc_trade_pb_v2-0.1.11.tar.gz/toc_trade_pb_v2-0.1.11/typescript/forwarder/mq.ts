/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 5.28.2
 * source: forwarder/mq.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
export enum OrderType {
    TYPE_UNKNOWN = 0,
    TYPE_STOCK_LOT = 1,
    TYPE_STOCK_SHARE = 2,
    TYPE_FUTURE = 3
}
export class EventMessage extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        resp_code?: number;
        event_code?: number;
        info?: string;
        event?: string;
        event_time?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("resp_code" in data && data.resp_code != undefined) {
                this.resp_code = data.resp_code;
            }
            if ("event_code" in data && data.event_code != undefined) {
                this.event_code = data.event_code;
            }
            if ("info" in data && data.info != undefined) {
                this.info = data.info;
            }
            if ("event" in data && data.event != undefined) {
                this.event = data.event;
            }
            if ("event_time" in data && data.event_time != undefined) {
                this.event_time = data.event_time;
            }
        }
    }
    get resp_code() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
    }
    set resp_code(value: number) {
        pb_1.Message.setField(this, 1, value);
    }
    get event_code() {
        return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
    }
    set event_code(value: number) {
        pb_1.Message.setField(this, 2, value);
    }
    get info() {
        return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
    }
    set info(value: string) {
        pb_1.Message.setField(this, 3, value);
    }
    get event() {
        return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
    }
    set event(value: string) {
        pb_1.Message.setField(this, 4, value);
    }
    get event_time() {
        return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
    }
    set event_time(value: string) {
        pb_1.Message.setField(this, 5, value);
    }
    static fromObject(data: {
        resp_code?: number;
        event_code?: number;
        info?: string;
        event?: string;
        event_time?: string;
    }): EventMessage {
        const message = new EventMessage({});
        if (data.resp_code != null) {
            message.resp_code = data.resp_code;
        }
        if (data.event_code != null) {
            message.event_code = data.event_code;
        }
        if (data.info != null) {
            message.info = data.info;
        }
        if (data.event != null) {
            message.event = data.event;
        }
        if (data.event_time != null) {
            message.event_time = data.event_time;
        }
        return message;
    }
    toObject() {
        const data: {
            resp_code?: number;
            event_code?: number;
            info?: string;
            event?: string;
            event_time?: string;
        } = {};
        if (this.resp_code != null) {
            data.resp_code = this.resp_code;
        }
        if (this.event_code != null) {
            data.event_code = this.event_code;
        }
        if (this.info != null) {
            data.info = this.info;
        }
        if (this.event != null) {
            data.event = this.event;
        }
        if (this.event_time != null) {
            data.event_time = this.event_time;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.resp_code != 0)
            writer.writeInt64(1, this.resp_code);
        if (this.event_code != 0)
            writer.writeInt64(2, this.event_code);
        if (this.info.length)
            writer.writeString(3, this.info);
        if (this.event.length)
            writer.writeString(4, this.event);
        if (this.event_time.length)
            writer.writeString(5, this.event_time);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): EventMessage {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new EventMessage();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.resp_code = reader.readInt64();
                    break;
                case 2:
                    message.event_code = reader.readInt64();
                    break;
                case 3:
                    message.info = reader.readString();
                    break;
                case 4:
                    message.event = reader.readString();
                    break;
                case 5:
                    message.event_time = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): EventMessage {
        return EventMessage.deserialize(bytes);
    }
}
export class StockRealTimeTickMessage extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        code?: string;
        date_time?: string;
        open?: number;
        avg_price?: number;
        close?: number;
        high?: number;
        low?: number;
        amount?: number;
        total_amount?: number;
        volume?: number;
        total_volume?: number;
        tick_type?: number;
        chg_type?: number;
        price_chg?: number;
        pct_chg?: number;
        bid_side_total_vol?: number;
        ask_side_total_vol?: number;
        bid_side_total_cnt?: number;
        ask_side_total_cnt?: number;
        suspend?: boolean;
        simtrade?: boolean;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("code" in data && data.code != undefined) {
                this.code = data.code;
            }
            if ("date_time" in data && data.date_time != undefined) {
                this.date_time = data.date_time;
            }
            if ("open" in data && data.open != undefined) {
                this.open = data.open;
            }
            if ("avg_price" in data && data.avg_price != undefined) {
                this.avg_price = data.avg_price;
            }
            if ("close" in data && data.close != undefined) {
                this.close = data.close;
            }
            if ("high" in data && data.high != undefined) {
                this.high = data.high;
            }
            if ("low" in data && data.low != undefined) {
                this.low = data.low;
            }
            if ("amount" in data && data.amount != undefined) {
                this.amount = data.amount;
            }
            if ("total_amount" in data && data.total_amount != undefined) {
                this.total_amount = data.total_amount;
            }
            if ("volume" in data && data.volume != undefined) {
                this.volume = data.volume;
            }
            if ("total_volume" in data && data.total_volume != undefined) {
                this.total_volume = data.total_volume;
            }
            if ("tick_type" in data && data.tick_type != undefined) {
                this.tick_type = data.tick_type;
            }
            if ("chg_type" in data && data.chg_type != undefined) {
                this.chg_type = data.chg_type;
            }
            if ("price_chg" in data && data.price_chg != undefined) {
                this.price_chg = data.price_chg;
            }
            if ("pct_chg" in data && data.pct_chg != undefined) {
                this.pct_chg = data.pct_chg;
            }
            if ("bid_side_total_vol" in data && data.bid_side_total_vol != undefined) {
                this.bid_side_total_vol = data.bid_side_total_vol;
            }
            if ("ask_side_total_vol" in data && data.ask_side_total_vol != undefined) {
                this.ask_side_total_vol = data.ask_side_total_vol;
            }
            if ("bid_side_total_cnt" in data && data.bid_side_total_cnt != undefined) {
                this.bid_side_total_cnt = data.bid_side_total_cnt;
            }
            if ("ask_side_total_cnt" in data && data.ask_side_total_cnt != undefined) {
                this.ask_side_total_cnt = data.ask_side_total_cnt;
            }
            if ("suspend" in data && data.suspend != undefined) {
                this.suspend = data.suspend;
            }
            if ("simtrade" in data && data.simtrade != undefined) {
                this.simtrade = data.simtrade;
            }
        }
    }
    get code() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set code(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get date_time() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set date_time(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    get open() {
        return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
    }
    set open(value: number) {
        pb_1.Message.setField(this, 3, value);
    }
    get avg_price() {
        return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
    }
    set avg_price(value: number) {
        pb_1.Message.setField(this, 4, value);
    }
    get close() {
        return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
    }
    set close(value: number) {
        pb_1.Message.setField(this, 5, value);
    }
    get high() {
        return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
    }
    set high(value: number) {
        pb_1.Message.setField(this, 6, value);
    }
    get low() {
        return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
    }
    set low(value: number) {
        pb_1.Message.setField(this, 7, value);
    }
    get amount() {
        return pb_1.Message.getFieldWithDefault(this, 8, 0) as number;
    }
    set amount(value: number) {
        pb_1.Message.setField(this, 8, value);
    }
    get total_amount() {
        return pb_1.Message.getFieldWithDefault(this, 9, 0) as number;
    }
    set total_amount(value: number) {
        pb_1.Message.setField(this, 9, value);
    }
    get volume() {
        return pb_1.Message.getFieldWithDefault(this, 10, 0) as number;
    }
    set volume(value: number) {
        pb_1.Message.setField(this, 10, value);
    }
    get total_volume() {
        return pb_1.Message.getFieldWithDefault(this, 11, 0) as number;
    }
    set total_volume(value: number) {
        pb_1.Message.setField(this, 11, value);
    }
    get tick_type() {
        return pb_1.Message.getFieldWithDefault(this, 12, 0) as number;
    }
    set tick_type(value: number) {
        pb_1.Message.setField(this, 12, value);
    }
    get chg_type() {
        return pb_1.Message.getFieldWithDefault(this, 13, 0) as number;
    }
    set chg_type(value: number) {
        pb_1.Message.setField(this, 13, value);
    }
    get price_chg() {
        return pb_1.Message.getFieldWithDefault(this, 14, 0) as number;
    }
    set price_chg(value: number) {
        pb_1.Message.setField(this, 14, value);
    }
    get pct_chg() {
        return pb_1.Message.getFieldWithDefault(this, 15, 0) as number;
    }
    set pct_chg(value: number) {
        pb_1.Message.setField(this, 15, value);
    }
    get bid_side_total_vol() {
        return pb_1.Message.getFieldWithDefault(this, 16, 0) as number;
    }
    set bid_side_total_vol(value: number) {
        pb_1.Message.setField(this, 16, value);
    }
    get ask_side_total_vol() {
        return pb_1.Message.getFieldWithDefault(this, 17, 0) as number;
    }
    set ask_side_total_vol(value: number) {
        pb_1.Message.setField(this, 17, value);
    }
    get bid_side_total_cnt() {
        return pb_1.Message.getFieldWithDefault(this, 18, 0) as number;
    }
    set bid_side_total_cnt(value: number) {
        pb_1.Message.setField(this, 18, value);
    }
    get ask_side_total_cnt() {
        return pb_1.Message.getFieldWithDefault(this, 19, 0) as number;
    }
    set ask_side_total_cnt(value: number) {
        pb_1.Message.setField(this, 19, value);
    }
    get suspend() {
        return pb_1.Message.getFieldWithDefault(this, 20, false) as boolean;
    }
    set suspend(value: boolean) {
        pb_1.Message.setField(this, 20, value);
    }
    get simtrade() {
        return pb_1.Message.getFieldWithDefault(this, 21, false) as boolean;
    }
    set simtrade(value: boolean) {
        pb_1.Message.setField(this, 21, value);
    }
    static fromObject(data: {
        code?: string;
        date_time?: string;
        open?: number;
        avg_price?: number;
        close?: number;
        high?: number;
        low?: number;
        amount?: number;
        total_amount?: number;
        volume?: number;
        total_volume?: number;
        tick_type?: number;
        chg_type?: number;
        price_chg?: number;
        pct_chg?: number;
        bid_side_total_vol?: number;
        ask_side_total_vol?: number;
        bid_side_total_cnt?: number;
        ask_side_total_cnt?: number;
        suspend?: boolean;
        simtrade?: boolean;
    }): StockRealTimeTickMessage {
        const message = new StockRealTimeTickMessage({});
        if (data.code != null) {
            message.code = data.code;
        }
        if (data.date_time != null) {
            message.date_time = data.date_time;
        }
        if (data.open != null) {
            message.open = data.open;
        }
        if (data.avg_price != null) {
            message.avg_price = data.avg_price;
        }
        if (data.close != null) {
            message.close = data.close;
        }
        if (data.high != null) {
            message.high = data.high;
        }
        if (data.low != null) {
            message.low = data.low;
        }
        if (data.amount != null) {
            message.amount = data.amount;
        }
        if (data.total_amount != null) {
            message.total_amount = data.total_amount;
        }
        if (data.volume != null) {
            message.volume = data.volume;
        }
        if (data.total_volume != null) {
            message.total_volume = data.total_volume;
        }
        if (data.tick_type != null) {
            message.tick_type = data.tick_type;
        }
        if (data.chg_type != null) {
            message.chg_type = data.chg_type;
        }
        if (data.price_chg != null) {
            message.price_chg = data.price_chg;
        }
        if (data.pct_chg != null) {
            message.pct_chg = data.pct_chg;
        }
        if (data.bid_side_total_vol != null) {
            message.bid_side_total_vol = data.bid_side_total_vol;
        }
        if (data.ask_side_total_vol != null) {
            message.ask_side_total_vol = data.ask_side_total_vol;
        }
        if (data.bid_side_total_cnt != null) {
            message.bid_side_total_cnt = data.bid_side_total_cnt;
        }
        if (data.ask_side_total_cnt != null) {
            message.ask_side_total_cnt = data.ask_side_total_cnt;
        }
        if (data.suspend != null) {
            message.suspend = data.suspend;
        }
        if (data.simtrade != null) {
            message.simtrade = data.simtrade;
        }
        return message;
    }
    toObject() {
        const data: {
            code?: string;
            date_time?: string;
            open?: number;
            avg_price?: number;
            close?: number;
            high?: number;
            low?: number;
            amount?: number;
            total_amount?: number;
            volume?: number;
            total_volume?: number;
            tick_type?: number;
            chg_type?: number;
            price_chg?: number;
            pct_chg?: number;
            bid_side_total_vol?: number;
            ask_side_total_vol?: number;
            bid_side_total_cnt?: number;
            ask_side_total_cnt?: number;
            suspend?: boolean;
            simtrade?: boolean;
        } = {};
        if (this.code != null) {
            data.code = this.code;
        }
        if (this.date_time != null) {
            data.date_time = this.date_time;
        }
        if (this.open != null) {
            data.open = this.open;
        }
        if (this.avg_price != null) {
            data.avg_price = this.avg_price;
        }
        if (this.close != null) {
            data.close = this.close;
        }
        if (this.high != null) {
            data.high = this.high;
        }
        if (this.low != null) {
            data.low = this.low;
        }
        if (this.amount != null) {
            data.amount = this.amount;
        }
        if (this.total_amount != null) {
            data.total_amount = this.total_amount;
        }
        if (this.volume != null) {
            data.volume = this.volume;
        }
        if (this.total_volume != null) {
            data.total_volume = this.total_volume;
        }
        if (this.tick_type != null) {
            data.tick_type = this.tick_type;
        }
        if (this.chg_type != null) {
            data.chg_type = this.chg_type;
        }
        if (this.price_chg != null) {
            data.price_chg = this.price_chg;
        }
        if (this.pct_chg != null) {
            data.pct_chg = this.pct_chg;
        }
        if (this.bid_side_total_vol != null) {
            data.bid_side_total_vol = this.bid_side_total_vol;
        }
        if (this.ask_side_total_vol != null) {
            data.ask_side_total_vol = this.ask_side_total_vol;
        }
        if (this.bid_side_total_cnt != null) {
            data.bid_side_total_cnt = this.bid_side_total_cnt;
        }
        if (this.ask_side_total_cnt != null) {
            data.ask_side_total_cnt = this.ask_side_total_cnt;
        }
        if (this.suspend != null) {
            data.suspend = this.suspend;
        }
        if (this.simtrade != null) {
            data.simtrade = this.simtrade;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.code.length)
            writer.writeString(1, this.code);
        if (this.date_time.length)
            writer.writeString(2, this.date_time);
        if (this.open != 0)
            writer.writeDouble(3, this.open);
        if (this.avg_price != 0)
            writer.writeDouble(4, this.avg_price);
        if (this.close != 0)
            writer.writeDouble(5, this.close);
        if (this.high != 0)
            writer.writeDouble(6, this.high);
        if (this.low != 0)
            writer.writeDouble(7, this.low);
        if (this.amount != 0)
            writer.writeDouble(8, this.amount);
        if (this.total_amount != 0)
            writer.writeDouble(9, this.total_amount);
        if (this.volume != 0)
            writer.writeInt64(10, this.volume);
        if (this.total_volume != 0)
            writer.writeInt64(11, this.total_volume);
        if (this.tick_type != 0)
            writer.writeInt64(12, this.tick_type);
        if (this.chg_type != 0)
            writer.writeInt64(13, this.chg_type);
        if (this.price_chg != 0)
            writer.writeDouble(14, this.price_chg);
        if (this.pct_chg != 0)
            writer.writeDouble(15, this.pct_chg);
        if (this.bid_side_total_vol != 0)
            writer.writeInt64(16, this.bid_side_total_vol);
        if (this.ask_side_total_vol != 0)
            writer.writeInt64(17, this.ask_side_total_vol);
        if (this.bid_side_total_cnt != 0)
            writer.writeInt64(18, this.bid_side_total_cnt);
        if (this.ask_side_total_cnt != 0)
            writer.writeInt64(19, this.ask_side_total_cnt);
        if (this.suspend != false)
            writer.writeBool(20, this.suspend);
        if (this.simtrade != false)
            writer.writeBool(21, this.simtrade);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): StockRealTimeTickMessage {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new StockRealTimeTickMessage();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.code = reader.readString();
                    break;
                case 2:
                    message.date_time = reader.readString();
                    break;
                case 3:
                    message.open = reader.readDouble();
                    break;
                case 4:
                    message.avg_price = reader.readDouble();
                    break;
                case 5:
                    message.close = reader.readDouble();
                    break;
                case 6:
                    message.high = reader.readDouble();
                    break;
                case 7:
                    message.low = reader.readDouble();
                    break;
                case 8:
                    message.amount = reader.readDouble();
                    break;
                case 9:
                    message.total_amount = reader.readDouble();
                    break;
                case 10:
                    message.volume = reader.readInt64();
                    break;
                case 11:
                    message.total_volume = reader.readInt64();
                    break;
                case 12:
                    message.tick_type = reader.readInt64();
                    break;
                case 13:
                    message.chg_type = reader.readInt64();
                    break;
                case 14:
                    message.price_chg = reader.readDouble();
                    break;
                case 15:
                    message.pct_chg = reader.readDouble();
                    break;
                case 16:
                    message.bid_side_total_vol = reader.readInt64();
                    break;
                case 17:
                    message.ask_side_total_vol = reader.readInt64();
                    break;
                case 18:
                    message.bid_side_total_cnt = reader.readInt64();
                    break;
                case 19:
                    message.ask_side_total_cnt = reader.readInt64();
                    break;
                case 20:
                    message.suspend = reader.readBool();
                    break;
                case 21:
                    message.simtrade = reader.readBool();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): StockRealTimeTickMessage {
        return StockRealTimeTickMessage.deserialize(bytes);
    }
}
export class StockRealTimeBidAskMessage extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        code?: string;
        date_time?: string;
        bid_price?: number[];
        bid_volume?: number[];
        diff_bid_vol?: number[];
        ask_price?: number[];
        ask_volume?: number[];
        diff_ask_vol?: number[];
        suspend?: boolean;
        simtrade?: boolean;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3, 4, 5, 6, 7, 8], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("code" in data && data.code != undefined) {
                this.code = data.code;
            }
            if ("date_time" in data && data.date_time != undefined) {
                this.date_time = data.date_time;
            }
            if ("bid_price" in data && data.bid_price != undefined) {
                this.bid_price = data.bid_price;
            }
            if ("bid_volume" in data && data.bid_volume != undefined) {
                this.bid_volume = data.bid_volume;
            }
            if ("diff_bid_vol" in data && data.diff_bid_vol != undefined) {
                this.diff_bid_vol = data.diff_bid_vol;
            }
            if ("ask_price" in data && data.ask_price != undefined) {
                this.ask_price = data.ask_price;
            }
            if ("ask_volume" in data && data.ask_volume != undefined) {
                this.ask_volume = data.ask_volume;
            }
            if ("diff_ask_vol" in data && data.diff_ask_vol != undefined) {
                this.diff_ask_vol = data.diff_ask_vol;
            }
            if ("suspend" in data && data.suspend != undefined) {
                this.suspend = data.suspend;
            }
            if ("simtrade" in data && data.simtrade != undefined) {
                this.simtrade = data.simtrade;
            }
        }
    }
    get code() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set code(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get date_time() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set date_time(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    get bid_price() {
        return pb_1.Message.getFieldWithDefault(this, 3, []) as number[];
    }
    set bid_price(value: number[]) {
        pb_1.Message.setField(this, 3, value);
    }
    get bid_volume() {
        return pb_1.Message.getFieldWithDefault(this, 4, []) as number[];
    }
    set bid_volume(value: number[]) {
        pb_1.Message.setField(this, 4, value);
    }
    get diff_bid_vol() {
        return pb_1.Message.getFieldWithDefault(this, 5, []) as number[];
    }
    set diff_bid_vol(value: number[]) {
        pb_1.Message.setField(this, 5, value);
    }
    get ask_price() {
        return pb_1.Message.getFieldWithDefault(this, 6, []) as number[];
    }
    set ask_price(value: number[]) {
        pb_1.Message.setField(this, 6, value);
    }
    get ask_volume() {
        return pb_1.Message.getFieldWithDefault(this, 7, []) as number[];
    }
    set ask_volume(value: number[]) {
        pb_1.Message.setField(this, 7, value);
    }
    get diff_ask_vol() {
        return pb_1.Message.getFieldWithDefault(this, 8, []) as number[];
    }
    set diff_ask_vol(value: number[]) {
        pb_1.Message.setField(this, 8, value);
    }
    get suspend() {
        return pb_1.Message.getFieldWithDefault(this, 9, false) as boolean;
    }
    set suspend(value: boolean) {
        pb_1.Message.setField(this, 9, value);
    }
    get simtrade() {
        return pb_1.Message.getFieldWithDefault(this, 10, false) as boolean;
    }
    set simtrade(value: boolean) {
        pb_1.Message.setField(this, 10, value);
    }
    static fromObject(data: {
        code?: string;
        date_time?: string;
        bid_price?: number[];
        bid_volume?: number[];
        diff_bid_vol?: number[];
        ask_price?: number[];
        ask_volume?: number[];
        diff_ask_vol?: number[];
        suspend?: boolean;
        simtrade?: boolean;
    }): StockRealTimeBidAskMessage {
        const message = new StockRealTimeBidAskMessage({});
        if (data.code != null) {
            message.code = data.code;
        }
        if (data.date_time != null) {
            message.date_time = data.date_time;
        }
        if (data.bid_price != null) {
            message.bid_price = data.bid_price;
        }
        if (data.bid_volume != null) {
            message.bid_volume = data.bid_volume;
        }
        if (data.diff_bid_vol != null) {
            message.diff_bid_vol = data.diff_bid_vol;
        }
        if (data.ask_price != null) {
            message.ask_price = data.ask_price;
        }
        if (data.ask_volume != null) {
            message.ask_volume = data.ask_volume;
        }
        if (data.diff_ask_vol != null) {
            message.diff_ask_vol = data.diff_ask_vol;
        }
        if (data.suspend != null) {
            message.suspend = data.suspend;
        }
        if (data.simtrade != null) {
            message.simtrade = data.simtrade;
        }
        return message;
    }
    toObject() {
        const data: {
            code?: string;
            date_time?: string;
            bid_price?: number[];
            bid_volume?: number[];
            diff_bid_vol?: number[];
            ask_price?: number[];
            ask_volume?: number[];
            diff_ask_vol?: number[];
            suspend?: boolean;
            simtrade?: boolean;
        } = {};
        if (this.code != null) {
            data.code = this.code;
        }
        if (this.date_time != null) {
            data.date_time = this.date_time;
        }
        if (this.bid_price != null) {
            data.bid_price = this.bid_price;
        }
        if (this.bid_volume != null) {
            data.bid_volume = this.bid_volume;
        }
        if (this.diff_bid_vol != null) {
            data.diff_bid_vol = this.diff_bid_vol;
        }
        if (this.ask_price != null) {
            data.ask_price = this.ask_price;
        }
        if (this.ask_volume != null) {
            data.ask_volume = this.ask_volume;
        }
        if (this.diff_ask_vol != null) {
            data.diff_ask_vol = this.diff_ask_vol;
        }
        if (this.suspend != null) {
            data.suspend = this.suspend;
        }
        if (this.simtrade != null) {
            data.simtrade = this.simtrade;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.code.length)
            writer.writeString(1, this.code);
        if (this.date_time.length)
            writer.writeString(2, this.date_time);
        if (this.bid_price.length)
            writer.writePackedDouble(3, this.bid_price);
        if (this.bid_volume.length)
            writer.writePackedInt64(4, this.bid_volume);
        if (this.diff_bid_vol.length)
            writer.writePackedInt64(5, this.diff_bid_vol);
        if (this.ask_price.length)
            writer.writePackedDouble(6, this.ask_price);
        if (this.ask_volume.length)
            writer.writePackedInt64(7, this.ask_volume);
        if (this.diff_ask_vol.length)
            writer.writePackedInt64(8, this.diff_ask_vol);
        if (this.suspend != false)
            writer.writeBool(9, this.suspend);
        if (this.simtrade != false)
            writer.writeBool(10, this.simtrade);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): StockRealTimeBidAskMessage {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new StockRealTimeBidAskMessage();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.code = reader.readString();
                    break;
                case 2:
                    message.date_time = reader.readString();
                    break;
                case 3:
                    message.bid_price = reader.readPackedDouble();
                    break;
                case 4:
                    message.bid_volume = reader.readPackedInt64();
                    break;
                case 5:
                    message.diff_bid_vol = reader.readPackedInt64();
                    break;
                case 6:
                    message.ask_price = reader.readPackedDouble();
                    break;
                case 7:
                    message.ask_volume = reader.readPackedInt64();
                    break;
                case 8:
                    message.diff_ask_vol = reader.readPackedInt64();
                    break;
                case 9:
                    message.suspend = reader.readBool();
                    break;
                case 10:
                    message.simtrade = reader.readBool();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): StockRealTimeBidAskMessage {
        return StockRealTimeBidAskMessage.deserialize(bytes);
    }
}
export class FutureRealTimeTickMessage extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        code?: string;
        date_time?: string;
        open?: number;
        underlying_price?: number;
        bid_side_total_vol?: number;
        ask_side_total_vol?: number;
        avg_price?: number;
        close?: number;
        high?: number;
        low?: number;
        amount?: number;
        total_amount?: number;
        volume?: number;
        total_volume?: number;
        tick_type?: number;
        chg_type?: number;
        price_chg?: number;
        pct_chg?: number;
        simtrade?: boolean;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("code" in data && data.code != undefined) {
                this.code = data.code;
            }
            if ("date_time" in data && data.date_time != undefined) {
                this.date_time = data.date_time;
            }
            if ("open" in data && data.open != undefined) {
                this.open = data.open;
            }
            if ("underlying_price" in data && data.underlying_price != undefined) {
                this.underlying_price = data.underlying_price;
            }
            if ("bid_side_total_vol" in data && data.bid_side_total_vol != undefined) {
                this.bid_side_total_vol = data.bid_side_total_vol;
            }
            if ("ask_side_total_vol" in data && data.ask_side_total_vol != undefined) {
                this.ask_side_total_vol = data.ask_side_total_vol;
            }
            if ("avg_price" in data && data.avg_price != undefined) {
                this.avg_price = data.avg_price;
            }
            if ("close" in data && data.close != undefined) {
                this.close = data.close;
            }
            if ("high" in data && data.high != undefined) {
                this.high = data.high;
            }
            if ("low" in data && data.low != undefined) {
                this.low = data.low;
            }
            if ("amount" in data && data.amount != undefined) {
                this.amount = data.amount;
            }
            if ("total_amount" in data && data.total_amount != undefined) {
                this.total_amount = data.total_amount;
            }
            if ("volume" in data && data.volume != undefined) {
                this.volume = data.volume;
            }
            if ("total_volume" in data && data.total_volume != undefined) {
                this.total_volume = data.total_volume;
            }
            if ("tick_type" in data && data.tick_type != undefined) {
                this.tick_type = data.tick_type;
            }
            if ("chg_type" in data && data.chg_type != undefined) {
                this.chg_type = data.chg_type;
            }
            if ("price_chg" in data && data.price_chg != undefined) {
                this.price_chg = data.price_chg;
            }
            if ("pct_chg" in data && data.pct_chg != undefined) {
                this.pct_chg = data.pct_chg;
            }
            if ("simtrade" in data && data.simtrade != undefined) {
                this.simtrade = data.simtrade;
            }
        }
    }
    get code() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set code(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get date_time() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set date_time(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    get open() {
        return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
    }
    set open(value: number) {
        pb_1.Message.setField(this, 3, value);
    }
    get underlying_price() {
        return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
    }
    set underlying_price(value: number) {
        pb_1.Message.setField(this, 4, value);
    }
    get bid_side_total_vol() {
        return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
    }
    set bid_side_total_vol(value: number) {
        pb_1.Message.setField(this, 5, value);
    }
    get ask_side_total_vol() {
        return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
    }
    set ask_side_total_vol(value: number) {
        pb_1.Message.setField(this, 6, value);
    }
    get avg_price() {
        return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
    }
    set avg_price(value: number) {
        pb_1.Message.setField(this, 7, value);
    }
    get close() {
        return pb_1.Message.getFieldWithDefault(this, 8, 0) as number;
    }
    set close(value: number) {
        pb_1.Message.setField(this, 8, value);
    }
    get high() {
        return pb_1.Message.getFieldWithDefault(this, 9, 0) as number;
    }
    set high(value: number) {
        pb_1.Message.setField(this, 9, value);
    }
    get low() {
        return pb_1.Message.getFieldWithDefault(this, 10, 0) as number;
    }
    set low(value: number) {
        pb_1.Message.setField(this, 10, value);
    }
    get amount() {
        return pb_1.Message.getFieldWithDefault(this, 11, 0) as number;
    }
    set amount(value: number) {
        pb_1.Message.setField(this, 11, value);
    }
    get total_amount() {
        return pb_1.Message.getFieldWithDefault(this, 12, 0) as number;
    }
    set total_amount(value: number) {
        pb_1.Message.setField(this, 12, value);
    }
    get volume() {
        return pb_1.Message.getFieldWithDefault(this, 13, 0) as number;
    }
    set volume(value: number) {
        pb_1.Message.setField(this, 13, value);
    }
    get total_volume() {
        return pb_1.Message.getFieldWithDefault(this, 14, 0) as number;
    }
    set total_volume(value: number) {
        pb_1.Message.setField(this, 14, value);
    }
    get tick_type() {
        return pb_1.Message.getFieldWithDefault(this, 15, 0) as number;
    }
    set tick_type(value: number) {
        pb_1.Message.setField(this, 15, value);
    }
    get chg_type() {
        return pb_1.Message.getFieldWithDefault(this, 16, 0) as number;
    }
    set chg_type(value: number) {
        pb_1.Message.setField(this, 16, value);
    }
    get price_chg() {
        return pb_1.Message.getFieldWithDefault(this, 17, 0) as number;
    }
    set price_chg(value: number) {
        pb_1.Message.setField(this, 17, value);
    }
    get pct_chg() {
        return pb_1.Message.getFieldWithDefault(this, 18, 0) as number;
    }
    set pct_chg(value: number) {
        pb_1.Message.setField(this, 18, value);
    }
    get simtrade() {
        return pb_1.Message.getFieldWithDefault(this, 19, false) as boolean;
    }
    set simtrade(value: boolean) {
        pb_1.Message.setField(this, 19, value);
    }
    static fromObject(data: {
        code?: string;
        date_time?: string;
        open?: number;
        underlying_price?: number;
        bid_side_total_vol?: number;
        ask_side_total_vol?: number;
        avg_price?: number;
        close?: number;
        high?: number;
        low?: number;
        amount?: number;
        total_amount?: number;
        volume?: number;
        total_volume?: number;
        tick_type?: number;
        chg_type?: number;
        price_chg?: number;
        pct_chg?: number;
        simtrade?: boolean;
    }): FutureRealTimeTickMessage {
        const message = new FutureRealTimeTickMessage({});
        if (data.code != null) {
            message.code = data.code;
        }
        if (data.date_time != null) {
            message.date_time = data.date_time;
        }
        if (data.open != null) {
            message.open = data.open;
        }
        if (data.underlying_price != null) {
            message.underlying_price = data.underlying_price;
        }
        if (data.bid_side_total_vol != null) {
            message.bid_side_total_vol = data.bid_side_total_vol;
        }
        if (data.ask_side_total_vol != null) {
            message.ask_side_total_vol = data.ask_side_total_vol;
        }
        if (data.avg_price != null) {
            message.avg_price = data.avg_price;
        }
        if (data.close != null) {
            message.close = data.close;
        }
        if (data.high != null) {
            message.high = data.high;
        }
        if (data.low != null) {
            message.low = data.low;
        }
        if (data.amount != null) {
            message.amount = data.amount;
        }
        if (data.total_amount != null) {
            message.total_amount = data.total_amount;
        }
        if (data.volume != null) {
            message.volume = data.volume;
        }
        if (data.total_volume != null) {
            message.total_volume = data.total_volume;
        }
        if (data.tick_type != null) {
            message.tick_type = data.tick_type;
        }
        if (data.chg_type != null) {
            message.chg_type = data.chg_type;
        }
        if (data.price_chg != null) {
            message.price_chg = data.price_chg;
        }
        if (data.pct_chg != null) {
            message.pct_chg = data.pct_chg;
        }
        if (data.simtrade != null) {
            message.simtrade = data.simtrade;
        }
        return message;
    }
    toObject() {
        const data: {
            code?: string;
            date_time?: string;
            open?: number;
            underlying_price?: number;
            bid_side_total_vol?: number;
            ask_side_total_vol?: number;
            avg_price?: number;
            close?: number;
            high?: number;
            low?: number;
            amount?: number;
            total_amount?: number;
            volume?: number;
            total_volume?: number;
            tick_type?: number;
            chg_type?: number;
            price_chg?: number;
            pct_chg?: number;
            simtrade?: boolean;
        } = {};
        if (this.code != null) {
            data.code = this.code;
        }
        if (this.date_time != null) {
            data.date_time = this.date_time;
        }
        if (this.open != null) {
            data.open = this.open;
        }
        if (this.underlying_price != null) {
            data.underlying_price = this.underlying_price;
        }
        if (this.bid_side_total_vol != null) {
            data.bid_side_total_vol = this.bid_side_total_vol;
        }
        if (this.ask_side_total_vol != null) {
            data.ask_side_total_vol = this.ask_side_total_vol;
        }
        if (this.avg_price != null) {
            data.avg_price = this.avg_price;
        }
        if (this.close != null) {
            data.close = this.close;
        }
        if (this.high != null) {
            data.high = this.high;
        }
        if (this.low != null) {
            data.low = this.low;
        }
        if (this.amount != null) {
            data.amount = this.amount;
        }
        if (this.total_amount != null) {
            data.total_amount = this.total_amount;
        }
        if (this.volume != null) {
            data.volume = this.volume;
        }
        if (this.total_volume != null) {
            data.total_volume = this.total_volume;
        }
        if (this.tick_type != null) {
            data.tick_type = this.tick_type;
        }
        if (this.chg_type != null) {
            data.chg_type = this.chg_type;
        }
        if (this.price_chg != null) {
            data.price_chg = this.price_chg;
        }
        if (this.pct_chg != null) {
            data.pct_chg = this.pct_chg;
        }
        if (this.simtrade != null) {
            data.simtrade = this.simtrade;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.code.length)
            writer.writeString(1, this.code);
        if (this.date_time.length)
            writer.writeString(2, this.date_time);
        if (this.open != 0)
            writer.writeDouble(3, this.open);
        if (this.underlying_price != 0)
            writer.writeDouble(4, this.underlying_price);
        if (this.bid_side_total_vol != 0)
            writer.writeInt64(5, this.bid_side_total_vol);
        if (this.ask_side_total_vol != 0)
            writer.writeInt64(6, this.ask_side_total_vol);
        if (this.avg_price != 0)
            writer.writeDouble(7, this.avg_price);
        if (this.close != 0)
            writer.writeDouble(8, this.close);
        if (this.high != 0)
            writer.writeDouble(9, this.high);
        if (this.low != 0)
            writer.writeDouble(10, this.low);
        if (this.amount != 0)
            writer.writeDouble(11, this.amount);
        if (this.total_amount != 0)
            writer.writeDouble(12, this.total_amount);
        if (this.volume != 0)
            writer.writeInt64(13, this.volume);
        if (this.total_volume != 0)
            writer.writeInt64(14, this.total_volume);
        if (this.tick_type != 0)
            writer.writeInt64(15, this.tick_type);
        if (this.chg_type != 0)
            writer.writeInt64(16, this.chg_type);
        if (this.price_chg != 0)
            writer.writeDouble(17, this.price_chg);
        if (this.pct_chg != 0)
            writer.writeDouble(18, this.pct_chg);
        if (this.simtrade != false)
            writer.writeBool(19, this.simtrade);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): FutureRealTimeTickMessage {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new FutureRealTimeTickMessage();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.code = reader.readString();
                    break;
                case 2:
                    message.date_time = reader.readString();
                    break;
                case 3:
                    message.open = reader.readDouble();
                    break;
                case 4:
                    message.underlying_price = reader.readDouble();
                    break;
                case 5:
                    message.bid_side_total_vol = reader.readInt64();
                    break;
                case 6:
                    message.ask_side_total_vol = reader.readInt64();
                    break;
                case 7:
                    message.avg_price = reader.readDouble();
                    break;
                case 8:
                    message.close = reader.readDouble();
                    break;
                case 9:
                    message.high = reader.readDouble();
                    break;
                case 10:
                    message.low = reader.readDouble();
                    break;
                case 11:
                    message.amount = reader.readDouble();
                    break;
                case 12:
                    message.total_amount = reader.readDouble();
                    break;
                case 13:
                    message.volume = reader.readInt64();
                    break;
                case 14:
                    message.total_volume = reader.readInt64();
                    break;
                case 15:
                    message.tick_type = reader.readInt64();
                    break;
                case 16:
                    message.chg_type = reader.readInt64();
                    break;
                case 17:
                    message.price_chg = reader.readDouble();
                    break;
                case 18:
                    message.pct_chg = reader.readDouble();
                    break;
                case 19:
                    message.simtrade = reader.readBool();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): FutureRealTimeTickMessage {
        return FutureRealTimeTickMessage.deserialize(bytes);
    }
}
export class FutureRealTimeBidAskMessage extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        code?: string;
        date_time?: string;
        bid_total_vol?: number;
        ask_total_vol?: number;
        bid_price?: number[];
        bid_volume?: number[];
        diff_bid_vol?: number[];
        ask_price?: number[];
        ask_volume?: number[];
        diff_ask_vol?: number[];
        first_derived_bid_price?: number;
        first_derived_ask_price?: number;
        first_derived_bid_vol?: number;
        first_derived_ask_vol?: number;
        underlying_price?: number;
        simtrade?: boolean;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [5, 6, 7, 8, 9, 10], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("code" in data && data.code != undefined) {
                this.code = data.code;
            }
            if ("date_time" in data && data.date_time != undefined) {
                this.date_time = data.date_time;
            }
            if ("bid_total_vol" in data && data.bid_total_vol != undefined) {
                this.bid_total_vol = data.bid_total_vol;
            }
            if ("ask_total_vol" in data && data.ask_total_vol != undefined) {
                this.ask_total_vol = data.ask_total_vol;
            }
            if ("bid_price" in data && data.bid_price != undefined) {
                this.bid_price = data.bid_price;
            }
            if ("bid_volume" in data && data.bid_volume != undefined) {
                this.bid_volume = data.bid_volume;
            }
            if ("diff_bid_vol" in data && data.diff_bid_vol != undefined) {
                this.diff_bid_vol = data.diff_bid_vol;
            }
            if ("ask_price" in data && data.ask_price != undefined) {
                this.ask_price = data.ask_price;
            }
            if ("ask_volume" in data && data.ask_volume != undefined) {
                this.ask_volume = data.ask_volume;
            }
            if ("diff_ask_vol" in data && data.diff_ask_vol != undefined) {
                this.diff_ask_vol = data.diff_ask_vol;
            }
            if ("first_derived_bid_price" in data && data.first_derived_bid_price != undefined) {
                this.first_derived_bid_price = data.first_derived_bid_price;
            }
            if ("first_derived_ask_price" in data && data.first_derived_ask_price != undefined) {
                this.first_derived_ask_price = data.first_derived_ask_price;
            }
            if ("first_derived_bid_vol" in data && data.first_derived_bid_vol != undefined) {
                this.first_derived_bid_vol = data.first_derived_bid_vol;
            }
            if ("first_derived_ask_vol" in data && data.first_derived_ask_vol != undefined) {
                this.first_derived_ask_vol = data.first_derived_ask_vol;
            }
            if ("underlying_price" in data && data.underlying_price != undefined) {
                this.underlying_price = data.underlying_price;
            }
            if ("simtrade" in data && data.simtrade != undefined) {
                this.simtrade = data.simtrade;
            }
        }
    }
    get code() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set code(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get date_time() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set date_time(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    get bid_total_vol() {
        return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
    }
    set bid_total_vol(value: number) {
        pb_1.Message.setField(this, 3, value);
    }
    get ask_total_vol() {
        return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
    }
    set ask_total_vol(value: number) {
        pb_1.Message.setField(this, 4, value);
    }
    get bid_price() {
        return pb_1.Message.getFieldWithDefault(this, 5, []) as number[];
    }
    set bid_price(value: number[]) {
        pb_1.Message.setField(this, 5, value);
    }
    get bid_volume() {
        return pb_1.Message.getFieldWithDefault(this, 6, []) as number[];
    }
    set bid_volume(value: number[]) {
        pb_1.Message.setField(this, 6, value);
    }
    get diff_bid_vol() {
        return pb_1.Message.getFieldWithDefault(this, 7, []) as number[];
    }
    set diff_bid_vol(value: number[]) {
        pb_1.Message.setField(this, 7, value);
    }
    get ask_price() {
        return pb_1.Message.getFieldWithDefault(this, 8, []) as number[];
    }
    set ask_price(value: number[]) {
        pb_1.Message.setField(this, 8, value);
    }
    get ask_volume() {
        return pb_1.Message.getFieldWithDefault(this, 9, []) as number[];
    }
    set ask_volume(value: number[]) {
        pb_1.Message.setField(this, 9, value);
    }
    get diff_ask_vol() {
        return pb_1.Message.getFieldWithDefault(this, 10, []) as number[];
    }
    set diff_ask_vol(value: number[]) {
        pb_1.Message.setField(this, 10, value);
    }
    get first_derived_bid_price() {
        return pb_1.Message.getFieldWithDefault(this, 11, 0) as number;
    }
    set first_derived_bid_price(value: number) {
        pb_1.Message.setField(this, 11, value);
    }
    get first_derived_ask_price() {
        return pb_1.Message.getFieldWithDefault(this, 12, 0) as number;
    }
    set first_derived_ask_price(value: number) {
        pb_1.Message.setField(this, 12, value);
    }
    get first_derived_bid_vol() {
        return pb_1.Message.getFieldWithDefault(this, 13, 0) as number;
    }
    set first_derived_bid_vol(value: number) {
        pb_1.Message.setField(this, 13, value);
    }
    get first_derived_ask_vol() {
        return pb_1.Message.getFieldWithDefault(this, 14, 0) as number;
    }
    set first_derived_ask_vol(value: number) {
        pb_1.Message.setField(this, 14, value);
    }
    get underlying_price() {
        return pb_1.Message.getFieldWithDefault(this, 15, 0) as number;
    }
    set underlying_price(value: number) {
        pb_1.Message.setField(this, 15, value);
    }
    get simtrade() {
        return pb_1.Message.getFieldWithDefault(this, 16, false) as boolean;
    }
    set simtrade(value: boolean) {
        pb_1.Message.setField(this, 16, value);
    }
    static fromObject(data: {
        code?: string;
        date_time?: string;
        bid_total_vol?: number;
        ask_total_vol?: number;
        bid_price?: number[];
        bid_volume?: number[];
        diff_bid_vol?: number[];
        ask_price?: number[];
        ask_volume?: number[];
        diff_ask_vol?: number[];
        first_derived_bid_price?: number;
        first_derived_ask_price?: number;
        first_derived_bid_vol?: number;
        first_derived_ask_vol?: number;
        underlying_price?: number;
        simtrade?: boolean;
    }): FutureRealTimeBidAskMessage {
        const message = new FutureRealTimeBidAskMessage({});
        if (data.code != null) {
            message.code = data.code;
        }
        if (data.date_time != null) {
            message.date_time = data.date_time;
        }
        if (data.bid_total_vol != null) {
            message.bid_total_vol = data.bid_total_vol;
        }
        if (data.ask_total_vol != null) {
            message.ask_total_vol = data.ask_total_vol;
        }
        if (data.bid_price != null) {
            message.bid_price = data.bid_price;
        }
        if (data.bid_volume != null) {
            message.bid_volume = data.bid_volume;
        }
        if (data.diff_bid_vol != null) {
            message.diff_bid_vol = data.diff_bid_vol;
        }
        if (data.ask_price != null) {
            message.ask_price = data.ask_price;
        }
        if (data.ask_volume != null) {
            message.ask_volume = data.ask_volume;
        }
        if (data.diff_ask_vol != null) {
            message.diff_ask_vol = data.diff_ask_vol;
        }
        if (data.first_derived_bid_price != null) {
            message.first_derived_bid_price = data.first_derived_bid_price;
        }
        if (data.first_derived_ask_price != null) {
            message.first_derived_ask_price = data.first_derived_ask_price;
        }
        if (data.first_derived_bid_vol != null) {
            message.first_derived_bid_vol = data.first_derived_bid_vol;
        }
        if (data.first_derived_ask_vol != null) {
            message.first_derived_ask_vol = data.first_derived_ask_vol;
        }
        if (data.underlying_price != null) {
            message.underlying_price = data.underlying_price;
        }
        if (data.simtrade != null) {
            message.simtrade = data.simtrade;
        }
        return message;
    }
    toObject() {
        const data: {
            code?: string;
            date_time?: string;
            bid_total_vol?: number;
            ask_total_vol?: number;
            bid_price?: number[];
            bid_volume?: number[];
            diff_bid_vol?: number[];
            ask_price?: number[];
            ask_volume?: number[];
            diff_ask_vol?: number[];
            first_derived_bid_price?: number;
            first_derived_ask_price?: number;
            first_derived_bid_vol?: number;
            first_derived_ask_vol?: number;
            underlying_price?: number;
            simtrade?: boolean;
        } = {};
        if (this.code != null) {
            data.code = this.code;
        }
        if (this.date_time != null) {
            data.date_time = this.date_time;
        }
        if (this.bid_total_vol != null) {
            data.bid_total_vol = this.bid_total_vol;
        }
        if (this.ask_total_vol != null) {
            data.ask_total_vol = this.ask_total_vol;
        }
        if (this.bid_price != null) {
            data.bid_price = this.bid_price;
        }
        if (this.bid_volume != null) {
            data.bid_volume = this.bid_volume;
        }
        if (this.diff_bid_vol != null) {
            data.diff_bid_vol = this.diff_bid_vol;
        }
        if (this.ask_price != null) {
            data.ask_price = this.ask_price;
        }
        if (this.ask_volume != null) {
            data.ask_volume = this.ask_volume;
        }
        if (this.diff_ask_vol != null) {
            data.diff_ask_vol = this.diff_ask_vol;
        }
        if (this.first_derived_bid_price != null) {
            data.first_derived_bid_price = this.first_derived_bid_price;
        }
        if (this.first_derived_ask_price != null) {
            data.first_derived_ask_price = this.first_derived_ask_price;
        }
        if (this.first_derived_bid_vol != null) {
            data.first_derived_bid_vol = this.first_derived_bid_vol;
        }
        if (this.first_derived_ask_vol != null) {
            data.first_derived_ask_vol = this.first_derived_ask_vol;
        }
        if (this.underlying_price != null) {
            data.underlying_price = this.underlying_price;
        }
        if (this.simtrade != null) {
            data.simtrade = this.simtrade;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.code.length)
            writer.writeString(1, this.code);
        if (this.date_time.length)
            writer.writeString(2, this.date_time);
        if (this.bid_total_vol != 0)
            writer.writeInt64(3, this.bid_total_vol);
        if (this.ask_total_vol != 0)
            writer.writeInt64(4, this.ask_total_vol);
        if (this.bid_price.length)
            writer.writePackedDouble(5, this.bid_price);
        if (this.bid_volume.length)
            writer.writePackedInt64(6, this.bid_volume);
        if (this.diff_bid_vol.length)
            writer.writePackedInt64(7, this.diff_bid_vol);
        if (this.ask_price.length)
            writer.writePackedDouble(8, this.ask_price);
        if (this.ask_volume.length)
            writer.writePackedInt64(9, this.ask_volume);
        if (this.diff_ask_vol.length)
            writer.writePackedInt64(10, this.diff_ask_vol);
        if (this.first_derived_bid_price != 0)
            writer.writeDouble(11, this.first_derived_bid_price);
        if (this.first_derived_ask_price != 0)
            writer.writeDouble(12, this.first_derived_ask_price);
        if (this.first_derived_bid_vol != 0)
            writer.writeInt64(13, this.first_derived_bid_vol);
        if (this.first_derived_ask_vol != 0)
            writer.writeInt64(14, this.first_derived_ask_vol);
        if (this.underlying_price != 0)
            writer.writeDouble(15, this.underlying_price);
        if (this.simtrade != false)
            writer.writeBool(16, this.simtrade);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): FutureRealTimeBidAskMessage {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new FutureRealTimeBidAskMessage();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.code = reader.readString();
                    break;
                case 2:
                    message.date_time = reader.readString();
                    break;
                case 3:
                    message.bid_total_vol = reader.readInt64();
                    break;
                case 4:
                    message.ask_total_vol = reader.readInt64();
                    break;
                case 5:
                    message.bid_price = reader.readPackedDouble();
                    break;
                case 6:
                    message.bid_volume = reader.readPackedInt64();
                    break;
                case 7:
                    message.diff_bid_vol = reader.readPackedInt64();
                    break;
                case 8:
                    message.ask_price = reader.readPackedDouble();
                    break;
                case 9:
                    message.ask_volume = reader.readPackedInt64();
                    break;
                case 10:
                    message.diff_ask_vol = reader.readPackedInt64();
                    break;
                case 11:
                    message.first_derived_bid_price = reader.readDouble();
                    break;
                case 12:
                    message.first_derived_ask_price = reader.readDouble();
                    break;
                case 13:
                    message.first_derived_bid_vol = reader.readInt64();
                    break;
                case 14:
                    message.first_derived_ask_vol = reader.readInt64();
                    break;
                case 15:
                    message.underlying_price = reader.readDouble();
                    break;
                case 16:
                    message.simtrade = reader.readBool();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): FutureRealTimeBidAskMessage {
        return FutureRealTimeBidAskMessage.deserialize(bytes);
    }
}
export class OrderStatusArr extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        data?: OrderStatus[];
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("data" in data && data.data != undefined) {
                this.data = data.data;
            }
        }
    }
    get data() {
        return pb_1.Message.getRepeatedWrapperField(this, OrderStatus, 1) as OrderStatus[];
    }
    set data(value: OrderStatus[]) {
        pb_1.Message.setRepeatedWrapperField(this, 1, value);
    }
    static fromObject(data: {
        data?: ReturnType<typeof OrderStatus.prototype.toObject>[];
    }): OrderStatusArr {
        const message = new OrderStatusArr({});
        if (data.data != null) {
            message.data = data.data.map(item => OrderStatus.fromObject(item));
        }
        return message;
    }
    toObject() {
        const data: {
            data?: ReturnType<typeof OrderStatus.prototype.toObject>[];
        } = {};
        if (this.data != null) {
            data.data = this.data.map((item: OrderStatus) => item.toObject());
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.data.length)
            writer.writeRepeatedMessage(1, this.data, (item: OrderStatus) => item.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): OrderStatusArr {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new OrderStatusArr();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.data, () => pb_1.Message.addToRepeatedWrapperField(message, 1, OrderStatus.deserialize(reader), OrderStatus));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): OrderStatusArr {
        return OrderStatusArr.deserialize(bytes);
    }
}
export class OrderStatus extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        type?: OrderType;
        status?: string;
        code?: string;
        action?: string;
        price?: number;
        quantity?: number;
        order_id?: string;
        order_time?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("type" in data && data.type != undefined) {
                this.type = data.type;
            }
            if ("status" in data && data.status != undefined) {
                this.status = data.status;
            }
            if ("code" in data && data.code != undefined) {
                this.code = data.code;
            }
            if ("action" in data && data.action != undefined) {
                this.action = data.action;
            }
            if ("price" in data && data.price != undefined) {
                this.price = data.price;
            }
            if ("quantity" in data && data.quantity != undefined) {
                this.quantity = data.quantity;
            }
            if ("order_id" in data && data.order_id != undefined) {
                this.order_id = data.order_id;
            }
            if ("order_time" in data && data.order_time != undefined) {
                this.order_time = data.order_time;
            }
        }
    }
    get type() {
        return pb_1.Message.getFieldWithDefault(this, 1, OrderType.TYPE_UNKNOWN) as OrderType;
    }
    set type(value: OrderType) {
        pb_1.Message.setField(this, 1, value);
    }
    get status() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set status(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    get code() {
        return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
    }
    set code(value: string) {
        pb_1.Message.setField(this, 3, value);
    }
    get action() {
        return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
    }
    set action(value: string) {
        pb_1.Message.setField(this, 4, value);
    }
    get price() {
        return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
    }
    set price(value: number) {
        pb_1.Message.setField(this, 5, value);
    }
    get quantity() {
        return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
    }
    set quantity(value: number) {
        pb_1.Message.setField(this, 6, value);
    }
    get order_id() {
        return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
    }
    set order_id(value: string) {
        pb_1.Message.setField(this, 7, value);
    }
    get order_time() {
        return pb_1.Message.getFieldWithDefault(this, 8, "") as string;
    }
    set order_time(value: string) {
        pb_1.Message.setField(this, 8, value);
    }
    static fromObject(data: {
        type?: OrderType;
        status?: string;
        code?: string;
        action?: string;
        price?: number;
        quantity?: number;
        order_id?: string;
        order_time?: string;
    }): OrderStatus {
        const message = new OrderStatus({});
        if (data.type != null) {
            message.type = data.type;
        }
        if (data.status != null) {
            message.status = data.status;
        }
        if (data.code != null) {
            message.code = data.code;
        }
        if (data.action != null) {
            message.action = data.action;
        }
        if (data.price != null) {
            message.price = data.price;
        }
        if (data.quantity != null) {
            message.quantity = data.quantity;
        }
        if (data.order_id != null) {
            message.order_id = data.order_id;
        }
        if (data.order_time != null) {
            message.order_time = data.order_time;
        }
        return message;
    }
    toObject() {
        const data: {
            type?: OrderType;
            status?: string;
            code?: string;
            action?: string;
            price?: number;
            quantity?: number;
            order_id?: string;
            order_time?: string;
        } = {};
        if (this.type != null) {
            data.type = this.type;
        }
        if (this.status != null) {
            data.status = this.status;
        }
        if (this.code != null) {
            data.code = this.code;
        }
        if (this.action != null) {
            data.action = this.action;
        }
        if (this.price != null) {
            data.price = this.price;
        }
        if (this.quantity != null) {
            data.quantity = this.quantity;
        }
        if (this.order_id != null) {
            data.order_id = this.order_id;
        }
        if (this.order_time != null) {
            data.order_time = this.order_time;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.type != OrderType.TYPE_UNKNOWN)
            writer.writeEnum(1, this.type);
        if (this.status.length)
            writer.writeString(2, this.status);
        if (this.code.length)
            writer.writeString(3, this.code);
        if (this.action.length)
            writer.writeString(4, this.action);
        if (this.price != 0)
            writer.writeDouble(5, this.price);
        if (this.quantity != 0)
            writer.writeInt64(6, this.quantity);
        if (this.order_id.length)
            writer.writeString(7, this.order_id);
        if (this.order_time.length)
            writer.writeString(8, this.order_time);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): OrderStatus {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new OrderStatus();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.type = reader.readEnum();
                    break;
                case 2:
                    message.status = reader.readString();
                    break;
                case 3:
                    message.code = reader.readString();
                    break;
                case 4:
                    message.action = reader.readString();
                    break;
                case 5:
                    message.price = reader.readDouble();
                    break;
                case 6:
                    message.quantity = reader.readInt64();
                    break;
                case 7:
                    message.order_id = reader.readString();
                    break;
                case 8:
                    message.order_time = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): OrderStatus {
        return OrderStatus.deserialize(bytes);
    }
}
