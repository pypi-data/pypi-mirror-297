// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v5.28.2
// source: forwarder/trade.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type FuturePosition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code      string  `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	Direction string  `protobuf:"bytes,2,opt,name=direction,proto3" json:"direction,omitempty"`
	Quantity  int32   `protobuf:"varint,3,opt,name=quantity,proto3" json:"quantity,omitempty"`
	Price     float64 `protobuf:"fixed64,4,opt,name=price,proto3" json:"price,omitempty"`
	LastPrice float64 `protobuf:"fixed64,5,opt,name=last_price,json=lastPrice,proto3" json:"last_price,omitempty"`
	Pnl       float64 `protobuf:"fixed64,6,opt,name=pnl,proto3" json:"pnl,omitempty"`
}

func (x *FuturePosition) Reset() {
	*x = FuturePosition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_forwarder_trade_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FuturePosition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FuturePosition) ProtoMessage() {}

func (x *FuturePosition) ProtoReflect() protoreflect.Message {
	mi := &file_forwarder_trade_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FuturePosition.ProtoReflect.Descriptor instead.
func (*FuturePosition) Descriptor() ([]byte, []int) {
	return file_forwarder_trade_proto_rawDescGZIP(), []int{0}
}

func (x *FuturePosition) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *FuturePosition) GetDirection() string {
	if x != nil {
		return x.Direction
	}
	return ""
}

func (x *FuturePosition) GetQuantity() int32 {
	if x != nil {
		return x.Quantity
	}
	return 0
}

func (x *FuturePosition) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *FuturePosition) GetLastPrice() float64 {
	if x != nil {
		return x.LastPrice
	}
	return 0
}

func (x *FuturePosition) GetPnl() float64 {
	if x != nil {
		return x.Pnl
	}
	return 0
}

type FuturePositionArr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PositionArr []*FuturePosition `protobuf:"bytes,1,rep,name=position_arr,json=positionArr,proto3" json:"position_arr,omitempty"`
}

func (x *FuturePositionArr) Reset() {
	*x = FuturePositionArr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_forwarder_trade_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FuturePositionArr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FuturePositionArr) ProtoMessage() {}

func (x *FuturePositionArr) ProtoReflect() protoreflect.Message {
	mi := &file_forwarder_trade_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FuturePositionArr.ProtoReflect.Descriptor instead.
func (*FuturePositionArr) Descriptor() ([]byte, []int) {
	return file_forwarder_trade_proto_rawDescGZIP(), []int{1}
}

func (x *FuturePositionArr) GetPositionArr() []*FuturePosition {
	if x != nil {
		return x.PositionArr
	}
	return nil
}

// id (int): position id
// code (str): contract id
// direction (Action): action {Buy, Sell}
// quantity (int): quantity
// price (float): the average price
// last_price (float): last price
// pnl (float): unrealized profit
// yd_quantity (int): yesterday
// cond (StockOrderCond): Default Cash {Cash(現股), Netting(餘額交割),
// MarginTrading(融資),ShortSelling(融券), Emerging(興櫃)}
// margin_purchase_amount (int): margin_purchase_amount
// collateral (int): collateral
// short_sale_margin (int): short_sale_margin
// interest (int): interest
// StockPosition(id = 0, code = '2344', direction = <Action.Buy: 'Buy'>,
// quantity = 10, price = 28.3, last_price = 27.1, pnl = -15.0, yd_quantity =
// 10, margin_purchase_amount = 0, collateral = 0, short_sale_margin = 0,
// interest = 0)
type StockPosition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                   int32                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Code                 string                 `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
	Direction            string                 `protobuf:"bytes,3,opt,name=direction,proto3" json:"direction,omitempty"`
	Quantity             int32                  `protobuf:"varint,4,opt,name=quantity,proto3" json:"quantity,omitempty"`
	Price                float64                `protobuf:"fixed64,5,opt,name=price,proto3" json:"price,omitempty"`
	LastPrice            float64                `protobuf:"fixed64,6,opt,name=last_price,json=lastPrice,proto3" json:"last_price,omitempty"`
	Pnl                  float64                `protobuf:"fixed64,7,opt,name=pnl,proto3" json:"pnl,omitempty"`
	YdQuantity           int32                  `protobuf:"varint,8,opt,name=yd_quantity,json=ydQuantity,proto3" json:"yd_quantity,omitempty"`
	Cond                 string                 `protobuf:"bytes,9,opt,name=cond,proto3" json:"cond,omitempty"`
	MarginPurchaseAmount int32                  `protobuf:"varint,10,opt,name=margin_purchase_amount,json=marginPurchaseAmount,proto3" json:"margin_purchase_amount,omitempty"`
	Collateral           int32                  `protobuf:"varint,11,opt,name=collateral,proto3" json:"collateral,omitempty"`
	ShortSaleMargin      int32                  `protobuf:"varint,12,opt,name=short_sale_margin,json=shortSaleMargin,proto3" json:"short_sale_margin,omitempty"`
	Interest             int32                  `protobuf:"varint,13,opt,name=interest,proto3" json:"interest,omitempty"`
	DetailArr            []*StockPositionDetail `protobuf:"bytes,14,rep,name=detail_arr,json=detailArr,proto3" json:"detail_arr,omitempty"`
}

func (x *StockPosition) Reset() {
	*x = StockPosition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_forwarder_trade_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StockPosition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StockPosition) ProtoMessage() {}

func (x *StockPosition) ProtoReflect() protoreflect.Message {
	mi := &file_forwarder_trade_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StockPosition.ProtoReflect.Descriptor instead.
func (*StockPosition) Descriptor() ([]byte, []int) {
	return file_forwarder_trade_proto_rawDescGZIP(), []int{2}
}

func (x *StockPosition) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *StockPosition) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *StockPosition) GetDirection() string {
	if x != nil {
		return x.Direction
	}
	return ""
}

func (x *StockPosition) GetQuantity() int32 {
	if x != nil {
		return x.Quantity
	}
	return 0
}

func (x *StockPosition) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *StockPosition) GetLastPrice() float64 {
	if x != nil {
		return x.LastPrice
	}
	return 0
}

func (x *StockPosition) GetPnl() float64 {
	if x != nil {
		return x.Pnl
	}
	return 0
}

func (x *StockPosition) GetYdQuantity() int32 {
	if x != nil {
		return x.YdQuantity
	}
	return 0
}

func (x *StockPosition) GetCond() string {
	if x != nil {
		return x.Cond
	}
	return ""
}

func (x *StockPosition) GetMarginPurchaseAmount() int32 {
	if x != nil {
		return x.MarginPurchaseAmount
	}
	return 0
}

func (x *StockPosition) GetCollateral() int32 {
	if x != nil {
		return x.Collateral
	}
	return 0
}

func (x *StockPosition) GetShortSaleMargin() int32 {
	if x != nil {
		return x.ShortSaleMargin
	}
	return 0
}

func (x *StockPosition) GetInterest() int32 {
	if x != nil {
		return x.Interest
	}
	return 0
}

func (x *StockPosition) GetDetailArr() []*StockPositionDetail {
	if x != nil {
		return x.DetailArr
	}
	return nil
}

type StockPositionArr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PositionArr []*StockPosition `protobuf:"bytes,1,rep,name=position_arr,json=positionArr,proto3" json:"position_arr,omitempty"`
}

func (x *StockPositionArr) Reset() {
	*x = StockPositionArr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_forwarder_trade_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StockPositionArr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StockPositionArr) ProtoMessage() {}

func (x *StockPositionArr) ProtoReflect() protoreflect.Message {
	mi := &file_forwarder_trade_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StockPositionArr.ProtoReflect.Descriptor instead.
func (*StockPositionArr) Descriptor() ([]byte, []int) {
	return file_forwarder_trade_proto_rawDescGZIP(), []int{3}
}

func (x *StockPositionArr) GetPositionArr() []*StockPosition {
	if x != nil {
		return x.PositionArr
	}
	return nil
}

// StockPositionDetail(date = '2024-01-04', code = '2344', quantity = 0, price =
// 147.0, last_price = 134.0, dseq = 'IC320', direction = <Action.Buy: 'Buy'>,
// pnl = -13.0, currency = <Currency.TWD: 'TWD'>, fee = 1.0)
type StockPositionDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Date      string  `protobuf:"bytes,1,opt,name=date,proto3" json:"date,omitempty"`
	Code      string  `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
	Quantity  int32   `protobuf:"varint,3,opt,name=quantity,proto3" json:"quantity,omitempty"`
	Price     float64 `protobuf:"fixed64,4,opt,name=price,proto3" json:"price,omitempty"`
	LastPrice float64 `protobuf:"fixed64,5,opt,name=last_price,json=lastPrice,proto3" json:"last_price,omitempty"`
	Dseq      string  `protobuf:"bytes,6,opt,name=dseq,proto3" json:"dseq,omitempty"`
	Direction string  `protobuf:"bytes,7,opt,name=direction,proto3" json:"direction,omitempty"`
	Pnl       float64 `protobuf:"fixed64,8,opt,name=pnl,proto3" json:"pnl,omitempty"`
	Currency  string  `protobuf:"bytes,9,opt,name=currency,proto3" json:"currency,omitempty"`
	Fee       float64 `protobuf:"fixed64,10,opt,name=fee,proto3" json:"fee,omitempty"`
}

func (x *StockPositionDetail) Reset() {
	*x = StockPositionDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_forwarder_trade_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StockPositionDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StockPositionDetail) ProtoMessage() {}

func (x *StockPositionDetail) ProtoReflect() protoreflect.Message {
	mi := &file_forwarder_trade_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StockPositionDetail.ProtoReflect.Descriptor instead.
func (*StockPositionDetail) Descriptor() ([]byte, []int) {
	return file_forwarder_trade_proto_rawDescGZIP(), []int{4}
}

func (x *StockPositionDetail) GetDate() string {
	if x != nil {
		return x.Date
	}
	return ""
}

func (x *StockPositionDetail) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *StockPositionDetail) GetQuantity() int32 {
	if x != nil {
		return x.Quantity
	}
	return 0
}

func (x *StockPositionDetail) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *StockPositionDetail) GetLastPrice() float64 {
	if x != nil {
		return x.LastPrice
	}
	return 0
}

func (x *StockPositionDetail) GetDseq() string {
	if x != nil {
		return x.Dseq
	}
	return ""
}

func (x *StockPositionDetail) GetDirection() string {
	if x != nil {
		return x.Direction
	}
	return ""
}

func (x *StockPositionDetail) GetPnl() float64 {
	if x != nil {
		return x.Pnl
	}
	return 0
}

func (x *StockPositionDetail) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *StockPositionDetail) GetFee() float64 {
	if x != nil {
		return x.Fee
	}
	return 0
}

type StockOrderDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StockNum string  `protobuf:"bytes,1,opt,name=stock_num,json=stockNum,proto3" json:"stock_num,omitempty"`
	Price    float64 `protobuf:"fixed64,2,opt,name=price,proto3" json:"price,omitempty"`
	Quantity int64   `protobuf:"varint,3,opt,name=quantity,proto3" json:"quantity,omitempty"`
	Simulate bool    `protobuf:"varint,4,opt,name=simulate,proto3" json:"simulate,omitempty"`
}

func (x *StockOrderDetail) Reset() {
	*x = StockOrderDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_forwarder_trade_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StockOrderDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StockOrderDetail) ProtoMessage() {}

func (x *StockOrderDetail) ProtoReflect() protoreflect.Message {
	mi := &file_forwarder_trade_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StockOrderDetail.ProtoReflect.Descriptor instead.
func (*StockOrderDetail) Descriptor() ([]byte, []int) {
	return file_forwarder_trade_proto_rawDescGZIP(), []int{5}
}

func (x *StockOrderDetail) GetStockNum() string {
	if x != nil {
		return x.StockNum
	}
	return ""
}

func (x *StockOrderDetail) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *StockOrderDetail) GetQuantity() int64 {
	if x != nil {
		return x.Quantity
	}
	return 0
}

func (x *StockOrderDetail) GetSimulate() bool {
	if x != nil {
		return x.Simulate
	}
	return false
}

type OddStockOrderDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StockNum string  `protobuf:"bytes,1,opt,name=stock_num,json=stockNum,proto3" json:"stock_num,omitempty"`
	Price    float64 `protobuf:"fixed64,2,opt,name=price,proto3" json:"price,omitempty"`
	Share    int64   `protobuf:"varint,3,opt,name=share,proto3" json:"share,omitempty"`
}

func (x *OddStockOrderDetail) Reset() {
	*x = OddStockOrderDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_forwarder_trade_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OddStockOrderDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OddStockOrderDetail) ProtoMessage() {}

func (x *OddStockOrderDetail) ProtoReflect() protoreflect.Message {
	mi := &file_forwarder_trade_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OddStockOrderDetail.ProtoReflect.Descriptor instead.
func (*OddStockOrderDetail) Descriptor() ([]byte, []int) {
	return file_forwarder_trade_proto_rawDescGZIP(), []int{6}
}

func (x *OddStockOrderDetail) GetStockNum() string {
	if x != nil {
		return x.StockNum
	}
	return ""
}

func (x *OddStockOrderDetail) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *OddStockOrderDetail) GetShare() int64 {
	if x != nil {
		return x.Share
	}
	return 0
}

type FutureOrderDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code     string  `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	Price    float64 `protobuf:"fixed64,2,opt,name=price,proto3" json:"price,omitempty"`
	Quantity int64   `protobuf:"varint,3,opt,name=quantity,proto3" json:"quantity,omitempty"`
	Simulate bool    `protobuf:"varint,4,opt,name=simulate,proto3" json:"simulate,omitempty"`
}

func (x *FutureOrderDetail) Reset() {
	*x = FutureOrderDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_forwarder_trade_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FutureOrderDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FutureOrderDetail) ProtoMessage() {}

func (x *FutureOrderDetail) ProtoReflect() protoreflect.Message {
	mi := &file_forwarder_trade_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FutureOrderDetail.ProtoReflect.Descriptor instead.
func (*FutureOrderDetail) Descriptor() ([]byte, []int) {
	return file_forwarder_trade_proto_rawDescGZIP(), []int{7}
}

func (x *FutureOrderDetail) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *FutureOrderDetail) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *FutureOrderDetail) GetQuantity() int64 {
	if x != nil {
		return x.Quantity
	}
	return 0
}

func (x *FutureOrderDetail) GetSimulate() bool {
	if x != nil {
		return x.Simulate
	}
	return false
}

type OptionOrderDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code     string  `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	Price    float64 `protobuf:"fixed64,2,opt,name=price,proto3" json:"price,omitempty"`
	Quantity int64   `protobuf:"varint,3,opt,name=quantity,proto3" json:"quantity,omitempty"`
	Simulate bool    `protobuf:"varint,4,opt,name=simulate,proto3" json:"simulate,omitempty"`
}

func (x *OptionOrderDetail) Reset() {
	*x = OptionOrderDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_forwarder_trade_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OptionOrderDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OptionOrderDetail) ProtoMessage() {}

func (x *OptionOrderDetail) ProtoReflect() protoreflect.Message {
	mi := &file_forwarder_trade_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OptionOrderDetail.ProtoReflect.Descriptor instead.
func (*OptionOrderDetail) Descriptor() ([]byte, []int) {
	return file_forwarder_trade_proto_rawDescGZIP(), []int{8}
}

func (x *OptionOrderDetail) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *OptionOrderDetail) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *OptionOrderDetail) GetQuantity() int64 {
	if x != nil {
		return x.Quantity
	}
	return 0
}

func (x *OptionOrderDetail) GetSimulate() bool {
	if x != nil {
		return x.Simulate
	}
	return false
}

type TradeResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrderId string `protobuf:"bytes,1,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
	Status  string `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	Error   string `protobuf:"bytes,3,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *TradeResult) Reset() {
	*x = TradeResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_forwarder_trade_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TradeResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TradeResult) ProtoMessage() {}

func (x *TradeResult) ProtoReflect() protoreflect.Message {
	mi := &file_forwarder_trade_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TradeResult.ProtoReflect.Descriptor instead.
func (*TradeResult) Descriptor() ([]byte, []int) {
	return file_forwarder_trade_proto_rawDescGZIP(), []int{9}
}

func (x *TradeResult) GetOrderId() string {
	if x != nil {
		return x.OrderId
	}
	return ""
}

func (x *TradeResult) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *TradeResult) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type OrderID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrderId  string `protobuf:"bytes,1,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
	Simulate bool   `protobuf:"varint,2,opt,name=simulate,proto3" json:"simulate,omitempty"`
}

func (x *OrderID) Reset() {
	*x = OrderID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_forwarder_trade_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderID) ProtoMessage() {}

func (x *OrderID) ProtoReflect() protoreflect.Message {
	mi := &file_forwarder_trade_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderID.ProtoReflect.Descriptor instead.
func (*OrderID) Descriptor() ([]byte, []int) {
	return file_forwarder_trade_proto_rawDescGZIP(), []int{10}
}

func (x *OrderID) GetOrderId() string {
	if x != nil {
		return x.OrderId
	}
	return ""
}

func (x *OrderID) GetSimulate() bool {
	if x != nil {
		return x.Simulate
	}
	return false
}

// status(FetchStatus): 資料回傳狀態
// yesterday_balance(float): 前日餘額
// today_balance(float): 今日餘額
// deposit_withdrawal(float): 存提
// fee(float): 手續費
// tax(float): 期交稅
// initial_margin(float): 原始保證金
// maintenance_margin(float): 維持保證金
// margin_call(float): 追繳保證金
// risk_indicator(float): 風險指標
// royalty_revenue_expenditure(float): 權利金收入與支出
// equity(float): 權益數
// equity_amount(float): 權益總值
// option_openbuy_market_value(float): 未沖銷買方選擇權市值
// option_opensell_market_value(float): 未沖銷賣方選擇權市值
// option_open_position(float): 參考未平倉選擇權損益
// option_settle_profitloss(float): 參考選擇權平倉損益
// future_open_position(float): 未沖銷期貨浮動損益
// today_future_open_position(float): 參考當日未沖銷期貨浮動損益
// future_settle_profitloss(float): 期貨平倉損益
// available_margin(float): 可動用(出金) 保證金
// plus_margin(float): 依「加收保證金指標」所加收之保證金
// plus_margin_indicator(float): 加收保證金指標
// security_collateral_amount(float): 有價證券抵繳總額
// order_margin_premium(float): 委託保證金及委託權利金
// collateral_amount(float): 有價品額
type Margin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status                    string  `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	YesterdayBalance          float64 `protobuf:"fixed64,2,opt,name=yesterday_balance,json=yesterdayBalance,proto3" json:"yesterday_balance,omitempty"`
	TodayBalance              float64 `protobuf:"fixed64,3,opt,name=today_balance,json=todayBalance,proto3" json:"today_balance,omitempty"`
	DepositWithdrawal         float64 `protobuf:"fixed64,4,opt,name=deposit_withdrawal,json=depositWithdrawal,proto3" json:"deposit_withdrawal,omitempty"`
	Fee                       float64 `protobuf:"fixed64,5,opt,name=fee,proto3" json:"fee,omitempty"`
	Tax                       float64 `protobuf:"fixed64,6,opt,name=tax,proto3" json:"tax,omitempty"`
	InitialMargin             float64 `protobuf:"fixed64,7,opt,name=initial_margin,json=initialMargin,proto3" json:"initial_margin,omitempty"`
	MaintenanceMargin         float64 `protobuf:"fixed64,8,opt,name=maintenance_margin,json=maintenanceMargin,proto3" json:"maintenance_margin,omitempty"`
	MarginCall                float64 `protobuf:"fixed64,9,opt,name=margin_call,json=marginCall,proto3" json:"margin_call,omitempty"`
	RiskIndicator             float64 `protobuf:"fixed64,10,opt,name=risk_indicator,json=riskIndicator,proto3" json:"risk_indicator,omitempty"`
	RoyaltyRevenueExpenditure float64 `protobuf:"fixed64,11,opt,name=royalty_revenue_expenditure,json=royaltyRevenueExpenditure,proto3" json:"royalty_revenue_expenditure,omitempty"`
	Equity                    float64 `protobuf:"fixed64,12,opt,name=equity,proto3" json:"equity,omitempty"`
	EquityAmount              float64 `protobuf:"fixed64,13,opt,name=equity_amount,json=equityAmount,proto3" json:"equity_amount,omitempty"`
	OptionOpenbuyMarketValue  float64 `protobuf:"fixed64,14,opt,name=option_openbuy_market_value,json=optionOpenbuyMarketValue,proto3" json:"option_openbuy_market_value,omitempty"`
	OptionOpensellMarketValue float64 `protobuf:"fixed64,15,opt,name=option_opensell_market_value,json=optionOpensellMarketValue,proto3" json:"option_opensell_market_value,omitempty"`
	OptionOpenPosition        float64 `protobuf:"fixed64,16,opt,name=option_open_position,json=optionOpenPosition,proto3" json:"option_open_position,omitempty"`
	OptionSettleProfitloss    float64 `protobuf:"fixed64,17,opt,name=option_settle_profitloss,json=optionSettleProfitloss,proto3" json:"option_settle_profitloss,omitempty"`
	FutureOpenPosition        float64 `protobuf:"fixed64,18,opt,name=future_open_position,json=futureOpenPosition,proto3" json:"future_open_position,omitempty"`
	TodayFutureOpenPosition   float64 `protobuf:"fixed64,19,opt,name=today_future_open_position,json=todayFutureOpenPosition,proto3" json:"today_future_open_position,omitempty"`
	FutureSettleProfitloss    float64 `protobuf:"fixed64,20,opt,name=future_settle_profitloss,json=futureSettleProfitloss,proto3" json:"future_settle_profitloss,omitempty"`
	AvailableMargin           float64 `protobuf:"fixed64,21,opt,name=available_margin,json=availableMargin,proto3" json:"available_margin,omitempty"`
	PlusMargin                float64 `protobuf:"fixed64,22,opt,name=plus_margin,json=plusMargin,proto3" json:"plus_margin,omitempty"`
	PlusMarginIndicator       float64 `protobuf:"fixed64,23,opt,name=plus_margin_indicator,json=plusMarginIndicator,proto3" json:"plus_margin_indicator,omitempty"`
	SecurityCollateralAmount  float64 `protobuf:"fixed64,24,opt,name=security_collateral_amount,json=securityCollateralAmount,proto3" json:"security_collateral_amount,omitempty"`
	OrderMarginPremium        float64 `protobuf:"fixed64,25,opt,name=order_margin_premium,json=orderMarginPremium,proto3" json:"order_margin_premium,omitempty"`
	CollateralAmount          float64 `protobuf:"fixed64,26,opt,name=collateral_amount,json=collateralAmount,proto3" json:"collateral_amount,omitempty"`
}

func (x *Margin) Reset() {
	*x = Margin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_forwarder_trade_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Margin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Margin) ProtoMessage() {}

func (x *Margin) ProtoReflect() protoreflect.Message {
	mi := &file_forwarder_trade_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Margin.ProtoReflect.Descriptor instead.
func (*Margin) Descriptor() ([]byte, []int) {
	return file_forwarder_trade_proto_rawDescGZIP(), []int{11}
}

func (x *Margin) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *Margin) GetYesterdayBalance() float64 {
	if x != nil {
		return x.YesterdayBalance
	}
	return 0
}

func (x *Margin) GetTodayBalance() float64 {
	if x != nil {
		return x.TodayBalance
	}
	return 0
}

func (x *Margin) GetDepositWithdrawal() float64 {
	if x != nil {
		return x.DepositWithdrawal
	}
	return 0
}

func (x *Margin) GetFee() float64 {
	if x != nil {
		return x.Fee
	}
	return 0
}

func (x *Margin) GetTax() float64 {
	if x != nil {
		return x.Tax
	}
	return 0
}

func (x *Margin) GetInitialMargin() float64 {
	if x != nil {
		return x.InitialMargin
	}
	return 0
}

func (x *Margin) GetMaintenanceMargin() float64 {
	if x != nil {
		return x.MaintenanceMargin
	}
	return 0
}

func (x *Margin) GetMarginCall() float64 {
	if x != nil {
		return x.MarginCall
	}
	return 0
}

func (x *Margin) GetRiskIndicator() float64 {
	if x != nil {
		return x.RiskIndicator
	}
	return 0
}

func (x *Margin) GetRoyaltyRevenueExpenditure() float64 {
	if x != nil {
		return x.RoyaltyRevenueExpenditure
	}
	return 0
}

func (x *Margin) GetEquity() float64 {
	if x != nil {
		return x.Equity
	}
	return 0
}

func (x *Margin) GetEquityAmount() float64 {
	if x != nil {
		return x.EquityAmount
	}
	return 0
}

func (x *Margin) GetOptionOpenbuyMarketValue() float64 {
	if x != nil {
		return x.OptionOpenbuyMarketValue
	}
	return 0
}

func (x *Margin) GetOptionOpensellMarketValue() float64 {
	if x != nil {
		return x.OptionOpensellMarketValue
	}
	return 0
}

func (x *Margin) GetOptionOpenPosition() float64 {
	if x != nil {
		return x.OptionOpenPosition
	}
	return 0
}

func (x *Margin) GetOptionSettleProfitloss() float64 {
	if x != nil {
		return x.OptionSettleProfitloss
	}
	return 0
}

func (x *Margin) GetFutureOpenPosition() float64 {
	if x != nil {
		return x.FutureOpenPosition
	}
	return 0
}

func (x *Margin) GetTodayFutureOpenPosition() float64 {
	if x != nil {
		return x.TodayFutureOpenPosition
	}
	return 0
}

func (x *Margin) GetFutureSettleProfitloss() float64 {
	if x != nil {
		return x.FutureSettleProfitloss
	}
	return 0
}

func (x *Margin) GetAvailableMargin() float64 {
	if x != nil {
		return x.AvailableMargin
	}
	return 0
}

func (x *Margin) GetPlusMargin() float64 {
	if x != nil {
		return x.PlusMargin
	}
	return 0
}

func (x *Margin) GetPlusMarginIndicator() float64 {
	if x != nil {
		return x.PlusMarginIndicator
	}
	return 0
}

func (x *Margin) GetSecurityCollateralAmount() float64 {
	if x != nil {
		return x.SecurityCollateralAmount
	}
	return 0
}

func (x *Margin) GetOrderMarginPremium() float64 {
	if x != nil {
		return x.OrderMarginPremium
	}
	return 0
}

func (x *Margin) GetCollateralAmount() float64 {
	if x != nil {
		return x.CollateralAmount
	}
	return 0
}

// status(FetchStatus): 資料回傳狀態
// acc_balance(float): 餘額
// date(str): 查詢日期
// errmsg(str): 錯誤訊息
type AccountBalance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Date    string  `protobuf:"bytes,1,opt,name=date,proto3" json:"date,omitempty"`
	Balance float64 `protobuf:"fixed64,2,opt,name=balance,proto3" json:"balance,omitempty"`
}

func (x *AccountBalance) Reset() {
	*x = AccountBalance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_forwarder_trade_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountBalance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountBalance) ProtoMessage() {}

func (x *AccountBalance) ProtoReflect() protoreflect.Message {
	mi := &file_forwarder_trade_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountBalance.ProtoReflect.Descriptor instead.
func (*AccountBalance) Descriptor() ([]byte, []int) {
	return file_forwarder_trade_proto_rawDescGZIP(), []int{12}
}

func (x *AccountBalance) GetDate() string {
	if x != nil {
		return x.Date
	}
	return ""
}

func (x *AccountBalance) GetBalance() float64 {
	if x != nil {
		return x.Balance
	}
	return 0
}

// date(datetime.date): 交割日期
// amount(float): 交割金額
// T(int): Tday
type Settlement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Date   string  `protobuf:"bytes,1,opt,name=date,proto3" json:"date,omitempty"`
	Amount float64 `protobuf:"fixed64,2,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (x *Settlement) Reset() {
	*x = Settlement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_forwarder_trade_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Settlement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Settlement) ProtoMessage() {}

func (x *Settlement) ProtoReflect() protoreflect.Message {
	mi := &file_forwarder_trade_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Settlement.ProtoReflect.Descriptor instead.
func (*Settlement) Descriptor() ([]byte, []int) {
	return file_forwarder_trade_proto_rawDescGZIP(), []int{13}
}

func (x *Settlement) GetDate() string {
	if x != nil {
		return x.Date
	}
	return ""
}

func (x *Settlement) GetAmount() float64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

type SettlementList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Settlement []*Settlement `protobuf:"bytes,1,rep,name=settlement,proto3" json:"settlement,omitempty"`
}

func (x *SettlementList) Reset() {
	*x = SettlementList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_forwarder_trade_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SettlementList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SettlementList) ProtoMessage() {}

func (x *SettlementList) ProtoReflect() protoreflect.Message {
	mi := &file_forwarder_trade_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SettlementList.ProtoReflect.Descriptor instead.
func (*SettlementList) Descriptor() ([]byte, []int) {
	return file_forwarder_trade_proto_rawDescGZIP(), []int{14}
}

func (x *SettlementList) GetSettlement() []*Settlement {
	if x != nil {
		return x.Settlement
	}
	return nil
}

var File_forwarder_trade_proto protoreflect.FileDescriptor

var file_forwarder_trade_proto_rawDesc = []byte{
	0x0a, 0x15, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x72, 0x2f, 0x74, 0x72, 0x61, 0x64,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x09, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64,
	0x65, 0x72, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0xa5, 0x01, 0x0a, 0x0e, 0x46, 0x75, 0x74, 0x75, 0x72, 0x65, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x6c, 0x61, 0x73, 0x74,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x6e, 0x6c, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x03, 0x70, 0x6e, 0x6c, 0x22, 0x51, 0x0a, 0x11, 0x46, 0x75, 0x74, 0x75, 0x72,
	0x65, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x72, 0x72, 0x12, 0x3c, 0x0a, 0x0c,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x72, 0x72, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x46,
	0x75, 0x74, 0x75, 0x72, 0x65, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x72, 0x72, 0x22, 0xc6, 0x03, 0x0a, 0x0d, 0x53,
	0x74, 0x6f, 0x63, 0x6b, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a,
	0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12,
	0x10, 0x0a, 0x03, 0x70, 0x6e, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x70, 0x6e,
	0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x79, 0x64, 0x5f, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x79, 0x64, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x6e, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x63, 0x6f, 0x6e, 0x64, 0x12, 0x34, 0x0a, 0x16, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e,
	0x5f, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x14, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x50, 0x75,
	0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a,
	0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0a, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x12, 0x2a, 0x0a, 0x11,
	0x73, 0x68, 0x6f, 0x72, 0x74, 0x5f, 0x73, 0x61, 0x6c, 0x65, 0x5f, 0x6d, 0x61, 0x72, 0x67, 0x69,
	0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x53, 0x61,
	0x6c, 0x65, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x65, 0x73, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x65, 0x73, 0x74, 0x12, 0x3d, 0x0a, 0x0a, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x5f, 0x61,
	0x72, 0x72, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x66, 0x6f, 0x72, 0x77, 0x61,
	0x72, 0x64, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x09, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x41, 0x72, 0x72, 0x22, 0x4f, 0x0a, 0x10, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x50, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x41, 0x72, 0x72, 0x12, 0x3b, 0x0a, 0x0c, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x72, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x50,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x41, 0x72, 0x72, 0x22, 0x80, 0x02, 0x0a, 0x13, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x50, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x12, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x6c, 0x61, 0x73, 0x74,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x73, 0x65, 0x71, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x73, 0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x6e, 0x6c, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x70, 0x6e, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x66, 0x65, 0x65, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x03, 0x66, 0x65, 0x65, 0x22, 0x7d, 0x0a, 0x10, 0x53, 0x74, 0x6f, 0x63, 0x6b,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x73,
	0x74, 0x6f, 0x63, 0x6b, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x73, 0x74, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x69,
	0x6d, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x73, 0x69,
	0x6d, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x22, 0x5e, 0x0a, 0x13, 0x4f, 0x64, 0x64, 0x53, 0x74, 0x6f,
	0x63, 0x6b, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x1b, 0x0a,
	0x09, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x73, 0x68, 0x61, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x73, 0x68, 0x61, 0x72, 0x65, 0x22, 0x75, 0x0a, 0x11, 0x46, 0x75, 0x74, 0x75, 0x72, 0x65,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05,
	0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x69, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x08, 0x73, 0x69, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x22, 0x75, 0x0a,
	0x11, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08,
	0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x69, 0x6d, 0x75,
	0x6c, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x73, 0x69, 0x6d, 0x75,
	0x6c, 0x61, 0x74, 0x65, 0x22, 0x56, 0x0a, 0x0b, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x40, 0x0a, 0x07,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x44, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x69, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x73, 0x69, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x22, 0x92,
	0x09, 0x0a, 0x06, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x2b, 0x0a, 0x11, 0x79, 0x65, 0x73, 0x74, 0x65, 0x72, 0x64, 0x61, 0x79, 0x5f, 0x62,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x79, 0x65,
	0x73, 0x74, 0x65, 0x72, 0x64, 0x61, 0x79, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x23,
	0x0a, 0x0d, 0x74, 0x6f, 0x64, 0x61, 0x79, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x74, 0x6f, 0x64, 0x61, 0x79, 0x42, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x12, 0x2d, 0x0a, 0x12, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x5f, 0x77,
	0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x11, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77,
	0x61, 0x6c, 0x12, 0x10, 0x0a, 0x03, 0x66, 0x65, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x03, 0x66, 0x65, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x61, 0x78, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x03, 0x74, 0x61, 0x78, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61,
	0x6c, 0x5f, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x12, 0x2d, 0x0a,
	0x12, 0x6d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6d, 0x61, 0x72,
	0x67, 0x69, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x6d, 0x61, 0x69, 0x6e, 0x74,
	0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x12, 0x1f, 0x0a, 0x0b,
	0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0a, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x25, 0x0a,
	0x0e, 0x72, 0x69, 0x73, 0x6b, 0x5f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x72, 0x69, 0x73, 0x6b, 0x49, 0x6e, 0x64, 0x69, 0x63,
	0x61, 0x74, 0x6f, 0x72, 0x12, 0x3e, 0x0a, 0x1b, 0x72, 0x6f, 0x79, 0x61, 0x6c, 0x74, 0x79, 0x5f,
	0x72, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x5f, 0x65, 0x78, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x74,
	0x75, 0x72, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x19, 0x72, 0x6f, 0x79, 0x61, 0x6c,
	0x74, 0x79, 0x52, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x45, 0x78, 0x70, 0x65, 0x6e, 0x64, 0x69,
	0x74, 0x75, 0x72, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x71, 0x75, 0x69, 0x74, 0x79, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x65, 0x71, 0x75, 0x69, 0x74, 0x79, 0x12, 0x23, 0x0a, 0x0d,
	0x65, 0x71, 0x75, 0x69, 0x74, 0x79, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0c, 0x65, 0x71, 0x75, 0x69, 0x74, 0x79, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x3d, 0x0a, 0x1b, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x70, 0x65, 0x6e,
	0x62, 0x75, 0x79, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x01, 0x52, 0x18, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70,
	0x65, 0x6e, 0x62, 0x75, 0x79, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x3f, 0x0a, 0x1c, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x73,
	0x65, 0x6c, 0x6c, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x01, 0x52, 0x19, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70,
	0x65, 0x6e, 0x73, 0x65, 0x6c, 0x6c, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x30, 0x0a, 0x14, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x70, 0x65, 0x6e,
	0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x10, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x12, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x65, 0x6e, 0x50, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x18, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65,
	0x74, 0x74, 0x6c, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x6c, 0x6f, 0x73, 0x73, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x01, 0x52, 0x16, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74,
	0x74, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x6c, 0x6f, 0x73, 0x73, 0x12, 0x30, 0x0a,
	0x14, 0x66, 0x75, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x12, 0x20, 0x01, 0x28, 0x01, 0x52, 0x12, 0x66, 0x75, 0x74,
	0x75, 0x72, 0x65, 0x4f, 0x70, 0x65, 0x6e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x3b, 0x0a, 0x1a, 0x74, 0x6f, 0x64, 0x61, 0x79, 0x5f, 0x66, 0x75, 0x74, 0x75, 0x72, 0x65, 0x5f,
	0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x13, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x17, 0x74, 0x6f, 0x64, 0x61, 0x79, 0x46, 0x75, 0x74, 0x75, 0x72, 0x65,
	0x4f, 0x70, 0x65, 0x6e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x18,
	0x66, 0x75, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x5f, 0x70, 0x72,
	0x6f, 0x66, 0x69, 0x74, 0x6c, 0x6f, 0x73, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28, 0x01, 0x52, 0x16,
	0x66, 0x75, 0x74, 0x75, 0x72, 0x65, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x74, 0x6c, 0x6f, 0x73, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61,
	0x62, 0x6c, 0x65, 0x5f, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x18, 0x15, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x61, 0x72, 0x67, 0x69,
	0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x6c, 0x75, 0x73, 0x5f, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e,
	0x18, 0x16, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x70, 0x6c, 0x75, 0x73, 0x4d, 0x61, 0x72, 0x67,
	0x69, 0x6e, 0x12, 0x32, 0x0a, 0x15, 0x70, 0x6c, 0x75, 0x73, 0x5f, 0x6d, 0x61, 0x72, 0x67, 0x69,
	0x6e, 0x5f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x17, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x13, 0x70, 0x6c, 0x75, 0x73, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x49, 0x6e, 0x64,
	0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x3c, 0x0a, 0x1a, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69,
	0x74, 0x79, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x5f, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x18, 0x20, 0x01, 0x28, 0x01, 0x52, 0x18, 0x73, 0x65, 0x63, 0x75,
	0x72, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x14, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6d, 0x61,
	0x72, 0x67, 0x69, 0x6e, 0x5f, 0x70, 0x72, 0x65, 0x6d, 0x69, 0x75, 0x6d, 0x18, 0x19, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x12, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x50,
	0x72, 0x65, 0x6d, 0x69, 0x75, 0x6d, 0x12, 0x2b, 0x0a, 0x11, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x74,
	0x65, 0x72, 0x61, 0x6c, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x1a, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x10, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x22, 0x3e, 0x0a, 0x0e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x61,
	0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x62, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x22, 0x38, 0x0a, 0x0a, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x47, 0x0a,
	0x0e, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x35, 0x0a, 0x0a, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x72, 0x2e,
	0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0a, 0x73, 0x65, 0x74, 0x74,
	0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x32, 0xd9, 0x0a, 0x0a, 0x0e, 0x54, 0x72, 0x61, 0x64, 0x65,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x43, 0x61, 0x6e,
	0x63, 0x65, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x12, 0x2e, 0x66, 0x6f, 0x72, 0x77, 0x61,
	0x72, 0x64, 0x65, 0x72, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x44, 0x1a, 0x16, 0x2e, 0x66,
	0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x41, 0x0a, 0x08, 0x42, 0x75, 0x79, 0x53, 0x74, 0x6f,
	0x63, 0x6b, 0x12, 0x1b, 0x2e, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x53,
	0x74, 0x6f, 0x63, 0x6b, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x1a,
	0x16, 0x2e, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x54, 0x72, 0x61, 0x64,
	0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x42, 0x0a, 0x09, 0x53, 0x65, 0x6c,
	0x6c, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x12, 0x1b, 0x2e, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64,
	0x65, 0x72, 0x2e, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x1a, 0x16, 0x2e, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x72, 0x2e,
	0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x47, 0x0a,
	0x0b, 0x42, 0x75, 0x79, 0x4f, 0x64, 0x64, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x12, 0x1e, 0x2e, 0x66,
	0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x4f, 0x64, 0x64, 0x53, 0x74, 0x6f, 0x63,
	0x6b, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x1a, 0x16, 0x2e, 0x66,
	0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x48, 0x0a, 0x0c, 0x53, 0x65, 0x6c, 0x6c, 0x4f, 0x64,
	0x64, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x12, 0x1e, 0x2e, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64,
	0x65, 0x72, 0x2e, 0x4f, 0x64, 0x64, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x1a, 0x16, 0x2e, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64,
	0x65, 0x72, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00,
	0x12, 0x47, 0x0a, 0x0e, 0x53, 0x65, 0x6c, 0x6c, 0x46, 0x69, 0x72, 0x73, 0x74, 0x53, 0x74, 0x6f,
	0x63, 0x6b, 0x12, 0x1b, 0x2e, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x53,
	0x74, 0x6f, 0x63, 0x6b, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x1a,
	0x16, 0x2e, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x54, 0x72, 0x61, 0x64,
	0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x43, 0x0a, 0x09, 0x42, 0x75, 0x79,
	0x46, 0x75, 0x74, 0x75, 0x72, 0x65, 0x12, 0x1c, 0x2e, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64,
	0x65, 0x72, 0x2e, 0x46, 0x75, 0x74, 0x75, 0x72, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x1a, 0x16, 0x2e, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x72,
	0x2e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x44,
	0x0a, 0x0a, 0x53, 0x65, 0x6c, 0x6c, 0x46, 0x75, 0x74, 0x75, 0x72, 0x65, 0x12, 0x1c, 0x2e, 0x66,
	0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x46, 0x75, 0x74, 0x75, 0x72, 0x65, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x1a, 0x16, 0x2e, 0x66, 0x6f, 0x72,
	0x77, 0x61, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x22, 0x00, 0x12, 0x49, 0x0a, 0x0f, 0x53, 0x65, 0x6c, 0x6c, 0x46, 0x69, 0x72, 0x73,
	0x74, 0x46, 0x75, 0x74, 0x75, 0x72, 0x65, 0x12, 0x1c, 0x2e, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72,
	0x64, 0x65, 0x72, 0x2e, 0x46, 0x75, 0x74, 0x75, 0x72, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x1a, 0x16, 0x2e, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65,
	0x72, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12,
	0x43, 0x0a, 0x09, 0x42, 0x75, 0x79, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x2e, 0x66,
	0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x1a, 0x16, 0x2e, 0x66, 0x6f, 0x72,
	0x77, 0x61, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x22, 0x00, 0x12, 0x44, 0x0a, 0x0a, 0x53, 0x65, 0x6c, 0x6c, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x1c, 0x2e, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x1a, 0x16, 0x2e, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x54, 0x72, 0x61,
	0x64, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x49, 0x0a, 0x0f, 0x53, 0x65,
	0x6c, 0x6c, 0x46, 0x69, 0x72, 0x73, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x2e,
	0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x1a, 0x16, 0x2e, 0x66, 0x6f,
	0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x4a, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x63, 0x61,
	0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x41, 0x72, 0x72, 0x12,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22,
	0x00, 0x12, 0x4d, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x53, 0x69, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x65,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x41, 0x72, 0x72, 0x12, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00,
	0x12, 0x4b, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x46, 0x75, 0x74, 0x75, 0x72, 0x65, 0x50, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x1c, 0x2e,
	0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x46, 0x75, 0x74, 0x75, 0x72, 0x65,
	0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x72, 0x72, 0x22, 0x00, 0x12, 0x49, 0x0a,
	0x10, 0x47, 0x65, 0x74, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x1b, 0x2e, 0x66, 0x6f, 0x72, 0x77,
	0x61, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x50, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x41, 0x72, 0x72, 0x22, 0x00, 0x12, 0x44, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x53,
	0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x1a, 0x19, 0x2e, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x53, 0x65,
	0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x00, 0x12, 0x48,
	0x0a, 0x11, 0x47, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x19, 0x2e, 0x66, 0x6f,
	0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x22, 0x00, 0x12, 0x38, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x4d,
	0x61, 0x72, 0x67, 0x69, 0x6e, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x11, 0x2e,
	0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e,
	0x22, 0x00, 0x42, 0x06, 0x5a, 0x04, 0x2e, 0x2f, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_forwarder_trade_proto_rawDescOnce sync.Once
	file_forwarder_trade_proto_rawDescData = file_forwarder_trade_proto_rawDesc
)

func file_forwarder_trade_proto_rawDescGZIP() []byte {
	file_forwarder_trade_proto_rawDescOnce.Do(func() {
		file_forwarder_trade_proto_rawDescData = protoimpl.X.CompressGZIP(file_forwarder_trade_proto_rawDescData)
	})
	return file_forwarder_trade_proto_rawDescData
}

var file_forwarder_trade_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
var file_forwarder_trade_proto_goTypes = []any{
	(*FuturePosition)(nil),      // 0: forwarder.FuturePosition
	(*FuturePositionArr)(nil),   // 1: forwarder.FuturePositionArr
	(*StockPosition)(nil),       // 2: forwarder.StockPosition
	(*StockPositionArr)(nil),    // 3: forwarder.StockPositionArr
	(*StockPositionDetail)(nil), // 4: forwarder.StockPositionDetail
	(*StockOrderDetail)(nil),    // 5: forwarder.StockOrderDetail
	(*OddStockOrderDetail)(nil), // 6: forwarder.OddStockOrderDetail
	(*FutureOrderDetail)(nil),   // 7: forwarder.FutureOrderDetail
	(*OptionOrderDetail)(nil),   // 8: forwarder.OptionOrderDetail
	(*TradeResult)(nil),         // 9: forwarder.TradeResult
	(*OrderID)(nil),             // 10: forwarder.OrderID
	(*Margin)(nil),              // 11: forwarder.Margin
	(*AccountBalance)(nil),      // 12: forwarder.AccountBalance
	(*Settlement)(nil),          // 13: forwarder.Settlement
	(*SettlementList)(nil),      // 14: forwarder.SettlementList
	(*emptypb.Empty)(nil),       // 15: google.protobuf.Empty
}
var file_forwarder_trade_proto_depIdxs = []int32{
	0,  // 0: forwarder.FuturePositionArr.position_arr:type_name -> forwarder.FuturePosition
	4,  // 1: forwarder.StockPosition.detail_arr:type_name -> forwarder.StockPositionDetail
	2,  // 2: forwarder.StockPositionArr.position_arr:type_name -> forwarder.StockPosition
	13, // 3: forwarder.SettlementList.settlement:type_name -> forwarder.Settlement
	10, // 4: forwarder.TradeInterface.CancelOrder:input_type -> forwarder.OrderID
	5,  // 5: forwarder.TradeInterface.BuyStock:input_type -> forwarder.StockOrderDetail
	5,  // 6: forwarder.TradeInterface.SellStock:input_type -> forwarder.StockOrderDetail
	6,  // 7: forwarder.TradeInterface.BuyOddStock:input_type -> forwarder.OddStockOrderDetail
	6,  // 8: forwarder.TradeInterface.SellOddStock:input_type -> forwarder.OddStockOrderDetail
	5,  // 9: forwarder.TradeInterface.SellFirstStock:input_type -> forwarder.StockOrderDetail
	7,  // 10: forwarder.TradeInterface.BuyFuture:input_type -> forwarder.FutureOrderDetail
	7,  // 11: forwarder.TradeInterface.SellFuture:input_type -> forwarder.FutureOrderDetail
	7,  // 12: forwarder.TradeInterface.SellFirstFuture:input_type -> forwarder.FutureOrderDetail
	8,  // 13: forwarder.TradeInterface.BuyOption:input_type -> forwarder.OptionOrderDetail
	8,  // 14: forwarder.TradeInterface.SellOption:input_type -> forwarder.OptionOrderDetail
	8,  // 15: forwarder.TradeInterface.SellFirstOption:input_type -> forwarder.OptionOrderDetail
	15, // 16: forwarder.TradeInterface.GetLocalOrderStatusArr:input_type -> google.protobuf.Empty
	15, // 17: forwarder.TradeInterface.GetSimulateOrderStatusArr:input_type -> google.protobuf.Empty
	15, // 18: forwarder.TradeInterface.GetFuturePosition:input_type -> google.protobuf.Empty
	15, // 19: forwarder.TradeInterface.GetStockPosition:input_type -> google.protobuf.Empty
	15, // 20: forwarder.TradeInterface.GetSettlement:input_type -> google.protobuf.Empty
	15, // 21: forwarder.TradeInterface.GetAccountBalance:input_type -> google.protobuf.Empty
	15, // 22: forwarder.TradeInterface.GetMargin:input_type -> google.protobuf.Empty
	9,  // 23: forwarder.TradeInterface.CancelOrder:output_type -> forwarder.TradeResult
	9,  // 24: forwarder.TradeInterface.BuyStock:output_type -> forwarder.TradeResult
	9,  // 25: forwarder.TradeInterface.SellStock:output_type -> forwarder.TradeResult
	9,  // 26: forwarder.TradeInterface.BuyOddStock:output_type -> forwarder.TradeResult
	9,  // 27: forwarder.TradeInterface.SellOddStock:output_type -> forwarder.TradeResult
	9,  // 28: forwarder.TradeInterface.SellFirstStock:output_type -> forwarder.TradeResult
	9,  // 29: forwarder.TradeInterface.BuyFuture:output_type -> forwarder.TradeResult
	9,  // 30: forwarder.TradeInterface.SellFuture:output_type -> forwarder.TradeResult
	9,  // 31: forwarder.TradeInterface.SellFirstFuture:output_type -> forwarder.TradeResult
	9,  // 32: forwarder.TradeInterface.BuyOption:output_type -> forwarder.TradeResult
	9,  // 33: forwarder.TradeInterface.SellOption:output_type -> forwarder.TradeResult
	9,  // 34: forwarder.TradeInterface.SellFirstOption:output_type -> forwarder.TradeResult
	15, // 35: forwarder.TradeInterface.GetLocalOrderStatusArr:output_type -> google.protobuf.Empty
	15, // 36: forwarder.TradeInterface.GetSimulateOrderStatusArr:output_type -> google.protobuf.Empty
	1,  // 37: forwarder.TradeInterface.GetFuturePosition:output_type -> forwarder.FuturePositionArr
	3,  // 38: forwarder.TradeInterface.GetStockPosition:output_type -> forwarder.StockPositionArr
	14, // 39: forwarder.TradeInterface.GetSettlement:output_type -> forwarder.SettlementList
	12, // 40: forwarder.TradeInterface.GetAccountBalance:output_type -> forwarder.AccountBalance
	11, // 41: forwarder.TradeInterface.GetMargin:output_type -> forwarder.Margin
	23, // [23:42] is the sub-list for method output_type
	4,  // [4:23] is the sub-list for method input_type
	4,  // [4:4] is the sub-list for extension type_name
	4,  // [4:4] is the sub-list for extension extendee
	0,  // [0:4] is the sub-list for field type_name
}

func init() { file_forwarder_trade_proto_init() }
func file_forwarder_trade_proto_init() {
	if File_forwarder_trade_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_forwarder_trade_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*FuturePosition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_forwarder_trade_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*FuturePositionArr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_forwarder_trade_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*StockPosition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_forwarder_trade_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*StockPositionArr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_forwarder_trade_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*StockPositionDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_forwarder_trade_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*StockOrderDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_forwarder_trade_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*OddStockOrderDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_forwarder_trade_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*FutureOrderDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_forwarder_trade_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*OptionOrderDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_forwarder_trade_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*TradeResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_forwarder_trade_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*OrderID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_forwarder_trade_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*Margin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_forwarder_trade_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*AccountBalance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_forwarder_trade_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*Settlement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_forwarder_trade_proto_msgTypes[14].Exporter = func(v any, i int) any {
			switch v := v.(*SettlementList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_forwarder_trade_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   15,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_forwarder_trade_proto_goTypes,
		DependencyIndexes: file_forwarder_trade_proto_depIdxs,
		MessageInfos:      file_forwarder_trade_proto_msgTypes,
	}.Build()
	File_forwarder_trade_proto = out.File
	file_forwarder_trade_proto_rawDesc = nil
	file_forwarder_trade_proto_goTypes = nil
	file_forwarder_trade_proto_depIdxs = nil
}
