{"version":3,"file":"lib_commands_authentication_js-lib_index_js.597dd192bcd757bca0a1.js","mappings":"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","sources":["webpack://jupyter_copilot/./src/commands/authentication.ts","webpack://jupyter_copilot/./src/index.ts","webpack://jupyter_copilot/./src/lsp.ts","webpack://jupyter_copilot/./src/utils.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/naming-convention */\nimport { JupyterFrontEnd } from '@jupyterlab/application';\nimport { makePostRequest } from '../utils';\nimport { Widget } from '@lumino/widgets';\nimport { MainAreaWidget } from '@jupyterlab/apputils';\nimport { GLOBAL_SETTINGS } from '../index';\n\ninterface AlreadySignedInResponse {\n  status: 'AlreadySignedIn';\n  user: string;\n}\n\ninterface PendingLoginResponse {\n  status: 'PendingLogin';\n  user?: string;\n  userCode: string;\n  verificationUri: string;\n  expiresIn: number;\n  interval: number;\n}\n\ninterface SignOutResponse {\n  status: string;\n}\ntype LoginResponse = AlreadySignedInResponse | PendingLoginResponse;\n\nconst defaultWidgetCSS = `\n      display: flex;\n      flex-direction: column;\n      justify-content: center;\n      align-items: center;\n      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen', 'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue', sans-serif;\n      color: #333;\n      background-color: #fff;\n      padding: 30px;\n      max-width: 400px;\n      margin: 0 auto;\n      border-radius: 8px;\n      box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\n      text-align: center;\n`;\n\nconst signWidget = (authData: PendingLoginResponse) => {\n  const content = new Widget();\n\n  const messageElement = document.createElement('div');\n\n  messageElement.style.cssText = defaultWidgetCSS;\n\n  messageElement.innerHTML = `\n            <h2 style=\"font-size: 24px; margin-bottom: 20px; color: #0366d6;\">GitHub Copilot Authentication</h2>\n            <p style=\"margin-bottom: 10px;\">Enter this code on GitHub:</p>\n            <div style=\"font-size: 32px; font-weight: bold; background-color: #f6f8fa; color: #0366d6; padding: 15px; border-radius: 5px; margin: 20px 0; letter-spacing: 2px; box-shadow: inset 0 2px 4px rgba(0,0,0,0.05);\">${authData.userCode}</div>\n            <p style=\"margin-bottom: 10px;\">Go to: <a href=\"${authData.verificationUri}\" target=\"_blank\" style=\"color: #0366d6; text-decoration: none;\">${authData.verificationUri}</a></p>\n            <p style=\"font-size: 14px; color: #666;\">This code will expire in <span id=\"timer\" style=\"font-weight: bold;\">${authData.expiresIn}</span> seconds.</p>\n          `;\n  content.node.appendChild(messageElement);\n  const widget = new MainAreaWidget({ content });\n  widget.id = 'apod-jupyterlab';\n  widget.title.label = 'Sign In';\n  widget.title.closable = true;\n  return widget;\n};\n\nconst alreadySignedInWidget = (username: string) => {\n  const content = new Widget();\n\n  const messageElement = document.createElement('div');\n\n  messageElement.style.cssText = defaultWidgetCSS;\n\n  messageElement.innerHTML = `\n            <h2 style=\"font-size: 24px; margin-bottom: 20px;\">Copilot already signed in as: <span style=\"color: #2366d6;\">${username}</span></h2>\n          `;\n\n  content.node.appendChild(messageElement);\n  const widget = new MainAreaWidget({ content });\n  widget.id = 'apod-jupyterlab';\n  widget.title.label = 'Already Signed In';\n  widget.title.closable = true;\n  return widget;\n};\n\nconst SignedOutWidget = () => {\n  const content = new Widget();\n\n  const messageElement = document.createElement('div');\n\n  messageElement.style.cssText = defaultWidgetCSS;\n\n  messageElement.innerHTML = `\n            <h2 style=\"font-size: 24px; margin-bottom: 20px; color: #2366d6;\">Successfully signed out with GitHub!</h2>\n          `;\n\n  content.node.appendChild(messageElement);\n  const widget = new MainAreaWidget({ content });\n  widget.id = 'apod-jupyterlab';\n  widget.title.label = 'Sign Out Successful';\n  widget.title.closable = true;\n  return widget;\n};\n\n// function to execute whenever the login command is called\nexport const LoginExecute = (app: JupyterFrontEnd): void => {\n  makePostRequest('login', {}).then(data => {\n    // data is a string turned into a json object\n    const res = JSON.parse(data) as LoginResponse;\n\n    // handle this branch later\n    if (res.status === 'AlreadySignedIn') {\n      let widget = alreadySignedInWidget(res.user);\n      if (!widget.isDisposed) {\n        widget.dispose();\n        widget = alreadySignedInWidget(res.user);\n      }\n      if (!widget.isAttached) {\n        app.shell.add(widget, 'main');\n      }\n      return;\n    }\n\n    // user may not have actually logged in yet\n    // good enough for now\n    GLOBAL_SETTINGS.setAuthenticated(true);\n\n    let widget = signWidget(res);\n    if (!widget.isDisposed) {\n      widget.dispose();\n      widget = signWidget(res);\n    }\n    if (!widget.isAttached) {\n      app.shell.add(widget, 'main');\n    }\n\n    // countdown timer for expires in the this code will expire in {expiresin seconds}\n    let timeRemaining = res.expiresIn;\n    const interval = setInterval(() => {\n      if (timeRemaining <= 0) {\n        clearInterval(interval);\n        widget.dispose();\n        return;\n      }\n      const timerElement = widget.node.querySelector('#timer');\n      if (timerElement) {\n        timerElement.textContent = timeRemaining.toString();\n      }\n      timeRemaining--;\n    }, 1000);\n    app.shell.activateById(widget.id);\n  });\n};\n\n// function to execute when the signout command is called\nexport const SignOutExecute = (app: JupyterFrontEnd): void => {\n  makePostRequest('signout', {}).then(data => {\n    const res = JSON.parse(data) as SignOutResponse;\n\n    if (res.status === 'NotSignedIn') {\n      let widget = SignedOutWidget();\n      GLOBAL_SETTINGS.setAuthenticated(false);\n      if (!widget.isDisposed) {\n        widget.dispose();\n        widget = SignedOutWidget();\n      }\n      if (!widget.isAttached) {\n        app.shell.add(widget, 'main');\n      }\n    }\n  });\n};\n","import {\n  JupyterFrontEnd,\n  JupyterFrontEndPlugin\n} from '@jupyterlab/application';\nimport { IDisposable } from '@lumino/disposable';\nimport { INotebookTracker } from '@jupyterlab/notebook';\nimport { ServerConnection } from '@jupyterlab/services';\nimport { URLExt } from '@jupyterlab/coreutils';\nimport { NotebookLSPClient } from './lsp';\nimport { ICommandPalette } from '@jupyterlab/apputils';\nimport {\n  ICompletionProviderManager,\n  IInlineCompletionItem,\n  IInlineCompletionList,\n  IInlineCompletionProvider,\n  IInlineCompletionContext,\n  CompletionHandler\n} from '@jupyterlab/completer';\nimport { CodeEditor } from '@jupyterlab/codeeditor';\nimport { LoginExecute, SignOutExecute } from './commands/authentication';\nimport { ISettingRegistry } from '@jupyterlab/settingregistry';\nimport { makePostRequest } from './utils';\n\nclass GlobalSettings {\n  enabled: boolean;\n  completionBind: string;\n  authenticated: boolean;\n\n  constructor() {\n    this.enabled = true;\n    this.completionBind = 'Ctrl J';\n    this.authenticated = false;\n\n    makePostRequest('login', {})\n      .then(response => {\n        const res = JSON.parse(response) as any;\n        this.authenticated = res.status === 'AlreadySignedIn';\n      })\n      .catch(error => {\n        console.error('Error checking authentication state:', error);\n      });\n  }\n\n  setEnabled(enabled: boolean) {\n    this.enabled = enabled;\n  }\n\n  setCompletionBind(completionBind: string) {\n    this.completionBind = completionBind;\n  }\n\n  setAuthenticated(authenticated: boolean) {\n    this.authenticated = authenticated;\n  }\n}\n\nexport const GLOBAL_SETTINGS = new GlobalSettings();\n\nclass CopilotInlineProvider implements IInlineCompletionProvider {\n  readonly name = 'GitHub Copilot';\n  readonly identifier = 'jupyter_copilot:provider';\n  readonly rank = 1000;\n  notebookClients: Map<string, NotebookLSPClient>;\n  private lastRequestTime: number = 0;\n  private timeout: any = null;\n  private lastResolved: (\n    value:\n      | IInlineCompletionList<IInlineCompletionItem>\n      | PromiseLike<IInlineCompletionList<IInlineCompletionItem>>\n  ) => void = () => {};\n  private requestInProgress: boolean = false;\n\n  constructor(notebookClients: Map<string, NotebookLSPClient>) {\n    this.notebookClients = notebookClients;\n  }\n\n  async fetch(\n    request: CompletionHandler.IRequest,\n    context: IInlineCompletionContext\n  ): Promise<IInlineCompletionList<IInlineCompletionItem>> {\n    if (!GLOBAL_SETTINGS.enabled || !GLOBAL_SETTINGS.authenticated) {\n      return { items: [] };\n    }\n\n    const now = Date.now();\n\n    // debounce mechanism\n    // if a request is made within 90ms of the last request, throttle the request\n    // but if it is the last request, then make the request\n    if (this.requestInProgress || now - this.lastRequestTime < 150) {\n      this.lastRequestTime = now;\n\n      // this request was made less than 90ms after the last request\n      // so we resolve the last request with an empty list then clear the timeout\n      this.lastResolved({ items: [] });\n      clearTimeout(this.timeout);\n\n      return new Promise(resolve => {\n        this.lastResolved = resolve;\n        // set a timeout that will resolve the request after 200ms\n        // if no calls are made within 90ms then this will resolve and fetch\n        // if a call comes in < 90ms then this will be cleared and the request will be solved to empty list\n        this.timeout = setTimeout(async () => {\n          this.requestInProgress = true;\n          this.lastRequestTime = Date.now();\n\n          const items = await this.fetchCompletion(request, context);\n\n          resolve(items);\n        }, 200);\n      });\n    } else {\n      // if request is not throttled, just get normally\n      this.requestInProgress = true;\n      this.lastRequestTime = now;\n\n      return await this.fetchCompletion(request, context);\n    }\n  }\n\n  // logic to actually fetch the completion\n  private async fetchCompletion(\n    _request: CompletionHandler.IRequest,\n    context: IInlineCompletionContext\n  ): Promise<IInlineCompletionList<IInlineCompletionItem>> {\n    const editor = (context as any).editor as CodeEditor.IEditor;\n    const cell = (context.widget as any)._content._activeCellIndex;\n    const client = this.notebookClients.get((context.widget as any).id);\n    const cursor = editor?.getCursorPosition();\n    const { line, column } = cursor;\n    client?.sendUpdateLSPVersion();\n    const items: IInlineCompletionItem[] = [];\n    const completions = await client?.getCopilotCompletion(cell, line, column);\n    completions?.forEach(completion => {\n      items.push({\n        // sometimes completions have ``` in them, so we remove it\n        insertText: completion.displayText.replace('```', ''),\n        isIncomplete: false\n      });\n    });\n    this.requestInProgress = false;\n    return { items };\n  }\n}\n\n/**\n * Initialization data for the jupyter_copilot extension.\n */\nconst plugin: JupyterFrontEndPlugin<void> = {\n  id: 'jupyter_copilot:plugin',\n  description: 'GitHub Copilot for Jupyter',\n  autoStart: true,\n  requires: [\n    INotebookTracker,\n    ICompletionProviderManager,\n    ICommandPalette,\n    ISettingRegistry\n  ],\n  activate: (\n    app: JupyterFrontEnd,\n    notebookTracker: INotebookTracker,\n    providerManager: ICompletionProviderManager,\n    palette: ICommandPalette,\n    settingRegistry: ISettingRegistry\n  ) => {\n    console.debug('Jupyter Copilot Extension Activated');\n\n    const command = 'jupyter_copilot:completion';\n\n    app.commands.addCommand(command, {\n      label: 'Copilot Completion',\n      execute: () => {\n        // get id of current notebook panel\n        const notebookPanelId = notebookTracker.currentWidget?.id;\n        providerManager.inline?.accept(notebookPanelId || '');\n      }\n    });\n\n    Promise.all([app.restored, settingRegistry.load(plugin.id)]).then(\n      ([, settings]) => {\n        let keybindingDisposer: IDisposable | null = null;\n        const loadSettings = (settings: ISettingRegistry.ISettings) => {\n          const enabled = settings.get('flag').composite as boolean;\n          const completion_bind = settings.get('keybind').composite as string;\n          GLOBAL_SETTINGS.setEnabled(enabled);\n          GLOBAL_SETTINGS.setCompletionBind(completion_bind);\n\n          console.debug('Settings loaded:', enabled, completion_bind);\n\n          if (keybindingDisposer) {\n            const currentKeys = app.commands.keyBindings.find(\n              kb => kb.command === command\n            )?.keys;\n            console.debug('Disposing old keybinding ', currentKeys);\n            keybindingDisposer.dispose();\n            keybindingDisposer = null;\n          }\n          keybindingDisposer = app.commands.addKeyBinding({\n            command,\n            keys: [completion_bind],\n            selector: '.cm-editor'\n          });\n        };\n\n        loadSettings(settings);\n\n        settings.changed.connect(loadSettings);\n        const SignInCommand = 'Copilot: Sign In';\n        app.commands.addCommand(SignInCommand, {\n          label: 'Copilot: Sign In With GitHub',\n          iconClass: 'cpgithub-icon',\n          execute: () => LoginExecute(app)\n        });\n\n        const SignOutCommand = 'Copilot: Sign Out';\n        app.commands.addCommand(SignOutCommand, {\n          label: 'Copilot: Sign Out With GitHub',\n          iconClass: 'cpgithub-icon',\n          execute: () => SignOutExecute(app)\n        });\n\n        // make them pop up at the top of the palette first items on the palleete commands and update rank\n        palette.addItem({\n          command: SignInCommand,\n          category: 'GitHub Copilot',\n          rank: 0\n        });\n        palette.addItem({\n          command: SignOutCommand,\n          category: 'GitHub Copilot',\n          rank: 1\n        });\n      }\n    );\n\n    const notebookClients = new Map<string, NotebookLSPClient>();\n\n    const provider = new CopilotInlineProvider(notebookClients);\n    providerManager.registerInlineProvider(provider);\n\n    const serverSettings = ServerConnection.makeSettings();\n\n    // notebook tracker is used to keep track of the notebooks that are open\n    // when a new notebook is opened, we create a new LSP client and socket connection for that notebook\n    notebookTracker.widgetAdded.connect(async (_, notebook) => {\n      await notebook.context.ready;\n\n      const wsURL = URLExt.join(serverSettings.wsUrl, 'jupyter-copilot', 'ws');\n      const client = new NotebookLSPClient(notebook.context.path, wsURL);\n      notebookClients.set(notebook.id, client);\n\n      notebook.sessionContext.ready.then(() => {\n        notebook.sessionContext.session?.kernel?.info.then(info => {\n          client.setNotebookLanguage(info.language_info.name);\n        });\n\n        notebook.sessionContext.kernelChanged.connect(async (_, kernel) => {\n          const info = await kernel.newValue?.info;\n          client.setNotebookLanguage(info?.language_info.name as string);\n        });\n      });\n\n      // run whenever a notebook cell updates\n      // types are of ISharedCodeCell and CellChange\n      // i cannot import them and i cannot find where they are supposed to be\n      const onCellUpdate = (update: any, change: any) => {\n        // only change if it is a source change\n        if (change.sourceChange) {\n          const content = update.source;\n          client.sendCellUpdate(notebook.content.activeCellIndex, content);\n        }\n      };\n\n      // keep the current cell so when can clean up whenever this changes\n      let current_cell = notebook.content.activeCell;\n      current_cell?.model.sharedModel.changed.connect(onCellUpdate);\n\n      // run cleanup when notebook is closed\n      notebook.disposed.connect(() => {\n        client.dispose();\n        notebookClients.delete(notebook.id);\n      });\n\n      // notifies the extension server when a cell is added or removed\n      // swapping consists of an add and a remove, so this should be sufficient\n      notebook.model?.cells.changed.connect((_, change) => {\n        if (change.type === 'remove') {\n          client.sendCellDelete(change.oldIndex);\n        } else if (change.type === 'add') {\n          const content = change.newValues[0].sharedModel.getSource();\n          client.sendCellAdd(change.newIndex, content);\n        }\n      });\n\n      notebook.context.pathChanged.connect((_, newPath) => {\n        client.sendPathChange(newPath);\n      });\n\n      // whenever active cell changes remove handler then add to new one\n      notebook.content.activeCellChanged.connect((_, cell) => {\n        current_cell?.model.sharedModel.changed.disconnect(onCellUpdate);\n        current_cell = cell;\n        current_cell?.model.sharedModel.changed.connect(onCellUpdate);\n      });\n    });\n  }\n};\n\nexport default plugin;\n","/* eslint-disable @typescript-eslint/naming-convention */\n/*\n    This class is responsible for communicating with the LSP server and\n    the notebook frontend. It establishes a WebSocket connection with the\n    LSP server and listens for messages. It also sends messages to the LSP\n    server when a cell is updated in the notebook frontend.\n*/\n\ninterface Completion {\n  displayText: string;\n  docVersion: number;\n  position: { line: number; character: number };\n  range: {\n    start: { line: number; character: number };\n    end: { line: number; character: number };\n  };\n  text: string;\n  uuid: string;\n}\n\nclass NotebookLSPClient {\n  private socket: WebSocket | undefined;\n  private pendingCompletions: Map<\n    string,\n    { resolve: (value: any) => void; reject: (reason?: any) => void }\n  > = new Map();\n  private wsUrl: string;\n  private isReconnecting: boolean = false;\n\n  constructor(notebookPath: string, wsUrl: string) {\n    this.wsUrl = `${wsUrl}?path=${encodeURIComponent(notebookPath)}`;\n    this.initializeWebSocket();\n  }\n\n  private initializeWebSocket() {\n    this.socket = new WebSocket(this.wsUrl);\n    this.setupSocketEventHandlers();\n  }\n\n  private setupSocketEventHandlers() {\n    if (!this.socket) {\n      return;\n    }\n\n    this.socket.onmessage = this.handleMessage.bind(this);\n    this.socket.onopen = () => this.sendMessage('sync_request', {});\n    this.socket.onclose = this.handleSocketClose;\n  }\n\n  private handleSocketClose = () => {\n    if (this.isReconnecting) {\n      return;\n    }\n    this.isReconnecting = true;\n    this.initializeWebSocket();\n    console.debug('Socket closed, reconnecting...');\n    setTimeout(() => {\n      this.isReconnecting = false;\n    }, 4000);\n  };\n\n  // Handle messages from the extension server\n  private handleMessage(event: MessageEvent) {\n    const data = JSON.parse(event.data);\n    switch (data.type) {\n      case 'sync_response':\n        break;\n      case 'completion':\n        {\n          const pendingCompletion = this.pendingCompletions.get(data.req_id);\n          if (pendingCompletion) {\n            pendingCompletion.resolve(data.completions);\n            this.pendingCompletions.delete(data.req_id);\n          }\n        }\n        break;\n      case 'connection_established':\n        console.debug('Copilot connected to extension server...');\n        break;\n      default:\n        console.error('Unknown message type:', data);\n    }\n  }\n\n  // Send a message to the LSP server to update the cell content\n  // we don't want to update the entire file every time something is changed\n  // so we specify a cell id and the now content so we can modify just that single cell\n  public sendCellUpdate(cellId: number, content: string) {\n    this.sendMessage('cell_update', { cell_id: cellId, content: content });\n  }\n\n  public sendCellDelete(cellID: number) {\n    this.sendMessage('cell_delete', { cell_id: cellID });\n  }\n\n  public sendCellAdd(cellID: number, content: string) {\n    this.sendMessage('cell_add', { cell_id: cellID, content: content });\n  }\n\n  // sends a message to the server which will then send the updated code to the lsp server\n  public sendUpdateLSPVersion() {\n    this.sendMessage('update_lsp_version', {});\n  }\n\n  public async getCopilotCompletion(\n    cell: number,\n    line: number,\n    character: number\n  ): Promise<Completion[]> {\n    return new Promise((resolve, reject) => {\n      const requestId = `${cell}-${line}-${character}-${Date.now()}`;\n      this.pendingCompletions.set(requestId, { resolve, reject });\n\n      this.sendMessage('get_completion', {\n        req_id: requestId,\n        cell_id: cell,\n        line: line,\n        character: character\n      });\n\n      // add a timeout to reject the promise if no response is received\n      setTimeout(() => {\n        if (this.pendingCompletions.has(requestId)) {\n          this.pendingCompletions.delete(requestId);\n          reject(new Error('Completion request timed out'));\n        }\n      }, 10000); // 10 seconds timeout\n    });\n  }\n\n  private sendMessage(type: string, payload: any) {\n    this.socket?.send(JSON.stringify({ type, ...payload }));\n  }\n\n  public sendPathChange(newPath: string) {\n    this.sendMessage('change_path', { new_path: newPath });\n  }\n\n  public setNotebookLanguage(language: string) {\n    this.sendMessage('set_language', { language: language });\n  }\n\n  // cleans up the socket connection\n  public dispose() {\n    this.socket?.close();\n    console.debug('socket connection closed');\n  }\n}\n\nexport { NotebookLSPClient };\n","import { URLExt } from '@jupyterlab/coreutils';\nimport { ServerConnection } from '@jupyterlab/services';\n\n// takes in the route and body of the request (json object)\nexport const makePostRequest = async (route: string, body: object) => {\n  try {\n    const settings = ServerConnection.makeSettings();\n    const requestUrl = URLExt.join(settings.baseUrl, 'jupyter-copilot', route);\n\n    console.debug('requestUrl:', requestUrl);\n\n    const init: RequestInit = {\n      method: 'POST',\n      body: JSON.stringify(body),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: `token ${settings.token}`\n      }\n    };\n\n    const response = await ServerConnection.makeRequest(\n      requestUrl,\n      init,\n      settings\n    );\n\n    if (!response.ok) {\n      console.error('Response not OK:', response.status, response.statusText);\n      const errorData = await response.text();\n      console.error('Error data:', errorData);\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n\n    const data = await response.text();\n    return data;\n  } catch (reason) {\n    console.error(\n      `The jupyter_copilot server extension appears to be missing or the request failed.\\n${reason}`\n    );\n    throw reason;\n  }\n};\n"],"names":[],"sourceRoot":""}