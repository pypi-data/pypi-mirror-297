"""Autogenerated API schema"""
from argus_api import session


create_and_download_private_key = {'tags': ['authentication/v1/signature'], 'summary': 'Create and return a new private key. (INTERNAL)', 'description': '', 'operationId': 'createAndDownloadPrivateKey', 'consumes': ['application/json'], 'produces': ['application/json'], 'parameters': [{'name': 'user', 'in': 'path', 'description': 'User ID or shortname', 'required': True, 'type': 'str'}, {'in': 'body', 'name': 'body', 'description': 'Key creation request', 'required': False, 'schema': {'type': 'object', 'properties': {'name': {'type': 'str', 'position': 0, 'description': 'A name to associate with the key'}, 'defaultKey': {'type': 'bool', 'position': 0, 'description': 'If true, use/overwrite the default key (keyIndex=0) instead of selecting the next available keyIndex'}, 'validDays': {'type': 'int', 'position': 0, 'description': 'Number of days this key is valid, default is unlimited (0).', 'minimum': 0}, 'validSources': {'type': 'list', 'position': 0, 'description': 'Valid source IPs/networks. Default is valid from all IPs.', 'uniqueItems': True, 'items': {'type': 'string'}}}}}], 'responses': {'401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'Not found'}, '412': {'description': 'Validation error'}}}
delete_all_user_sessions = {'tags': ['authentication/v1/session'], 'summary': 'Delete all sessions belonging to specific user. The sessions will be deleted from the authorative cache and flushed from all distributed caches (PUBLIC)', 'description': '', 'operationId': 'deleteAllUserSessions', 'produces': ['application/json'], 'parameters': [{'name': 'user', 'in': 'path', 'description': 'Username or ID of user to delete sessions for', 'required': True, 'type': 'str'}, {'name': 'domain', 'in': 'query', 'description': 'Domain ID or name for domain to lookup username from', 'required': False, 'type': 'str'}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'dict', 'properties': {'sessionsDeleted': {'type': 'int', 'position': 0, 'description': 'Number of sessions successfully deleted'}}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'User or session not found'}, '412': {'description': 'Invalid arguments'}}}
delete_signature = {'tags': ['authentication/v1/signature'], 'summary': 'Delete signature (INTERNAL)', 'description': '', 'operationId': 'deleteSignature', 'produces': ['application/json'], 'parameters': [{'name': 'user', 'in': 'path', 'description': 'User ID or shortname', 'required': True, 'type': 'str'}, {'name': 'id', 'in': 'path', 'description': 'Key to delete signature for', 'required': True, 'type': 'int', 'minimum': 0}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'dict', 'properties': {'deletedKey': {'type': 'str', 'position': 0, 'description': 'The administratively deleted key from signature'}}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'Not found'}, '412': {'description': 'Validation error'}}}
disable_method_for_user = {'tags': ['authentication/v1'], 'summary': 'Disable an authentication method for a user (PUBLIC)', 'description': '', 'operationId': 'disableMethodForUser', 'produces': ['application/json'], 'parameters': [{'name': 'user', 'in': 'path', 'description': 'ID or shortname of user to modify', 'required': True, 'type': 'str'}, {'name': 'method', 'in': 'path', 'description': 'Authentication method to enable', 'required': True, 'type': 'str', 'enum': ['password', 'signature', 'sms', 'totp', 'apikey', 'ldap', 'openid']}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'dict', 'properties': {'method': {'type': 'str', 'position': 0, 'description': 'Authentication method', 'enum': ['PASSWORD', 'SIGNATURE', 'SMS', 'TOTP', 'OTP', 'APIKEY', 'LDAP', 'IMPERSONATED', 'OPENID']}, 'lastLoginTimestamp': {'type': 'int', 'position': 0, 'description': 'Last login time in ms'}, 'lastLoginIP': {'type': 'str', 'position': 0, 'description': 'Last login IP'}, 'initialized': {'type': 'bool', 'position': 0, 'description': 'Whether method has been initialized'}, 'settings': {'type': 'dict', 'position': 0, 'description': 'Authentication method settings', 'additionalProperties': {'type': 'object'}}}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'User not found'}, '412': {'description': 'Validation failed'}}}
download_public_key = {'tags': ['authentication/v1/signature'], 'summary': 'Download user public key (INTERNAL)', 'description': '', 'operationId': 'downloadPublicKey', 'produces': ['application/octet-stream'], 'parameters': [{'name': 'user', 'in': 'path', 'description': 'User ID or shortname', 'required': True, 'type': 'str'}], 'responses': {'401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'Not found'}, '412': {'description': 'Validation error'}}}
enable_method_for_user = {'tags': ['authentication/v1'], 'summary': 'Enable an authentication method for a user (PUBLIC)', 'description': '', 'operationId': 'enableMethodForUser', 'produces': ['application/json'], 'parameters': [{'name': 'user', 'in': 'path', 'description': 'ID or shortname of user to modify', 'required': True, 'type': 'str'}, {'name': 'method', 'in': 'path', 'description': 'Authentication method to enable', 'required': True, 'type': 'str', 'enum': ['password', 'signature', 'sms', 'totp', 'apikey', 'ldap', 'openid']}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'dict', 'properties': {'method': {'type': 'str', 'position': 0, 'description': 'Authentication method', 'enum': ['PASSWORD', 'SIGNATURE', 'SMS', 'TOTP', 'OTP', 'APIKEY', 'LDAP', 'IMPERSONATED', 'OPENID']}, 'lastLoginTimestamp': {'type': 'int', 'position': 0, 'description': 'Last login time in ms'}, 'lastLoginIP': {'type': 'str', 'position': 0, 'description': 'Last login IP'}, 'initialized': {'type': 'bool', 'position': 0, 'description': 'Whether method has been initialized'}, 'settings': {'type': 'dict', 'position': 0, 'description': 'Authentication method settings', 'additionalProperties': {'type': 'object'}}}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'User not found'}, '412': {'description': 'Validation failed'}}}
evict_signature_session = {'tags': ['authentication/v1/signature'], 'summary': 'Evict user signature session (INTERNAL)', 'description': '', 'operationId': 'evictSignatureSession', 'produces': ['application/json'], 'parameters': [{'name': 'user', 'in': 'path', 'description': 'User ID or shortname', 'required': True, 'type': 'str'}, {'name': 'keyID', 'in': 'query', 'description': 'Key to clear session for. If not specified, the session will be cleared for all keys', 'required': False, 'type': 'int'}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'dict', 'properties': {'evictedKeys': {'type': 'list', 'position': 0, 'description': 'The list of evicted key hashes', 'uniqueItems': True, 'items': {'type': 'string'}}}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'Not found'}, '412': {'description': 'Validation error'}}}
get_user_authentication_status = {'tags': ['authentication/v1'], 'summary': 'Retrieve user authentication status (PUBLIC)', 'description': '', 'operationId': 'getUserAuthenticationStatus', 'produces': ['application/json'], 'parameters': [{'name': 'user', 'in': 'path', 'description': 'ID or shortname of user to fetch status for', 'required': True, 'type': 'str'}, {'name': 'domain', 'in': 'query', 'description': 'Domain to lookup username in, defaults to current users domain', 'required': False, 'type': 'str'}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'dict', 'properties': {'blocked': {'type': 'bool', 'position': 0, 'description': 'If true, the target user is marked as blocked.'}, 'forcePasswordChange': {'type': 'bool', 'position': 0, 'description': 'If true, the target user is marked as force password change.'}}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'User not found'}, '412': {'description': 'Validation failed'}}}
get_user_methods = {'tags': ['authentication/v1'], 'summary': 'List authentication methods enabled for a specified user (PUBLIC)', 'description': '', 'operationId': 'getUserMethods', 'produces': ['application/json'], 'parameters': [{'name': 'user', 'in': 'path', 'description': 'User to fetch methods for', 'required': True, 'type': 'str'}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'list', 'description': 'Contains an array of results', 'items': {'type': 'dict', 'properties': {'method': {'type': 'str', 'position': 0, 'description': 'Authentication method', 'enum': ['PASSWORD', 'SIGNATURE', 'SMS', 'TOTP', 'OTP', 'APIKEY', 'LDAP', 'IMPERSONATED', 'OPENID']}, 'lastLoginTimestamp': {'type': 'int', 'position': 0, 'description': 'Last login time in ms'}, 'lastLoginIP': {'type': 'str', 'position': 0, 'description': 'Last login IP'}, 'initialized': {'type': 'bool', 'position': 0, 'description': 'Whether method has been initialized'}, 'settings': {'type': 'dict', 'position': 0, 'description': 'Authentication method settings', 'additionalProperties': {'type': 'object'}}}}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'User not found'}, '412': {'description': 'Invalid arguments'}}}
get_user_openid_configuration = {'tags': ['authentication/v1/openid'], 'summary': 'Retrieve OpenID Provider configuration for user (PUBLIC)', 'description': '', 'operationId': 'getUserOpenIDConfiguration', 'produces': ['application/json'], 'parameters': [{'name': 'user', 'in': 'path', 'description': 'ID or shortname of user to fetch config for', 'required': True, 'type': 'str'}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'dict', 'properties': {'provider': {'type': 'dict', 'properties': {'id': {'type': 'str', 'position': 0, 'description': 'ID of this provider'}, 'shortName': {'type': 'str', 'position': 0, 'description': 'The provider shortname'}, 'name': {'type': 'str', 'position': 0, 'description': 'The provider name'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the customer.'}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Shortname of the customer.'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}}, 'description': 'SPI CustomerInfo'}}}, 'mappedUserName': {'type': 'str', 'position': 0, 'description': 'The provider username that this user is mapped to'}}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'User not found'}, '412': {'description': 'Invalid argument'}}}
initiate_user_api_key = {'tags': ['authentication/v1/apikey'], 'summary': 'Initiate a new user APIkey (PUBLIC)', 'description': 'API keys are bound to a limited IP range. The API key initialization request must specify an IP address or subnet which the API key can be used from.Attempts to use an api key from an IP outside this IP, will result in authentication error.\n\nTo allow authentication from different IPs, issue multiple API keys.\n\nThe initiation request returns the API key, in the format it can be used both in the Argus-API-Key header, or when initiating a durable session (/apikey/authenticate).\n\nThe API key cannot be retrieved at a later stage. If the key is lost, it should be deletedand a new key should be issued.', 'operationId': 'initiateUserApiKey', 'consumes': ['application/json'], 'produces': ['application/json'], 'parameters': [{'name': 'user', 'in': 'path', 'description': 'ID or shortname of user', 'required': True, 'type': 'str'}, {'in': 'body', 'name': 'body', 'description': 'API key request', 'required': False, 'schema': {'type': 'object', 'required': ['description'], 'properties': {'description': {'type': 'str', 'description': '[\\s\\w\\{\\}\\$\\-\\(\\)\\.\\[\\]"\\\'_/\\\\,\\*\\+\\#:@!?;=]*'}, 'validSources': {'type': 'str', 'description': 'Client IP/CIDR networks which the api key will be valid for. Deprecated! Instead use source where you set provider to´staticIP´ and specify networks by setting staticOptions'}, 'source': {'type': 'dict', 'required': ['provider'], 'properties': {'provider': {'type': 'str', 'position': 0, 'description': 'Provider the API key should be valid for. Can be a cloud provider, static for client IP/CIDR networks or disabled for unlimited source (default staticIP)', 'enum': ['staticIP', 'aws', 'disabled']}, 'awsOptions': {'type': 'dict', 'properties': {'services': {'type': 'list', 'position': 0, 'description': 'AWS services the API key should be valid for', 'uniqueItems': True, 'items': {'type': 'string'}}, 'regions': {'type': 'list', 'position': 0, 'description': 'AWS regions the API key should be valid for', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['GLOBAL', 'af-south-1', 'ap-east-1', 'ap-northeast-1', 'ap-northeast-2', 'ap-northeast-3', 'ap-south-1', 'ap-south-2', 'ap-southeast-1', 'ap-southeast-2', 'ap-southeast-3', 'ap-southeast-4', 'ca-central-1', 'cn-north-1', 'cn-northwest-1', 'eu-central-1', 'eu-central-2', 'eu-north-1', 'eu-south-1', 'eu-south-2', 'eu-west-1', 'eu-west-2', 'eu-west-3', 'il-central-1', 'me-central-1', 'me-south-1', 'sa-east-1', 'us-east-1', 'us-east-2', 'us-gov-east-1', 'us-gov-west-1', 'us-west-1', 'us-west-2']}}}}, 'staticOptions': {'type': 'dict', 'required': ['ipAddresses'], 'properties': {'ipAddresses': {'type': 'list', 'position': 0, 'description': 'IP addresses the static API key will be valid for', 'uniqueItems': True, 'items': {'type': 'string'}, 'maxItems': 2147483647, 'minItems': 1}}}}}, 'disableSourceRestriction': {'type': 'bool', 'position': 0, 'description': 'Request API-key without source restriction. If key without source restriction is not permitted, a 412 error will be returned. Deprecated! Instead set provider in source to ´disabled´ (default false)', 'default': False}, 'expirationDays': {'type': 'int', 'position': 0, 'description': 'Requested expiration days, default is 3 months. If the requested expiration exceeds the permitted expiration period, a 412 error will be returned.', 'minimum': 0}, 'disableExpiration': {'type': 'bool', 'position': 0, 'description': 'Request API-key with unlimited expiration. If unlimited expiration is not permitted, a 412 error will be returned. (default false)', 'default': False}, 'sessionConstraints': {'type': 'dict', 'properties': {'customerID': {'type': 'list', 'position': 0, 'description': 'List of customers to constrain this session to. Default is all available customers.', 'uniqueItems': True, 'items': {'type': 'int'}}, 'function': {'type': 'list', 'position': 0, 'description': 'List of functions (by name) to constrain this session to. Default is all available functions.', 'uniqueItems': True, 'items': {'type': 'string'}}, 'functionID': {'type': 'list', 'position': 0, 'description': 'List of functions (by ID) to constrain this session to. Default is all available functions.', 'uniqueItems': True, 'items': {'type': 'int'}}, 'readOnly': {'type': 'bool', 'position': 0, 'description': 'If set, this session will be read only'}}}}}}], 'responses': {'201': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'dict', 'properties': {'keyDescriptor': {'type': 'dict', 'properties': {'description': {'type': 'str', 'position': 0, 'description': 'Key description'}, 'validSources': {'type': 'list', 'position': 0, 'description': 'Client IP/CIDR networks which the api key will be valid for.', 'uniqueItems': True, 'items': {'type': 'dict', 'properties': {'public': {'type': 'boolean'}, 'ipv6': {'type': 'bool', 'xml': {'attribute': True}, 'readOnly': True}, 'host': {'type': 'bool', 'xml': {'attribute': True}, 'readOnly': True}, 'maskBits': {'type': 'int'}, 'multicast': {'type': 'boolean'}, 'address': {'type': 'str', 'xml': {'attribute': True}, 'readOnly': True}}}}, 'source': {'type': 'dict', 'required': ['provider'], 'properties': {'provider': {'type': 'str', 'position': 0, 'description': 'Provider the API key should be valid for. Can be a cloud provider, static for client IP/CIDR networks or disabled for unlimited source', 'enum': ['staticIP', 'aws', 'disabled']}, 'staticOptions': {'type': 'dict', 'required': ['ipAddresses'], 'properties': {'ipAddresses': {'type': 'list', 'position': 0, 'description': 'IP/CIDR networks the API key should be valid for', 'uniqueItems': True, 'items': {'type': 'string'}, 'maxItems': 2147483647, 'minItems': 1}}}, 'awsOptions': {'type': 'dict', 'properties': {'services': {'type': 'list', 'position': 0, 'description': 'AWS services the API key should be valid for', 'uniqueItems': True, 'items': {'type': 'string'}}, 'regions': {'type': 'list', 'position': 0, 'description': 'AWS regions the API key should be valid for', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['GLOBAL', 'af-south-1', 'ap-east-1', 'ap-northeast-1', 'ap-northeast-2', 'ap-northeast-3', 'ap-south-1', 'ap-south-2', 'ap-southeast-1', 'ap-southeast-2', 'ap-southeast-3', 'ap-southeast-4', 'ca-central-1', 'cn-north-1', 'cn-northwest-1', 'eu-central-1', 'eu-central-2', 'eu-north-1', 'eu-south-1', 'eu-south-2', 'eu-west-1', 'eu-west-2', 'eu-west-3', 'il-central-1', 'me-central-1', 'me-south-1', 'sa-east-1', 'us-east-1', 'us-east-2', 'us-gov-east-1', 'us-gov-west-1', 'us-west-1', 'us-west-2']}}}}}}, 'validUntil': {'type': 'int', 'position': 0, 'description': 'Timestamp when this key expires. If value is 0, key never expires.'}, 'lastUsedTimestamp': {'type': 'int', 'position': 0, 'description': 'Timestamp when this key was last used.'}, 'lastUsedIP': {'type': 'dict', 'properties': {'host': {'type': 'bool', 'xml': {'attribute': True}, 'readOnly': True}, 'public': {'type': 'boolean'}, 'ipv6': {'type': 'bool', 'xml': {'attribute': True}, 'readOnly': True}, 'maskBits': {'type': 'int'}, 'multicast': {'type': 'boolean'}, 'address': {'type': 'str', 'xml': {'attribute': True}, 'readOnly': True}}}, 'constraints': {'type': 'dict', 'properties': {'customers': {'type': 'list', 'uniqueItems': True, 'items': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}}, 'functions': {'type': 'list', 'uniqueItems': True, 'items': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'str', 'position': 0, 'description': 'Function name'}, 'description': {'type': 'str', 'position': 0, 'description': 'Function description'}, 'securityLevel': {'type': 'str', 'position': 0, 'description': 'Function security level', 'enum': ['DEFAULT', 'ADMINISTRATIVE', 'EXTERNAL']}, 'flags': {'type': 'list', 'position': 0, 'description': 'Flags assigned to the object.', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['ROLE', 'SYSADM']}}}}}, 'readOnly': {'type': 'boolean'}}}, 'prefix': {'type': 'str', 'position': 0, 'description': 'Key prefix'}}}, 'apiKeyString': {'type': 'str', 'position': 0, 'description': 'The API key. This is the only response returning the actual API key, it cannot be retrieved later.'}}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'Not found'}, '412': {'description': 'Validation error'}}}
initiate_user_totp = {'tags': ['authentication/v1/totp'], 'summary': 'Initiate a new TOTP generator for the user (PUBLIC)', 'description': 'TOTP authentication requires a TOTP generator to be set up for the user.\n\nThis operation allows the administrator to set up a TOTP generator for the given user.\nNormally this should be done by the user, using the /totp resource.\nThe TOTP generator code retrieved cannot be retrieved again. It should be added directly to the TOTP generator, and should not be stored elsewhere.', 'operationId': 'initiateUserTOTP', 'produces': ['application/json'], 'parameters': [{'name': 'user', 'in': 'path', 'description': 'User ID or shortname', 'required': True, 'type': 'str'}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'dict', 'properties': {'userName': {'type': 'str', 'position': 0, 'description': 'The username this seed is bound to'}, 'passCodeLength': {'type': 'int', 'position': 0, 'description': 'The passcode length pass to the TOTP generator'}, 'keyAlgorithm': {'type': 'str', 'position': 0, 'description': 'The key algorithm to pass to the TOTP generator'}, 'seedBase64': {'type': 'str', 'position': 0, 'description': 'The base64-encoded TOTP seed'}, 'seedBase32': {'type': 'str', 'position': 0, 'description': 'The base32-encoded TOTP seed to pass to the TOTP generator'}}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'Not found'}, '412': {'description': 'Validation error'}}}
list_user_api_keys = {'tags': ['authentication/v1/apikey'], 'summary': 'List user API keys (PUBLIC)', 'description': '', 'operationId': 'listUserApiKeys', 'produces': ['application/json'], 'parameters': [{'name': 'user', 'in': 'path', 'description': 'ID or shortname of user', 'required': True, 'type': 'str'}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'dict', 'properties': {'keys': {'type': 'list', 'position': 0, 'description': 'The list of configured API keys', 'items': {'type': 'dict', 'properties': {'description': {'type': 'str', 'position': 0, 'description': 'Key description'}, 'validSources': {'type': 'list', 'position': 0, 'description': 'Client IP/CIDR networks which the api key will be valid for.', 'uniqueItems': True, 'items': {'type': 'dict', 'properties': {'public': {'type': 'boolean'}, 'ipv6': {'type': 'bool', 'xml': {'attribute': True}, 'readOnly': True}, 'host': {'type': 'bool', 'xml': {'attribute': True}, 'readOnly': True}, 'maskBits': {'type': 'int'}, 'multicast': {'type': 'boolean'}, 'address': {'type': 'str', 'xml': {'attribute': True}, 'readOnly': True}}}}, 'source': {'type': 'dict', 'required': ['provider'], 'properties': {'provider': {'type': 'str', 'position': 0, 'description': 'Provider the API key should be valid for. Can be a cloud provider, static for client IP/CIDR networks or disabled for unlimited source', 'enum': ['staticIP', 'aws', 'disabled']}, 'staticOptions': {'type': 'dict', 'required': ['ipAddresses'], 'properties': {'ipAddresses': {'type': 'list', 'position': 0, 'description': 'IP/CIDR networks the API key should be valid for', 'uniqueItems': True, 'items': {'type': 'string'}, 'maxItems': 2147483647, 'minItems': 1}}}, 'awsOptions': {'type': 'dict', 'properties': {'services': {'type': 'list', 'position': 0, 'description': 'AWS services the API key should be valid for', 'uniqueItems': True, 'items': {'type': 'string'}}, 'regions': {'type': 'list', 'position': 0, 'description': 'AWS regions the API key should be valid for', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['GLOBAL', 'af-south-1', 'ap-east-1', 'ap-northeast-1', 'ap-northeast-2', 'ap-northeast-3', 'ap-south-1', 'ap-south-2', 'ap-southeast-1', 'ap-southeast-2', 'ap-southeast-3', 'ap-southeast-4', 'ca-central-1', 'cn-north-1', 'cn-northwest-1', 'eu-central-1', 'eu-central-2', 'eu-north-1', 'eu-south-1', 'eu-south-2', 'eu-west-1', 'eu-west-2', 'eu-west-3', 'il-central-1', 'me-central-1', 'me-south-1', 'sa-east-1', 'us-east-1', 'us-east-2', 'us-gov-east-1', 'us-gov-west-1', 'us-west-1', 'us-west-2']}}}}}}, 'validUntil': {'type': 'int', 'position': 0, 'description': 'Timestamp when this key expires. If value is 0, key never expires.'}, 'lastUsedTimestamp': {'type': 'int', 'position': 0, 'description': 'Timestamp when this key was last used.'}, 'lastUsedIP': {'type': 'dict', 'properties': {'host': {'type': 'bool', 'xml': {'attribute': True}, 'readOnly': True}, 'public': {'type': 'boolean'}, 'ipv6': {'type': 'bool', 'xml': {'attribute': True}, 'readOnly': True}, 'maskBits': {'type': 'int'}, 'multicast': {'type': 'boolean'}, 'address': {'type': 'str', 'xml': {'attribute': True}, 'readOnly': True}}}, 'constraints': {'type': 'dict', 'properties': {'customers': {'type': 'list', 'uniqueItems': True, 'items': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}}, 'functions': {'type': 'list', 'uniqueItems': True, 'items': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'str', 'position': 0, 'description': 'Function name'}, 'description': {'type': 'str', 'position': 0, 'description': 'Function description'}, 'securityLevel': {'type': 'str', 'position': 0, 'description': 'Function security level', 'enum': ['DEFAULT', 'ADMINISTRATIVE', 'EXTERNAL']}, 'flags': {'type': 'list', 'position': 0, 'description': 'Flags assigned to the object.', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['ROLE', 'SYSADM']}}}}}, 'readOnly': {'type': 'boolean'}}}, 'prefix': {'type': 'str', 'position': 0, 'description': 'Key prefix'}}}}}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'Not found'}, '412': {'description': 'Validation error'}}}
list_user_public_keys = {'tags': ['authentication/v1/signature'], 'summary': 'List enrolled keys (INTERNAL)', 'description': '', 'operationId': 'listUserPublicKeys', 'produces': ['application/json'], 'parameters': [{'name': 'user', 'in': 'path', 'description': 'User ID or shortname', 'required': True, 'type': 'str'}, {'name': 'limit', 'in': 'query', 'description': 'Maximum number of values to return', 'required': False, 'type': 'int', 'default': 25, 'minimum': 0}, {'name': 'offset', 'in': 'query', 'description': 'Skip this number of records', 'required': False, 'type': 'int', 'default': 0, 'minimum': 0}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'dict', 'properties': {'keys': {'type': 'list', 'position': 0, 'description': 'List of enrolled keys', 'items': {'type': 'dict', 'properties': {'keyID': {'type': 'int', 'position': 0, 'description': 'The key ID (to use in signature headers)'}, 'type': 'str', 'description': {'type': 'str', 'position': 0, 'description': 'A description or name for this key'}, 'createdTimestamp': {'type': 'int', 'position': 0, 'description': 'The timestamp when this key was created'}, 'lastUsedTimestamp': {'type': 'int', 'position': 0, 'description': 'The timestamp when this key was last used'}, 'lastUsedSourceIP': {'type': 'str', 'position': 0, 'description': 'The source IP this key was last used from'}, 'validUntil': {'type': 'int', 'position': 0, 'description': 'The timestamp this key is valid until, or 0 if unlimited validity'}, 'validSources': {'type': 'list', 'position': 0, 'description': 'The IP sources this key is valid for', 'uniqueItems': True, 'items': {'type': 'string'}}, 'options': ['argus', 'webauthn', 'android', 'iphone']}}}}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'Not found'}, '412': {'description': 'Validation error'}}}
renew_user_api_key_by_id = {'tags': ['authentication/v1/apikey'], 'summary': 'null (PUBLIC)', 'operationId': 'renewUserApiKeyByID', 'consumes': ['application/json'], 'produces': ['application/json'], 'parameters': [{'name': 'user', 'in': 'path', 'description': 'ID or shortname of user', 'required': True, 'type': 'str'}, {'name': 'keyID', 'in': 'path', 'description': 'Key ID', 'required': True, 'type': 'int', 'pattern': '[0-9]+'}, {'in': 'body', 'name': 'body', 'description': 'Additional request parameters', 'required': False, 'schema': {'type': 'object', 'properties': {'expirationDays': {'type': 'int', 'position': 0, 'description': 'Requested expiration days, 0 means unlimited. Default is 3 months. If user does not have permissions to specify expiration period, an error will be returned.', 'minimum': 0}, 'disableExpiration': {'type': 'bool', 'position': 0, 'description': 'Request API-key with unlimited expiration. If unlimited expiration is not permitted, a 412 error will be returned. (default false)', 'default': False}}}}], 'deprecated': True, 'responses': {'default': {'description': 'successful operation'}}}
renew_user_api_key_by_prefix = {'tags': ['authentication/v1/apikey'], 'summary': 'Renew existing user APIkey (PUBLIC)', 'description': 'API keys have limited validity. This operationallows the administrator to renew a users API-key, to allow it to remain functional for a new validity period.', 'operationId': 'renewUserApiKeyByPrefix', 'consumes': ['application/json'], 'produces': ['application/json'], 'parameters': [{'name': 'user', 'in': 'path', 'description': 'ID or shortname of user', 'required': True, 'type': 'str'}, {'name': 'prefix', 'in': 'path', 'description': 'Key prefix', 'required': True, 'type': 'str', 'pattern': '[a-z0-9]+/[a-z0-9]+'}, {'in': 'body', 'name': 'body', 'description': 'Additional request parameters', 'required': False, 'schema': {'type': 'object', 'properties': {'expirationDays': {'type': 'int', 'position': 0, 'description': 'Requested expiration days, 0 means unlimited. Default is 3 months. If user does not have permissions to specify expiration period, an error will be returned.', 'minimum': 0}, 'disableExpiration': {'type': 'bool', 'position': 0, 'description': 'Request API-key with unlimited expiration. If unlimited expiration is not permitted, a 412 error will be returned. (default false)', 'default': False}}}}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'dict', 'properties': {'renewedKey': {'type': 'dict', 'properties': {'description': {'type': 'str', 'position': 0, 'description': 'Key description'}, 'validSources': {'type': 'list', 'position': 0, 'description': 'Client IP/CIDR networks which the api key will be valid for.', 'uniqueItems': True, 'items': {'type': 'dict', 'properties': {'public': {'type': 'boolean'}, 'ipv6': {'type': 'bool', 'xml': {'attribute': True}, 'readOnly': True}, 'host': {'type': 'bool', 'xml': {'attribute': True}, 'readOnly': True}, 'maskBits': {'type': 'int'}, 'multicast': {'type': 'boolean'}, 'address': {'type': 'str', 'xml': {'attribute': True}, 'readOnly': True}}}}, 'source': {'type': 'dict', 'required': ['provider'], 'properties': {'provider': {'type': 'str', 'position': 0, 'description': 'Provider the API key should be valid for. Can be a cloud provider, static for client IP/CIDR networks or disabled for unlimited source', 'enum': ['staticIP', 'aws', 'disabled']}, 'staticOptions': {'type': 'dict', 'required': ['ipAddresses'], 'properties': {'ipAddresses': {'type': 'list', 'position': 0, 'description': 'IP/CIDR networks the API key should be valid for', 'uniqueItems': True, 'items': {'type': 'string'}, 'maxItems': 2147483647, 'minItems': 1}}}, 'awsOptions': {'type': 'dict', 'properties': {'services': {'type': 'list', 'position': 0, 'description': 'AWS services the API key should be valid for', 'uniqueItems': True, 'items': {'type': 'string'}}, 'regions': {'type': 'list', 'position': 0, 'description': 'AWS regions the API key should be valid for', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['GLOBAL', 'af-south-1', 'ap-east-1', 'ap-northeast-1', 'ap-northeast-2', 'ap-northeast-3', 'ap-south-1', 'ap-south-2', 'ap-southeast-1', 'ap-southeast-2', 'ap-southeast-3', 'ap-southeast-4', 'ca-central-1', 'cn-north-1', 'cn-northwest-1', 'eu-central-1', 'eu-central-2', 'eu-north-1', 'eu-south-1', 'eu-south-2', 'eu-west-1', 'eu-west-2', 'eu-west-3', 'il-central-1', 'me-central-1', 'me-south-1', 'sa-east-1', 'us-east-1', 'us-east-2', 'us-gov-east-1', 'us-gov-west-1', 'us-west-1', 'us-west-2']}}}}}}, 'validUntil': {'type': 'int', 'position': 0, 'description': 'Timestamp when this key expires. If value is 0, key never expires.'}, 'lastUsedTimestamp': {'type': 'int', 'position': 0, 'description': 'Timestamp when this key was last used.'}, 'lastUsedIP': {'type': 'dict', 'properties': {'host': {'type': 'bool', 'xml': {'attribute': True}, 'readOnly': True}, 'public': {'type': 'boolean'}, 'ipv6': {'type': 'bool', 'xml': {'attribute': True}, 'readOnly': True}, 'maskBits': {'type': 'int'}, 'multicast': {'type': 'boolean'}, 'address': {'type': 'str', 'xml': {'attribute': True}, 'readOnly': True}}}, 'constraints': {'type': 'dict', 'properties': {'customers': {'type': 'list', 'uniqueItems': True, 'items': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}}, 'functions': {'type': 'list', 'uniqueItems': True, 'items': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'str', 'position': 0, 'description': 'Function name'}, 'description': {'type': 'str', 'position': 0, 'description': 'Function description'}, 'securityLevel': {'type': 'str', 'position': 0, 'description': 'Function security level', 'enum': ['DEFAULT', 'ADMINISTRATIVE', 'EXTERNAL']}, 'flags': {'type': 'list', 'position': 0, 'description': 'Flags assigned to the object.', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['ROLE', 'SYSADM']}}}}}, 'readOnly': {'type': 'boolean'}}}, 'prefix': {'type': 'str', 'position': 0, 'description': 'Key prefix'}}}}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'Not found'}, '412': {'description': 'Validation error'}}}
reset_and_download_private_key = {'tags': ['authentication/v1/signature'], 'summary': 'Reset and download the default user private key (keyID=0), with unlimited validity and no IP constraints. This endpoint is deprecated, use /user/{user}/signature/create instead (INTERNAL)', 'description': '', 'operationId': 'resetAndDownloadPrivateKey', 'produces': ['application/octet-stream', 'application/json'], 'parameters': [{'name': 'user', 'in': 'path', 'description': 'User ID or shortname', 'required': True, 'type': 'str'}], 'deprecated': True, 'responses': {'401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'Not found'}, '412': {'description': 'Validation error'}}}
reset_password = {'tags': ['authentication/v1/password'], 'summary': 'Reset the password for the specified user (INTERNAL)', 'description': '', 'operationId': 'resetPassword', 'produces': ['application/json'], 'parameters': [{'name': 'user', 'in': 'path', 'description': 'ID or shortname of user to reset password for', 'required': True, 'type': 'str'}, {'name': 'domain', 'in': 'query', 'description': 'ID or name of user domain to resolve username from. Defaults to current users domain.', 'required': False, 'type': 'str'}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'dict', 'properties': {'operation': {'type': 'str', 'position': 0, 'description': 'Operation which is authorized by this token'}, 'authorization': {'type': 'str', 'position': 0, 'description': 'Authorization JWS string'}, 'nextURI': {'type': 'str', 'position': 0, 'description': 'The URI to proceed to, appending the authorization JWS as a query parameter'}, 'expires': {'type': 'int', 'position': 0, 'description': 'The timestamp when this authorization expires'}}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'Not found'}, '412': {'description': 'Validation error'}}}
retrieve_sms_token = {'tags': ['authentication/v1/sms'], 'summary': 'Retrieve the SMS code sent to user (PUBLIC)', 'description': 'SMS authentication depends on the verification code sent to the user by SMS reachingthe user. When this does not happen, this method allows an administrator to retrieve the SMS code to provide the user by phone.\n\nTo retrieve the token, the user must provide the administrator with thesession token printed in the browser in the SMS code input screen.', 'operationId': 'retrieveSMSToken', 'produces': ['application/json'], 'parameters': [{'name': 'user', 'in': 'path', 'description': 'User ID or shortname', 'required': True, 'type': 'str'}, {'name': 'tokenSuffix', 'in': 'path', 'description': 'Token suffix', 'required': True, 'type': 'str'}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'dict', 'properties': {'userID': {'type': 'int', 'position': 0, 'description': 'The ID of the target user'}, 'sessionCookie': {'type': 'str', 'position': 0, 'description': 'The full SMS cookie matching the requested suffix'}, 'token': {'type': 'str', 'position': 0, 'description': 'The retrieved SMS token'}}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'Not found'}, '412': {'description': 'Validation error'}}}
revoke_user_api_key_by_id = {'tags': ['authentication/v1/apikey'], 'summary': 'Delete existing user APIkey (PUBLIC)', 'description': '', 'operationId': 'revokeUserApiKeyByID', 'produces': ['application/json'], 'parameters': [{'name': 'user', 'in': 'path', 'description': 'ID or shortname of user', 'required': True, 'type': 'str'}, {'name': 'keyID', 'in': 'path', 'description': 'Key ID', 'required': True, 'type': 'int', 'pattern': '[0-9]+'}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'dict', 'properties': {'revokedKey': {'type': 'dict', 'properties': {'description': {'type': 'str', 'position': 0, 'description': 'Key description'}, 'validSources': {'type': 'list', 'position': 0, 'description': 'Client IP/CIDR networks which the api key will be valid for.', 'uniqueItems': True, 'items': {'type': 'dict', 'properties': {'public': {'type': 'boolean'}, 'ipv6': {'type': 'bool', 'xml': {'attribute': True}, 'readOnly': True}, 'host': {'type': 'bool', 'xml': {'attribute': True}, 'readOnly': True}, 'maskBits': {'type': 'int'}, 'multicast': {'type': 'boolean'}, 'address': {'type': 'str', 'xml': {'attribute': True}, 'readOnly': True}}}}, 'source': {'type': 'dict', 'required': ['provider'], 'properties': {'provider': {'type': 'str', 'position': 0, 'description': 'Provider the API key should be valid for. Can be a cloud provider, static for client IP/CIDR networks or disabled for unlimited source', 'enum': ['staticIP', 'aws', 'disabled']}, 'staticOptions': {'type': 'dict', 'required': ['ipAddresses'], 'properties': {'ipAddresses': {'type': 'list', 'position': 0, 'description': 'IP/CIDR networks the API key should be valid for', 'uniqueItems': True, 'items': {'type': 'string'}, 'maxItems': 2147483647, 'minItems': 1}}}, 'awsOptions': {'type': 'dict', 'properties': {'services': {'type': 'list', 'position': 0, 'description': 'AWS services the API key should be valid for', 'uniqueItems': True, 'items': {'type': 'string'}}, 'regions': {'type': 'list', 'position': 0, 'description': 'AWS regions the API key should be valid for', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['GLOBAL', 'af-south-1', 'ap-east-1', 'ap-northeast-1', 'ap-northeast-2', 'ap-northeast-3', 'ap-south-1', 'ap-south-2', 'ap-southeast-1', 'ap-southeast-2', 'ap-southeast-3', 'ap-southeast-4', 'ca-central-1', 'cn-north-1', 'cn-northwest-1', 'eu-central-1', 'eu-central-2', 'eu-north-1', 'eu-south-1', 'eu-south-2', 'eu-west-1', 'eu-west-2', 'eu-west-3', 'il-central-1', 'me-central-1', 'me-south-1', 'sa-east-1', 'us-east-1', 'us-east-2', 'us-gov-east-1', 'us-gov-west-1', 'us-west-1', 'us-west-2']}}}}}}, 'validUntil': {'type': 'int', 'position': 0, 'description': 'Timestamp when this key expires. If value is 0, key never expires.'}, 'lastUsedTimestamp': {'type': 'int', 'position': 0, 'description': 'Timestamp when this key was last used.'}, 'lastUsedIP': {'type': 'dict', 'properties': {'host': {'type': 'bool', 'xml': {'attribute': True}, 'readOnly': True}, 'public': {'type': 'boolean'}, 'ipv6': {'type': 'bool', 'xml': {'attribute': True}, 'readOnly': True}, 'maskBits': {'type': 'int'}, 'multicast': {'type': 'boolean'}, 'address': {'type': 'str', 'xml': {'attribute': True}, 'readOnly': True}}}, 'constraints': {'type': 'dict', 'properties': {'customers': {'type': 'list', 'uniqueItems': True, 'items': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}}, 'functions': {'type': 'list', 'uniqueItems': True, 'items': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'str', 'position': 0, 'description': 'Function name'}, 'description': {'type': 'str', 'position': 0, 'description': 'Function description'}, 'securityLevel': {'type': 'str', 'position': 0, 'description': 'Function security level', 'enum': ['DEFAULT', 'ADMINISTRATIVE', 'EXTERNAL']}, 'flags': {'type': 'list', 'position': 0, 'description': 'Flags assigned to the object.', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['ROLE', 'SYSADM']}}}}}, 'readOnly': {'type': 'boolean'}}}, 'prefix': {'type': 'str', 'position': 0, 'description': 'Key prefix'}}}}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'Not found'}, '412': {'description': 'Validation error'}}}
revoke_user_api_key_by_prefix = {'tags': ['authentication/v1/apikey'], 'summary': 'Delete existing user APIkey (PUBLIC)', 'description': '', 'operationId': 'revokeUserAPIKeyByPrefix', 'produces': ['application/json'], 'parameters': [{'name': 'user', 'in': 'path', 'description': 'ID or shortname of user', 'required': True, 'type': 'str'}, {'name': 'prefix', 'in': 'path', 'description': 'Key Prefix', 'required': True, 'type': 'str', 'pattern': '[a-z0-9]+/[a-z0-9]+'}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'dict', 'properties': {'revokedKey': {'type': 'dict', 'properties': {'description': {'type': 'str', 'position': 0, 'description': 'Key description'}, 'validSources': {'type': 'list', 'position': 0, 'description': 'Client IP/CIDR networks which the api key will be valid for.', 'uniqueItems': True, 'items': {'type': 'dict', 'properties': {'public': {'type': 'boolean'}, 'ipv6': {'type': 'bool', 'xml': {'attribute': True}, 'readOnly': True}, 'host': {'type': 'bool', 'xml': {'attribute': True}, 'readOnly': True}, 'maskBits': {'type': 'int'}, 'multicast': {'type': 'boolean'}, 'address': {'type': 'str', 'xml': {'attribute': True}, 'readOnly': True}}}}, 'source': {'type': 'dict', 'required': ['provider'], 'properties': {'provider': {'type': 'str', 'position': 0, 'description': 'Provider the API key should be valid for. Can be a cloud provider, static for client IP/CIDR networks or disabled for unlimited source', 'enum': ['staticIP', 'aws', 'disabled']}, 'staticOptions': {'type': 'dict', 'required': ['ipAddresses'], 'properties': {'ipAddresses': {'type': 'list', 'position': 0, 'description': 'IP/CIDR networks the API key should be valid for', 'uniqueItems': True, 'items': {'type': 'string'}, 'maxItems': 2147483647, 'minItems': 1}}}, 'awsOptions': {'type': 'dict', 'properties': {'services': {'type': 'list', 'position': 0, 'description': 'AWS services the API key should be valid for', 'uniqueItems': True, 'items': {'type': 'string'}}, 'regions': {'type': 'list', 'position': 0, 'description': 'AWS regions the API key should be valid for', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['GLOBAL', 'af-south-1', 'ap-east-1', 'ap-northeast-1', 'ap-northeast-2', 'ap-northeast-3', 'ap-south-1', 'ap-south-2', 'ap-southeast-1', 'ap-southeast-2', 'ap-southeast-3', 'ap-southeast-4', 'ca-central-1', 'cn-north-1', 'cn-northwest-1', 'eu-central-1', 'eu-central-2', 'eu-north-1', 'eu-south-1', 'eu-south-2', 'eu-west-1', 'eu-west-2', 'eu-west-3', 'il-central-1', 'me-central-1', 'me-south-1', 'sa-east-1', 'us-east-1', 'us-east-2', 'us-gov-east-1', 'us-gov-west-1', 'us-west-1', 'us-west-2']}}}}}}, 'validUntil': {'type': 'int', 'position': 0, 'description': 'Timestamp when this key expires. If value is 0, key never expires.'}, 'lastUsedTimestamp': {'type': 'int', 'position': 0, 'description': 'Timestamp when this key was last used.'}, 'lastUsedIP': {'type': 'dict', 'properties': {'host': {'type': 'bool', 'xml': {'attribute': True}, 'readOnly': True}, 'public': {'type': 'boolean'}, 'ipv6': {'type': 'bool', 'xml': {'attribute': True}, 'readOnly': True}, 'maskBits': {'type': 'int'}, 'multicast': {'type': 'boolean'}, 'address': {'type': 'str', 'xml': {'attribute': True}, 'readOnly': True}}}, 'constraints': {'type': 'dict', 'properties': {'customers': {'type': 'list', 'uniqueItems': True, 'items': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}}, 'functions': {'type': 'list', 'uniqueItems': True, 'items': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'str', 'position': 0, 'description': 'Function name'}, 'description': {'type': 'str', 'position': 0, 'description': 'Function description'}, 'securityLevel': {'type': 'str', 'position': 0, 'description': 'Function security level', 'enum': ['DEFAULT', 'ADMINISTRATIVE', 'EXTERNAL']}, 'flags': {'type': 'list', 'position': 0, 'description': 'Flags assigned to the object.', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['ROLE', 'SYSADM']}}}}}, 'readOnly': {'type': 'boolean'}}}, 'prefix': {'type': 'str', 'position': 0, 'description': 'Key prefix'}}}}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'Not found'}, '412': {'description': 'Validation error'}}}
revoke_user_totp = {'tags': ['authentication/v1/totp'], 'summary': 'Revoke the current TOTP generator for the user (PUBLIC)', 'description': 'This operation invalidates the current generator config for the user.\nThe user will need to re-initialize the TOTP generator to be able to log inusing TOTP.', 'operationId': 'revokeUserTOTP', 'produces': ['application/json'], 'parameters': [{'name': 'user', 'in': 'path', 'description': 'User ID or shortname', 'required': True, 'type': 'str'}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'object'}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'Not found'}, '412': {'description': 'Validation error'}}}
set_user_openid_configuration = {'tags': ['authentication/v1/openid'], 'summary': 'Set OpenID Provider configuration for user (PUBLIC)', 'description': '', 'operationId': 'setUserOpenIDConfiguration', 'consumes': ['application/json'], 'produces': ['application/json'], 'parameters': [{'name': 'user', 'in': 'path', 'description': 'ID or shortname of user to set config for', 'required': True, 'type': 'str'}, {'in': 'body', 'name': 'body', 'description': 'OpenID configuration request', 'required': False, 'schema': {'type': 'object', 'required': ['mappedUserName', 'provider'], 'properties': {'mappedUserName': {'type': 'str', 'position': 0, 'description': 'The provider username to map to this user'}, 'provider': {'type': 'str', 'position': 0, 'description': 'The ID or shortname of the provider to use for authenticating this user'}}}}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'dict', 'properties': {'provider': {'type': 'dict', 'properties': {'id': {'type': 'str', 'position': 0, 'description': 'ID of this provider'}, 'shortName': {'type': 'str', 'position': 0, 'description': 'The provider shortname'}, 'name': {'type': 'str', 'position': 0, 'description': 'The provider name'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the customer.'}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Shortname of the customer.'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}}, 'description': 'SPI CustomerInfo'}}}, 'mappedUserName': {'type': 'str', 'position': 0, 'description': 'The provider username that this user is mapped to'}}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'User not found'}, '412': {'description': 'Invalid argument'}}}
setup_user_ldap = {'tags': ['authentication/v1/ldap'], 'summary': 'Configure user LDAP settings (INTERNAL)', 'description': '', 'operationId': 'setupUserLDAP', 'consumes': ['application/json'], 'produces': ['application/json'], 'parameters': [{'name': 'user', 'in': 'path', 'description': 'User ID or shortname', 'required': True, 'type': 'str'}, {'in': 'body', 'name': 'body', 'description': 'LDAP settings', 'required': False, 'schema': {'type': 'object', 'properties': {'userName': {'type': 'str', 'position': 0, 'description': 'LDAP username to set for user'}}}}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'object'}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'Not found'}, '412': {'description': 'Validation error'}}}
unblock_user = {'tags': ['authentication/v1'], 'summary': 'Administratively unblock a user (PUBLIC)', 'description': '', 'operationId': 'unblockUser', 'produces': ['application/json'], 'parameters': [{'name': 'user', 'in': 'path', 'description': 'ID or shortname of user to modify', 'required': True, 'type': 'str'}, {'name': 'domain', 'in': 'query', 'description': 'Domain to lookup username in, defaults to current users domain', 'required': False, 'type': 'str'}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'object'}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'User not found'}, '412': {'description': 'Validation failed'}}}