"""Autogenerated API"""
from argus_api.session import get_session
from typing import TYPE_CHECKING, Optional
if TYPE_CHECKING:
    from argus_api.session import ArgusAPISession


def import_asset(
    assetName: str = None,
    dataSource: str = None,
    customer: str = None,
    assetIdentification: dict = None,
    components: dict = None,
    observations: dict = None,
    ttl: int = None,
    json: bool = True,
    verify: Optional[bool] = None,
    proxies: Optional[dict] = None,
    apiKey: Optional[str] = None,
    authentication: Optional[dict] = None,
    server_url: Optional[str] = None,
    body: Optional[dict] = None,
    api_session: Optional["ArgusAPISession"] = None,
) -> dict:
    """Imports Assets (DEV)
    
    :param str assetName: Display name of the Asset. Used if new asset. If not set a random UUID will be generated
    :param str dataSource: Required ID or short name of the data source
    :param str customer: ID or short name of the asset\'s customer
    :param dict assetIdentification: Request to identify an Asset
    :param list components: Specify components to import
    :param list observations: Observations to be added to the asset
    :param int ttl: Time to live duration of this asset since last seen\, 0 means won\'t expire.
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :param api_session: session to use for this request. If not set, the global session will be used.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ValidationErrorException: on 412
    :raises ArgusException: on other status codes
    
    :returns: dictionary translated from JSON
    """

    route = "/assets/v2/import/asset".format()

    session = api_session or get_session()
    headers = {}

    body = body or {}
    # Only send assetName if the argument was provided, don't send null values
    if assetName is not None:
        body.update({"assetName": assetName})
    # Only send dataSource if the argument was provided, don't send null values
    if dataSource is not None:
        body.update({"dataSource": dataSource})
    # Only send customer if the argument was provided, don't send null values
    if customer is not None:
        body.update({"customer": customer})
    # Only send assetIdentification if the argument was provided, don't send null values
    if assetIdentification is not None:
        body.update({"assetIdentification": assetIdentification})
    # Only send components if the argument was provided, don't send null values
    if components is not None:
        body.update({"components": components})
    # Only send observations if the argument was provided, don't send null values
    if observations is not None:
        body.update({"observations": observations})
    # Only send ttl if the argument was provided, don't send null values
    if ttl is not None:
        body.update({"ttl": ttl})

    query_parameters = {}

    response = session.put(
        route,
        params=query_parameters or None,
        json=body,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response
