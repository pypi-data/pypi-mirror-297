"""Autogenerated API schema"""
from argus_api import session


initiate_api_key = {'tags': ['authentication/v1/apikey'], 'summary': 'Initiate a new apikey for current user (PUBLIC)', 'description': '', 'operationId': 'initiateApiKey', 'consumes': ['application/json'], 'produces': ['application/json'], 'parameters': [{'in': 'body', 'name': 'body', 'description': 'API key initialization request', 'required': False, 'schema': {'type': 'object', 'required': ['description'], 'properties': {'description': {'type': 'str', 'description': '[\\s\\w\\{\\}\\$\\-\\(\\)\\.\\[\\]"\\\'_/\\\\,\\*\\+\\#:@!?;=]*'}, 'validSources': {'type': 'str', 'description': 'Client IP/CIDR networks which the api key will be valid for. Deprecated! Instead use source where you set provider to´staticIP´ and specify networks by setting staticOptions'}, 'source': {'type': 'dict', 'required': ['provider'], 'properties': {'provider': {'type': 'str', 'position': 0, 'description': 'Provider the API key should be valid for. Can be a cloud provider, static for client IP/CIDR networks or disabled for unlimited source (default staticIP)', 'enum': ['staticIP', 'aws', 'disabled']}, 'awsOptions': {'type': 'dict', 'properties': {'services': {'type': 'list', 'position': 0, 'description': 'AWS services the API key should be valid for', 'uniqueItems': True, 'items': {'type': 'string'}}, 'regions': {'type': 'list', 'position': 0, 'description': 'AWS regions the API key should be valid for', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['GLOBAL', 'af-south-1', 'ap-east-1', 'ap-northeast-1', 'ap-northeast-2', 'ap-northeast-3', 'ap-south-1', 'ap-south-2', 'ap-southeast-1', 'ap-southeast-2', 'ap-southeast-3', 'ap-southeast-4', 'ca-central-1', 'cn-north-1', 'cn-northwest-1', 'eu-central-1', 'eu-central-2', 'eu-north-1', 'eu-south-1', 'eu-south-2', 'eu-west-1', 'eu-west-2', 'eu-west-3', 'il-central-1', 'me-central-1', 'me-south-1', 'sa-east-1', 'us-east-1', 'us-east-2', 'us-gov-east-1', 'us-gov-west-1', 'us-west-1', 'us-west-2']}}}}, 'staticOptions': {'type': 'dict', 'required': ['ipAddresses'], 'properties': {'ipAddresses': {'type': 'list', 'position': 0, 'description': 'IP addresses the static API key will be valid for', 'uniqueItems': True, 'items': {'type': 'string'}, 'maxItems': 2147483647, 'minItems': 1}}}}}, 'disableSourceRestriction': {'type': 'bool', 'position': 0, 'description': 'Request API-key without source restriction. If key without source restriction is not permitted, a 412 error will be returned. Deprecated! Instead set provider in source to ´disabled´ (default false)', 'default': False}, 'expirationDays': {'type': 'int', 'position': 0, 'description': 'Requested expiration days, 0 means unlimited. Default is 3 months. If user does not have permissions to specify expiration period, an error will be returned.', 'minimum': 0}, 'disableExpiration': {'type': 'bool', 'position': 0, 'description': 'Request API-key with unlimited expiration. If unlimited expiration is not permitted, a 412 error will be returned. (default false)', 'default': False}, 'sessionConstraints': {'type': 'dict', 'properties': {'customerID': {'type': 'list', 'position': 0, 'description': 'List of customers to constrain this session to. Default is all available customers.', 'uniqueItems': True, 'items': {'type': 'int'}}, 'function': {'type': 'list', 'position': 0, 'description': 'List of functions (by name) to constrain this session to. Default is all available functions.', 'uniqueItems': True, 'items': {'type': 'string'}}, 'functionID': {'type': 'list', 'position': 0, 'description': 'List of functions (by ID) to constrain this session to. Default is all available functions.', 'uniqueItems': True, 'items': {'type': 'int'}}, 'readOnly': {'type': 'bool', 'position': 0, 'description': 'If set, this session will be read only'}}}, 'password': {'type': 'str', 'position': 0, 'description': 'User password to verify this request'}, 'authorization': {'type': 'str', 'position': 0, 'description': "User authorization token obtained from the user authorization endpoint. The token must be issued for operation 'apikey.create'"}}}}], 'responses': {'201': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'dict', 'properties': {'keyDescriptor': {'type': 'dict', 'properties': {'description': {'type': 'str', 'position': 0, 'description': 'Key description'}, 'validSources': {'type': 'list', 'position': 0, 'description': 'Client IP/CIDR networks which the api key will be valid for.', 'uniqueItems': True, 'items': {'type': 'dict', 'properties': {'public': {'type': 'boolean'}, 'ipv6': {'type': 'bool', 'xml': {'attribute': True}, 'readOnly': True}, 'host': {'type': 'bool', 'xml': {'attribute': True}, 'readOnly': True}, 'maskBits': {'type': 'int'}, 'multicast': {'type': 'boolean'}, 'address': {'type': 'str', 'xml': {'attribute': True}, 'readOnly': True}}}}, 'source': {'type': 'dict', 'required': ['provider'], 'properties': {'provider': {'type': 'str', 'position': 0, 'description': 'Provider the API key should be valid for. Can be a cloud provider, static for client IP/CIDR networks or disabled for unlimited source', 'enum': ['staticIP', 'aws', 'disabled']}, 'staticOptions': {'type': 'dict', 'required': ['ipAddresses'], 'properties': {'ipAddresses': {'type': 'list', 'position': 0, 'description': 'IP/CIDR networks the API key should be valid for', 'uniqueItems': True, 'items': {'type': 'string'}, 'maxItems': 2147483647, 'minItems': 1}}}, 'awsOptions': {'type': 'dict', 'properties': {'services': {'type': 'list', 'position': 0, 'description': 'AWS services the API key should be valid for', 'uniqueItems': True, 'items': {'type': 'string'}}, 'regions': {'type': 'list', 'position': 0, 'description': 'AWS regions the API key should be valid for', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['GLOBAL', 'af-south-1', 'ap-east-1', 'ap-northeast-1', 'ap-northeast-2', 'ap-northeast-3', 'ap-south-1', 'ap-south-2', 'ap-southeast-1', 'ap-southeast-2', 'ap-southeast-3', 'ap-southeast-4', 'ca-central-1', 'cn-north-1', 'cn-northwest-1', 'eu-central-1', 'eu-central-2', 'eu-north-1', 'eu-south-1', 'eu-south-2', 'eu-west-1', 'eu-west-2', 'eu-west-3', 'il-central-1', 'me-central-1', 'me-south-1', 'sa-east-1', 'us-east-1', 'us-east-2', 'us-gov-east-1', 'us-gov-west-1', 'us-west-1', 'us-west-2']}}}}}}, 'validUntil': {'type': 'int', 'position': 0, 'description': 'Timestamp when this key expires. If value is 0, key never expires.'}, 'lastUsedTimestamp': {'type': 'int', 'position': 0, 'description': 'Timestamp when this key was last used.'}, 'lastUsedIP': {'type': 'dict', 'properties': {'host': {'type': 'bool', 'xml': {'attribute': True}, 'readOnly': True}, 'public': {'type': 'boolean'}, 'ipv6': {'type': 'bool', 'xml': {'attribute': True}, 'readOnly': True}, 'maskBits': {'type': 'int'}, 'multicast': {'type': 'boolean'}, 'address': {'type': 'str', 'xml': {'attribute': True}, 'readOnly': True}}}, 'constraints': {'type': 'dict', 'properties': {'customers': {'type': 'list', 'uniqueItems': True, 'items': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}}, 'functions': {'type': 'list', 'uniqueItems': True, 'items': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'str', 'position': 0, 'description': 'Function name'}, 'description': {'type': 'str', 'position': 0, 'description': 'Function description'}, 'securityLevel': {'type': 'str', 'position': 0, 'description': 'Function security level', 'enum': ['DEFAULT', 'ADMINISTRATIVE', 'EXTERNAL']}, 'flags': {'type': 'list', 'position': 0, 'description': 'Flags assigned to the object.', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['ROLE', 'SYSADM']}}}}}, 'readOnly': {'type': 'boolean'}}}, 'prefix': {'type': 'str', 'position': 0, 'description': 'Key prefix'}}}, 'apiKeyString': {'type': 'string'}}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'Not found'}, '412': {'description': 'Validation error'}}}
list_api_keys = {'tags': ['authentication/v1/apikey'], 'summary': 'List current user apikeys (PUBLIC)', 'description': '', 'operationId': 'listApiKeys', 'produces': ['application/json'], 'parameters': [], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'dict', 'properties': {'keys': {'type': 'list', 'position': 0, 'description': 'The list of configured API keys', 'items': {'type': 'dict', 'properties': {'description': {'type': 'str', 'position': 0, 'description': 'Key description'}, 'validSources': {'type': 'list', 'position': 0, 'description': 'Client IP/CIDR networks which the api key will be valid for.', 'uniqueItems': True, 'items': {'type': 'dict', 'properties': {'public': {'type': 'boolean'}, 'ipv6': {'type': 'bool', 'xml': {'attribute': True}, 'readOnly': True}, 'host': {'type': 'bool', 'xml': {'attribute': True}, 'readOnly': True}, 'maskBits': {'type': 'int'}, 'multicast': {'type': 'boolean'}, 'address': {'type': 'str', 'xml': {'attribute': True}, 'readOnly': True}}}}, 'source': {'type': 'dict', 'required': ['provider'], 'properties': {'provider': {'type': 'str', 'position': 0, 'description': 'Provider the API key should be valid for. Can be a cloud provider, static for client IP/CIDR networks or disabled for unlimited source', 'enum': ['staticIP', 'aws', 'disabled']}, 'staticOptions': {'type': 'dict', 'required': ['ipAddresses'], 'properties': {'ipAddresses': {'type': 'list', 'position': 0, 'description': 'IP/CIDR networks the API key should be valid for', 'uniqueItems': True, 'items': {'type': 'string'}, 'maxItems': 2147483647, 'minItems': 1}}}, 'awsOptions': {'type': 'dict', 'properties': {'services': {'type': 'list', 'position': 0, 'description': 'AWS services the API key should be valid for', 'uniqueItems': True, 'items': {'type': 'string'}}, 'regions': {'type': 'list', 'position': 0, 'description': 'AWS regions the API key should be valid for', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['GLOBAL', 'af-south-1', 'ap-east-1', 'ap-northeast-1', 'ap-northeast-2', 'ap-northeast-3', 'ap-south-1', 'ap-south-2', 'ap-southeast-1', 'ap-southeast-2', 'ap-southeast-3', 'ap-southeast-4', 'ca-central-1', 'cn-north-1', 'cn-northwest-1', 'eu-central-1', 'eu-central-2', 'eu-north-1', 'eu-south-1', 'eu-south-2', 'eu-west-1', 'eu-west-2', 'eu-west-3', 'il-central-1', 'me-central-1', 'me-south-1', 'sa-east-1', 'us-east-1', 'us-east-2', 'us-gov-east-1', 'us-gov-west-1', 'us-west-1', 'us-west-2']}}}}}}, 'validUntil': {'type': 'int', 'position': 0, 'description': 'Timestamp when this key expires. If value is 0, key never expires.'}, 'lastUsedTimestamp': {'type': 'int', 'position': 0, 'description': 'Timestamp when this key was last used.'}, 'lastUsedIP': {'type': 'dict', 'properties': {'host': {'type': 'bool', 'xml': {'attribute': True}, 'readOnly': True}, 'public': {'type': 'boolean'}, 'ipv6': {'type': 'bool', 'xml': {'attribute': True}, 'readOnly': True}, 'maskBits': {'type': 'int'}, 'multicast': {'type': 'boolean'}, 'address': {'type': 'str', 'xml': {'attribute': True}, 'readOnly': True}}}, 'constraints': {'type': 'dict', 'properties': {'customers': {'type': 'list', 'uniqueItems': True, 'items': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}}, 'functions': {'type': 'list', 'uniqueItems': True, 'items': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'str', 'position': 0, 'description': 'Function name'}, 'description': {'type': 'str', 'position': 0, 'description': 'Function description'}, 'securityLevel': {'type': 'str', 'position': 0, 'description': 'Function security level', 'enum': ['DEFAULT', 'ADMINISTRATIVE', 'EXTERNAL']}, 'flags': {'type': 'list', 'position': 0, 'description': 'Flags assigned to the object.', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['ROLE', 'SYSADM']}}}}}, 'readOnly': {'type': 'boolean'}}}, 'prefix': {'type': 'str', 'position': 0, 'description': 'Key prefix'}}}}}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'Not found'}, '412': {'description': 'Validation error'}}}
renew_api_key_by_id = {'tags': ['authentication/v1/apikey'], 'summary': 'Renew existing API-key (PUBLIC)', 'description': '', 'operationId': 'renewApiKeyByID', 'consumes': ['application/json'], 'produces': ['application/json'], 'parameters': [{'name': 'keyID', 'in': 'path', 'description': 'Key ID', 'required': True, 'type': 'int', 'pattern': '[0-9]+'}, {'in': 'body', 'name': 'body', 'description': 'API key renewal request', 'required': False, 'schema': {'type': 'object', 'properties': {'expirationDays': {'type': 'int', 'position': 0, 'description': 'Requested expiration days, 0 means unlimited. Default is 3 months. If user does not have permissions to specify expiration period, an error will be returned.', 'minimum': 0}, 'disableExpiration': {'type': 'bool', 'position': 0, 'description': 'Request API-key with unlimited expiration. If unlimited expiration is not permitted, a 412 error will be returned. (default false)', 'default': False}, 'password': {'type': 'str', 'position': 0, 'description': 'User password to verify this request'}, 'authorization': {'type': 'str', 'position': 0, 'description': "User authorization token obtained from the user authorization endpoint. The token must be issued for operation 'apikey.renew'"}}}}], 'deprecated': True, 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'dict', 'properties': {'renewedKey': {'type': 'dict', 'properties': {'description': {'type': 'str', 'position': 0, 'description': 'Key description'}, 'validSources': {'type': 'list', 'position': 0, 'description': 'Client IP/CIDR networks which the api key will be valid for.', 'uniqueItems': True, 'items': {'type': 'dict', 'properties': {'public': {'type': 'boolean'}, 'ipv6': {'type': 'bool', 'xml': {'attribute': True}, 'readOnly': True}, 'host': {'type': 'bool', 'xml': {'attribute': True}, 'readOnly': True}, 'maskBits': {'type': 'int'}, 'multicast': {'type': 'boolean'}, 'address': {'type': 'str', 'xml': {'attribute': True}, 'readOnly': True}}}}, 'source': {'type': 'dict', 'required': ['provider'], 'properties': {'provider': {'type': 'str', 'position': 0, 'description': 'Provider the API key should be valid for. Can be a cloud provider, static for client IP/CIDR networks or disabled for unlimited source', 'enum': ['staticIP', 'aws', 'disabled']}, 'staticOptions': {'type': 'dict', 'required': ['ipAddresses'], 'properties': {'ipAddresses': {'type': 'list', 'position': 0, 'description': 'IP/CIDR networks the API key should be valid for', 'uniqueItems': True, 'items': {'type': 'string'}, 'maxItems': 2147483647, 'minItems': 1}}}, 'awsOptions': {'type': 'dict', 'properties': {'services': {'type': 'list', 'position': 0, 'description': 'AWS services the API key should be valid for', 'uniqueItems': True, 'items': {'type': 'string'}}, 'regions': {'type': 'list', 'position': 0, 'description': 'AWS regions the API key should be valid for', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['GLOBAL', 'af-south-1', 'ap-east-1', 'ap-northeast-1', 'ap-northeast-2', 'ap-northeast-3', 'ap-south-1', 'ap-south-2', 'ap-southeast-1', 'ap-southeast-2', 'ap-southeast-3', 'ap-southeast-4', 'ca-central-1', 'cn-north-1', 'cn-northwest-1', 'eu-central-1', 'eu-central-2', 'eu-north-1', 'eu-south-1', 'eu-south-2', 'eu-west-1', 'eu-west-2', 'eu-west-3', 'il-central-1', 'me-central-1', 'me-south-1', 'sa-east-1', 'us-east-1', 'us-east-2', 'us-gov-east-1', 'us-gov-west-1', 'us-west-1', 'us-west-2']}}}}}}, 'validUntil': {'type': 'int', 'position': 0, 'description': 'Timestamp when this key expires. If value is 0, key never expires.'}, 'lastUsedTimestamp': {'type': 'int', 'position': 0, 'description': 'Timestamp when this key was last used.'}, 'lastUsedIP': {'type': 'dict', 'properties': {'host': {'type': 'bool', 'xml': {'attribute': True}, 'readOnly': True}, 'public': {'type': 'boolean'}, 'ipv6': {'type': 'bool', 'xml': {'attribute': True}, 'readOnly': True}, 'maskBits': {'type': 'int'}, 'multicast': {'type': 'boolean'}, 'address': {'type': 'str', 'xml': {'attribute': True}, 'readOnly': True}}}, 'constraints': {'type': 'dict', 'properties': {'customers': {'type': 'list', 'uniqueItems': True, 'items': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}}, 'functions': {'type': 'list', 'uniqueItems': True, 'items': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'str', 'position': 0, 'description': 'Function name'}, 'description': {'type': 'str', 'position': 0, 'description': 'Function description'}, 'securityLevel': {'type': 'str', 'position': 0, 'description': 'Function security level', 'enum': ['DEFAULT', 'ADMINISTRATIVE', 'EXTERNAL']}, 'flags': {'type': 'list', 'position': 0, 'description': 'Flags assigned to the object.', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['ROLE', 'SYSADM']}}}}}, 'readOnly': {'type': 'boolean'}}}, 'prefix': {'type': 'str', 'position': 0, 'description': 'Key prefix'}}}}}}}}}}
renew_api_key_by_prefix = {'tags': ['authentication/v1/apikey'], 'summary': 'Renew an apikey for current user (PUBLIC)', 'description': 'API keys have limited validity. This operationallows the user to renew a key, to allow it to remain functional for a new validity period.', 'operationId': 'renewApiKeyByPrefix', 'consumes': ['application/json'], 'produces': ['application/json'], 'parameters': [{'name': 'prefix', 'in': 'path', 'description': 'Key prefix on the form 1ab/2c', 'required': True, 'type': 'str', 'pattern': '[a-z0-9]+/[a-z0-9]+'}, {'in': 'body', 'name': 'body', 'description': 'API key renewal request', 'required': False, 'schema': {'type': 'object', 'properties': {'expirationDays': {'type': 'int', 'position': 0, 'description': 'Requested expiration days, 0 means unlimited. Default is 3 months. If user does not have permissions to specify expiration period, an error will be returned.', 'minimum': 0}, 'disableExpiration': {'type': 'bool', 'position': 0, 'description': 'Request API-key with unlimited expiration. If unlimited expiration is not permitted, a 412 error will be returned. (default false)', 'default': False}, 'password': {'type': 'str', 'position': 0, 'description': 'User password to verify this request'}, 'authorization': {'type': 'str', 'position': 0, 'description': "User authorization token obtained from the user authorization endpoint. The token must be issued for operation 'apikey.renew'"}}}}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'dict', 'properties': {'renewedKey': {'type': 'dict', 'properties': {'description': {'type': 'str', 'position': 0, 'description': 'Key description'}, 'validSources': {'type': 'list', 'position': 0, 'description': 'Client IP/CIDR networks which the api key will be valid for.', 'uniqueItems': True, 'items': {'type': 'dict', 'properties': {'public': {'type': 'boolean'}, 'ipv6': {'type': 'bool', 'xml': {'attribute': True}, 'readOnly': True}, 'host': {'type': 'bool', 'xml': {'attribute': True}, 'readOnly': True}, 'maskBits': {'type': 'int'}, 'multicast': {'type': 'boolean'}, 'address': {'type': 'str', 'xml': {'attribute': True}, 'readOnly': True}}}}, 'source': {'type': 'dict', 'required': ['provider'], 'properties': {'provider': {'type': 'str', 'position': 0, 'description': 'Provider the API key should be valid for. Can be a cloud provider, static for client IP/CIDR networks or disabled for unlimited source', 'enum': ['staticIP', 'aws', 'disabled']}, 'staticOptions': {'type': 'dict', 'required': ['ipAddresses'], 'properties': {'ipAddresses': {'type': 'list', 'position': 0, 'description': 'IP/CIDR networks the API key should be valid for', 'uniqueItems': True, 'items': {'type': 'string'}, 'maxItems': 2147483647, 'minItems': 1}}}, 'awsOptions': {'type': 'dict', 'properties': {'services': {'type': 'list', 'position': 0, 'description': 'AWS services the API key should be valid for', 'uniqueItems': True, 'items': {'type': 'string'}}, 'regions': {'type': 'list', 'position': 0, 'description': 'AWS regions the API key should be valid for', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['GLOBAL', 'af-south-1', 'ap-east-1', 'ap-northeast-1', 'ap-northeast-2', 'ap-northeast-3', 'ap-south-1', 'ap-south-2', 'ap-southeast-1', 'ap-southeast-2', 'ap-southeast-3', 'ap-southeast-4', 'ca-central-1', 'cn-north-1', 'cn-northwest-1', 'eu-central-1', 'eu-central-2', 'eu-north-1', 'eu-south-1', 'eu-south-2', 'eu-west-1', 'eu-west-2', 'eu-west-3', 'il-central-1', 'me-central-1', 'me-south-1', 'sa-east-1', 'us-east-1', 'us-east-2', 'us-gov-east-1', 'us-gov-west-1', 'us-west-1', 'us-west-2']}}}}}}, 'validUntil': {'type': 'int', 'position': 0, 'description': 'Timestamp when this key expires. If value is 0, key never expires.'}, 'lastUsedTimestamp': {'type': 'int', 'position': 0, 'description': 'Timestamp when this key was last used.'}, 'lastUsedIP': {'type': 'dict', 'properties': {'host': {'type': 'bool', 'xml': {'attribute': True}, 'readOnly': True}, 'public': {'type': 'boolean'}, 'ipv6': {'type': 'bool', 'xml': {'attribute': True}, 'readOnly': True}, 'maskBits': {'type': 'int'}, 'multicast': {'type': 'boolean'}, 'address': {'type': 'str', 'xml': {'attribute': True}, 'readOnly': True}}}, 'constraints': {'type': 'dict', 'properties': {'customers': {'type': 'list', 'uniqueItems': True, 'items': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}}, 'functions': {'type': 'list', 'uniqueItems': True, 'items': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'str', 'position': 0, 'description': 'Function name'}, 'description': {'type': 'str', 'position': 0, 'description': 'Function description'}, 'securityLevel': {'type': 'str', 'position': 0, 'description': 'Function security level', 'enum': ['DEFAULT', 'ADMINISTRATIVE', 'EXTERNAL']}, 'flags': {'type': 'list', 'position': 0, 'description': 'Flags assigned to the object.', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['ROLE', 'SYSADM']}}}}}, 'readOnly': {'type': 'boolean'}}}, 'prefix': {'type': 'str', 'position': 0, 'description': 'Key prefix'}}}}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'Not found'}, '412': {'description': 'Validation error'}}}
revoke_api_key_by_id = {'tags': ['authentication/v1/apikey'], 'summary': 'null (PUBLIC)', 'operationId': 'revokeApiKeyByID', 'produces': ['application/json'], 'parameters': [{'name': 'keyID', 'in': 'path', 'description': 'Key ID', 'required': True, 'type': 'int', 'pattern': '[0-9]+'}], 'deprecated': True, 'responses': {'default': {'description': 'successful operation'}}}
revoke_api_key_by_prefix = {'tags': ['authentication/v1/apikey'], 'summary': 'Revoke an apikey from current user (PUBLIC)', 'description': '', 'operationId': 'revokeApiKeyByPrefix', 'produces': ['application/json'], 'parameters': [{'name': 'prefix', 'in': 'path', 'description': 'Key prefix on the form 1ab/2c', 'required': True, 'type': 'str', 'pattern': '[a-z0-9]+/[a-z0-9]+'}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'dict', 'properties': {'keys': {'type': 'list', 'position': 0, 'description': 'The list of configured API keys', 'items': {'type': 'dict', 'properties': {'description': {'type': 'str', 'position': 0, 'description': 'Key description'}, 'validSources': {'type': 'list', 'position': 0, 'description': 'Client IP/CIDR networks which the api key will be valid for.', 'uniqueItems': True, 'items': {'type': 'dict', 'properties': {'public': {'type': 'boolean'}, 'ipv6': {'type': 'bool', 'xml': {'attribute': True}, 'readOnly': True}, 'host': {'type': 'bool', 'xml': {'attribute': True}, 'readOnly': True}, 'maskBits': {'type': 'int'}, 'multicast': {'type': 'boolean'}, 'address': {'type': 'str', 'xml': {'attribute': True}, 'readOnly': True}}}}, 'source': {'type': 'dict', 'required': ['provider'], 'properties': {'provider': {'type': 'str', 'position': 0, 'description': 'Provider the API key should be valid for. Can be a cloud provider, static for client IP/CIDR networks or disabled for unlimited source', 'enum': ['staticIP', 'aws', 'disabled']}, 'staticOptions': {'type': 'dict', 'required': ['ipAddresses'], 'properties': {'ipAddresses': {'type': 'list', 'position': 0, 'description': 'IP/CIDR networks the API key should be valid for', 'uniqueItems': True, 'items': {'type': 'string'}, 'maxItems': 2147483647, 'minItems': 1}}}, 'awsOptions': {'type': 'dict', 'properties': {'services': {'type': 'list', 'position': 0, 'description': 'AWS services the API key should be valid for', 'uniqueItems': True, 'items': {'type': 'string'}}, 'regions': {'type': 'list', 'position': 0, 'description': 'AWS regions the API key should be valid for', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['GLOBAL', 'af-south-1', 'ap-east-1', 'ap-northeast-1', 'ap-northeast-2', 'ap-northeast-3', 'ap-south-1', 'ap-south-2', 'ap-southeast-1', 'ap-southeast-2', 'ap-southeast-3', 'ap-southeast-4', 'ca-central-1', 'cn-north-1', 'cn-northwest-1', 'eu-central-1', 'eu-central-2', 'eu-north-1', 'eu-south-1', 'eu-south-2', 'eu-west-1', 'eu-west-2', 'eu-west-3', 'il-central-1', 'me-central-1', 'me-south-1', 'sa-east-1', 'us-east-1', 'us-east-2', 'us-gov-east-1', 'us-gov-west-1', 'us-west-1', 'us-west-2']}}}}}}, 'validUntil': {'type': 'int', 'position': 0, 'description': 'Timestamp when this key expires. If value is 0, key never expires.'}, 'lastUsedTimestamp': {'type': 'int', 'position': 0, 'description': 'Timestamp when this key was last used.'}, 'lastUsedIP': {'type': 'dict', 'properties': {'host': {'type': 'bool', 'xml': {'attribute': True}, 'readOnly': True}, 'public': {'type': 'boolean'}, 'ipv6': {'type': 'bool', 'xml': {'attribute': True}, 'readOnly': True}, 'maskBits': {'type': 'int'}, 'multicast': {'type': 'boolean'}, 'address': {'type': 'str', 'xml': {'attribute': True}, 'readOnly': True}}}, 'constraints': {'type': 'dict', 'properties': {'customers': {'type': 'list', 'uniqueItems': True, 'items': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}}, 'functions': {'type': 'list', 'uniqueItems': True, 'items': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'str', 'position': 0, 'description': 'Function name'}, 'description': {'type': 'str', 'position': 0, 'description': 'Function description'}, 'securityLevel': {'type': 'str', 'position': 0, 'description': 'Function security level', 'enum': ['DEFAULT', 'ADMINISTRATIVE', 'EXTERNAL']}, 'flags': {'type': 'list', 'position': 0, 'description': 'Flags assigned to the object.', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['ROLE', 'SYSADM']}}}}}, 'readOnly': {'type': 'boolean'}}}, 'prefix': {'type': 'str', 'position': 0, 'description': 'Key prefix'}}}}}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'Not found'}, '412': {'description': 'Validation error'}}}
#: "initiate_1" is an alias for "initiate_api_key"
initiate_1 = initiate_api_key
#: "list_1" is an alias for "list_api_keys"
list_1 = list_api_keys
#: "renew_2" is an alias for "renew_api_key_by_prefix"
renew_2 = renew_api_key_by_prefix
#: "renew_3" is an alias for "renew_api_key_by_id"
renew_3 = renew_api_key_by_id
#: "revoke_2" is an alias for "revoke_api_key_by_id"
revoke_2 = revoke_api_key_by_id
#: "revoke_3" is an alias for "revoke_api_key_by_prefix"
revoke_3 = revoke_api_key_by_prefix