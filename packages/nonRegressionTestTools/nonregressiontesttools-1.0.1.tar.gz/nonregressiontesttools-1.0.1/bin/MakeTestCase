#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#**************************************************
__author__  = "Teddy Chantrait"
__email__   = "teddy.chantrait@gmail.com"
__status__  = "Development"
__date__    = "lun. oct. 5 08:55:47 CEST 2015"
__version__ = 3.0
#**************************************************
import datetime
import sys
import os
import pwd

def WriteTitle():
    Title = """#!/usr/bin/env python
    # -*- coding: utf-8 -*-
# **************************************************
__author__  = \""""+str(pwd.getpwuid(os.getuid()).pw_name)+"""\"
__email__   = "teddy.chantrait@gmail.com"
__status__  = "Development"
__date__    = \""""+str(datetime.datetime.now())+"""\"
__version__ = 3.0
# **************************************************
"""
    return Title


def WriteTamplateForTest():
   Template = """import os
# Usefull variable to scpecified current work directory
path = os.path.abspath(os.path.dirname(__file__))
# Python list of the Outputs generated by the TestCase for each commande
OutputFiles = [['OutputFile1_cmd1.txt','OutputFile2_cmd1.dat'],['OutputFile1_cmd2.txt','OutputFile2_cmd2.dat']]
# Python list of the commandes to run the TestCase
Commandes = ['Commande1','Commande2']
# Specified the maximum time (s) allocated to run the TestCase
TMAXTEST = 10
"""
   return Template


def WriteTamplateForSlurmTest(name="", cmd="python3 ", tmax=10):
   Template = """#!/bin/bash

#SBATCH -J {name}               # name of the job
#SBATCH -n 1                  # number of computation nodes requested
#SBATCH -c 1                  # number of core per nodes
#SBATCH -t 0:02:05            # time limit in hh:mm:ss (default is 00:15:00) NE FONCTIONE VRAISSEMBLABLEMENT PAS
#SBATCH -p compute.q          # computation queue (can be standard.q,
                              # bigmem.q or compute.q (union of previous one)
# #SBATCH -o slurm_%x_%j.o         # name of stdout
# #SBATCH -e slurm_%x_%j.e         # name of stderr

goon(){{
    echo "goon_"$1"_"
    if [ $1 -ne 0 ]; then
	echo $1>.test_results/$SLURM_JOB_NAME.res
	exit
    fi
}}

mkdir -p .test_results
rm -f .test_results/$SLURM_JOB_NAME.res
source do_config
timeout -s SIGKILL {tmax} {cmd}
sig=`echo $?`
goon $sig
echo $sig>.test_results/$SLURM_JOB_NAME.res""".format(name=name, tmax=tmax, cmd=cmd)
   return Template

# Lines = ''
# if len(sys.argv) > 1:
#     Arg1 = sys.argv[1]
#     if Arg1 == "-v":
#         Lines = WriteTitle()
#         Lines += WriteTamplateForTest()
# else:
#     Lines = WriteTamplateForTest()
# CommonNameOfConfigationFileTest = os.environ['CommonNameOfConfigationFileTest']
# if  not(os.path.isfile(CommonNameOfConfigationFileTest)):
#     f1 = open(CommonNameOfConfigationFileTest,'w')
#     f1.write(Lines)
#     f1.close()
# else:
#     print(" \033[33mWARNING:\033[0m file {} already exists".format(CommonNameOfConfigationFileTest))
# if len(sys.argv) > 1:


def print_help():
    message = """
    Create a tempale slurm for the test case

    MakeTestCase [args]
      -n:\t name of file created (without extension)
      -cmd:\t commande to run
      -tmax:\t time make allow to run the test
      -h:\t print this message
    """
    print(message)


def make_test():
    name = ""
    cmd = ""
    tmax = 10
    for arg in sys.argv:
        if arg.startswith("-n"):
            name = arg.split('=')[1]
        if arg.startswith("-cmd"):
            cmd = arg.split('=')[1]
        if arg.startswith("-tmax"):
            tmax = arg.split('=')[1]
        if arg.startswith("-h") or arg.startswith("--h"):
            print_help()
            return
    lines = WriteTamplateForSlurmTest(name, cmd, tmax)

    if not(os.path.isfile(sys.argv[1])):
        f1 = open(name+'.slurm', 'w')
        f1.write(lines)
        f1.close()
    else:
        print(" \033[33mWARNING:\033[0m file {} already exists".format())
    return


make_test()
