# pyproject.toml

[build-system]
requires = ["setuptools>=69.0.2", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "torchcell"
version = "0.2.8"
description = "An example package"
readme = "README.md"
authors = [{ name = "Michael Volk", email = "michaeljvolk7@gmail.com" }]
license = { file = "LICENSE" }
classifiers = [
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
]
keywords = ["An example package", "starving artist"]
# dependencies = []
# requires-python = ">=3.11"
requires-python = ">=3.10"
dynamic = ["dependencies"]

[project.optional-dependencies]
dev = [
    "black",
    "semantic-release",
    "pip-tools",
    "pytest",
    # "biocypher@git+https://github.com/Mjvolk3/biocypher@main", won't work
    # "calm@git+https://github.com/oxpig/CaLM@main",
]

[project.urls]
Homepage = "https://github.com/Mjvolk3/Dendron-Template"

[project.scripts]
torchcell = "torchcell.__main__:main"
tcdb = "torchcell.database.tcdb:main"


[tool.isort]
profile = "black"
known_first_party = ["docs", "tests", "torchcell", "train"]
skip_gitignore = true
color_output = true

[tool.black]
target-version = ["py311"]
color = true
skip_magic_trailing_comma = true # true in torchgeo

[tool.mypy]
python_version = "3.11"
ignore_missing_imports = true
show_error_codes = true
files = ["torchcell/**/*.py", "tests/**/*.py"]

# Strict
warn_unused_configs = true
disallow_any_generics = true
disallow_subclassing_any = true
disallow_untyped_calls = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_return_any = true
no_implicit_reexport = true
strict_equality = true

[tool.pydocstyle]
convention = "google"
match = "torchcell/.*\\.py"

# https://setuptools.pypa.io/en/latest/userguide/pyproject_config.html
[tool.setuptools.dynamic]
dependencies = { file = ["env/requirements.txt"] }
# Doesn't allow ordering
# dependencies = {file = ["env/requirements.txt", "env/requirements_dependent.txt"]}

# optional-dependencies = {dev = { file = ["requirements-dev.txt"] }}
version = { attr = "torchcell.__version__" }

[tool.setuptools.package-data]
torchcell = ["py.typed", "knowledge_graphs/conf/*.yaml", "adapters/conf/*.yaml"]

[tool.setuptools.packages.find]
include = ["torchcell*"]

[tool.semantic_release]
version_variables = [
    "pyproject.toml:version",
    "torchcell/__version__.py:__version__",
]
branch = "main"
upload_to_pypi = "true"
commit_parser = "scipy"

[tool.semantic_release.commit_parser_options]
allowed_tags = [
    "API",
    "DEP",
    "ENH",
    "REV",
    "BUG",
    "MAINT",
    "BENCH",
    "BLD",
    "DEV",
    "DOC",
    "STY",
    "TST",
    "REL",
    "FEAT",
    "TEST",
]
major_tags = ["API"]
minor_tags = ["DEP", "DEV", "ENH", "REV", "FEAT"]
patch_tags = ["BLD", "BUG", "MAINT"]
