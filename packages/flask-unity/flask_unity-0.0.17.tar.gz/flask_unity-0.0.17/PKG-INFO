Metadata-Version: 2.1
Name: flask_unity
Version: 0.0.17
Summary: An extension of flask web framework that erase the complexity of structuring flask project blueprint, packages, connecting other flask extensions, database migrations, and other annoying stuffs.
Home-page: https://flask-unity.readthedocs.io
Author: Usman Musa
Author-email: usmanmusa1920@gmail.com
License: MIT
Download-URL: https://pypi.org/project/flask-unity
Project-URL: Documentation, https://flask-unity.readthedocs.io
Project-URL: Source, https://github.com/usmanmusa1920/flask-unity
Keywords: flask_unity
Platform: any
Classifier: Development Status :: 5 - Production/Stable
Classifier: Environment :: Web Environment
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: MIT License
Classifier: Natural Language :: English
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.7
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Framework :: Flask
Classifier: Topic :: Internet
Classifier: Topic :: Software Development :: Libraries :: Python Modules
Requires-Python: >=3.6
Description-Content-Type: text/markdown
License-File: LICENSE

# Flask-Unity

An extension of flask web framework that erase the complexity of structuring flask project blueprint, packages, connecting other flask extensions, database migrations, and other annoying stuffs.

[![Downloads Month Badge](https://static.pepy.tech/badge/flask-unity/month)](https://pypi.org/project/flask-unity)
[![License Badge](https://img.shields.io/pypi/l/flask-unity.svg)](https://pypi.org/project/flask-unity)
[![Supported Wheel Badge](https://img.shields.io/pypi/wheel/flask-unity.svg)](https://pypi.org/project/flask-unity)
[![Supported Versions Badge](https://img.shields.io/pypi/pyversions/flask-unity.svg)](https://pypi.org/project/flask-unity)

## Installation

Install and update the latest release from <a href="https://pypi.org/project/flask-unity">pypi</a>, we recomend you to create a virtual environment to avoid conflict (upgrade/downgrade of some of your system libraries) when installing flask-unity, this is just a recomendation, it still work even if you install it without using virtual environment. Basically the library was uploaded using `sdist` (Source Distribution) and `bdist_wheel` (Built Distribution), this software (library) is compatible and also tested with `windows OS`, `linux`, `macOS` and possibly can be compabible with others too!.

```sh
    pip install --upgrade flask_unity
```

## Create flask project

After the installation paste either (one) of the following command on your termianl

```sh
    flaskunity -p schoolsite
    # or
    flaskunity --project schoolsite
```

This will create a project called `schoolsite` now cd into the `schoolsite` directory, if you do `ls` within the directory you just enter you will see a module called `run.py`, `alembic.ini` and some directories (some in the form of package) `media`, `static`, `templates`, `migrations` and a directory with the same name of your base directory name, in our case it is `schoolsite`.

Next make migrations by:

```sh
    flaskunity db makemigrations
```

If you do **ls** after making the migrations you will see it initiate a **default.db** file (an sqlite file) which is our default database. Apply the migrations:

```sh
    flaskunity db migrate
```

> **Note**
> As soon as you create the project make migrations and apply the migrations to avoid errors!

Now ready to boot up the flask server by running the below command

```sh
    python run.py boot
```

Visit the local url `http://127.0.0.1:5000` this will show you index page of your project

## Create flask app within your project (schoolsite)

For you to start an app within your project `schoolsite` shutdown the flask development server by pressing `CTRL+C` and then run the following command, by giving the name you want your app to be, in our case we will call our app `exam`

```sh
    python run.py create_app -a exam
```

this will create an app (a new package called `exam`) within your project `(schoolsite)`

## Register an app

Once the app is created open a file `schoolsite/routes.py` and import your `exam` blueprint which is in (`exam/views.py`), default name given to an app blueprint, is the app name so our `exam` app blueprint name is `exam`, after importing it, append (register) the app blueprint in a function called `reg_blueprints_func`, which was assigned to `reg_blueprints` in that same file of `schoolsite/routes.py`

importing blueprint

```py
from exam.views import exam
```

registering blueprint

```py
    reg_blueprints = reg_blueprints_func(
        base,
        exam,
    )
```

once you register the app, boot up the flask webserver again by

```sh
    python run.py boot
```

visit `http://127.0.0.1:5000` which is your project landing page

visit `http://127.0.0.1:5000/exam` this will take you to your app landing page (exam)

visit `http://127.0.0.1:5000/admin` this will take you to admin page. From there you are ready to go.

Tutorials <a href="https://github.com/usmanmusa1920/flask-unity/tree/master/example">here!</a>
More documentations <a href="https://flask-unity.readthedocs.io">here!</a>

### Flask-unity default page

[![Flask-unity default page](https://raw.githubusercontent.com/usmanmusa1920/flask-unity/master/docs/_static/flask_unity_default_page.png)](https://flask-unity.readthedocs.io)

## Useful links

-   Documentation: https://flask-unity.readthedocs.io
-   Repository: https://github.com/usmanmusa1920/flask-unity
-   PYPI Release: https://pypi.org/project/flask-unity

Pull requests are welcome


# Change Log

## 0.0.17 (22/september/2024)

- Seventeen Release

    - Make single page for error pages
    - Change run command from `flask_unity` to `flaskunity`

- Sixteen Release

    - Make single page for error pages
    - Change run command from `flask_unity` to `flaskunity`

- Fifteen Release

    - Fixed admin pages link (that are unable to show).

- Fourteen Release

    - Tricks on how to add other extensions, by making example with flask-mail that provides a simple interface to set up SMTP with your Flask application and to send messages from your views and scripts.

- Thirteen Release

    - Modulising static files directory
    - Introduce CLI for instanciating project
    - Auto generate migration directory (alembic)
    - Update library site, by creating `.readthedocs.yaml` and `conf.py`
    - Change `thunder.py` to `run.py`
    - Ship index route (page) `/` to flask-unity package

- Twelveth Release

Testing for OS compatibility also again! again!! again!!!

- Eleventh Release

Testing for OS compatibility again! again!! again!!!

- Tenth Release

Testing for OS compatibility again

- Nineth Release

Fixing bugs

Fixing v0.0.8 bugs for OS compatibility, and also tested on windows OS

- Eight Release

OS compatibility

Making flask_unity to be compatible with windows OS as well as other OS

- Seventh Release

This release mostly is for adding more docs and examples.

- Sixth Release

Alembic is included as dependency (in the require module list).

- Fifth Release

In fifith release, we handle how default user file system tricks is, things like when user change his profile picture.

- Fourth Release

In this release we handle how we can customise the admin html page by inheriting (extends) it in our project templates/admin directory, and the admin page on how to bind models in the admin. Also I refactor other libraries that this package needs with their corresponding versions in the setup.py and requirements.txt files. In this release good documentations is well packed.

Database migration is added using `alembic`

Some error pages, default page were added but still you can customise it in your project sub folder (the package with the same name of your project in your project directory) in a file called `route.py`. Also an admin directory within your project templates folder is added too!

Possibly other well things are added which include auth system for `users` and more.


