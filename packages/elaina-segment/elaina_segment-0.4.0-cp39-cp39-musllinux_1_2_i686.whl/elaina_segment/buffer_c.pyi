from __future__ import annotations

from dataclasses import dataclass
from typing import Generic, TypeVar

from . import SEPARATORS, Runes, Segment

T = TypeVar("T")

@dataclass
class SegmentToken(Generic[T]):
    @property
    def buffer(self) -> Buffer[T]: ...
    @property
    def val(self) -> Segment[T]: ...
    def apply(self) -> None: ...

@dataclass
class AheadToken(Generic[T]):
    @property
    def buffer(self) -> Buffer[T]: ...
    @property
    def val(self) -> Segment[T]: ...
    def apply(self) -> None: ...

class Buffer(Generic[T]):
    def __init__(self, data: list[str | T], runes: bool = True): ...
    def __repr__(self) -> str: ...
    def copy(self) -> Buffer[T]: ...
    def next(self, until: str = SEPARATORS) -> SegmentToken[T] | AheadToken[T]: ...
    def pushleft(self, *segments: Segment[T]): ...
    def add_to_ahead(self, val: Segment[T]): ...
