# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations
from ..core.pydantic_utilities import UniversalBaseModel
import typing
from ..core.pydantic_utilities import IS_PYDANTIC_V2
import pydantic
from .column_type_item_number_default_value import ColumnTypeItemNumberDefaultValue
from .column_type_item_number_min_value import ColumnTypeItemNumberMinValue
from .column_type_item_number_max_value import ColumnTypeItemNumberMaxValue
from .select_option_item import SelectOptionItem


class CollectionConfigOutputColumnsItem_Boolean(UniversalBaseModel):
    column_type: typing.Literal["boolean"] = "boolean"
    column_id: typing.Optional[str] = None
    column_display_name: typing.Optional[str] = None
    default_value: typing.Optional[bool] = None
    data_type: typing.Optional[typing.Literal["boolean"]] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class CollectionConfigOutputColumnsItem_Json(UniversalBaseModel):
    column_type: typing.Literal["json"] = "json"
    column_id: typing.Optional[str] = None
    column_display_name: typing.Optional[str] = None
    default_value: typing.Optional[str] = None
    data_type: typing.Optional[typing.Literal["json"]] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class CollectionConfigOutputColumnsItem_Number(UniversalBaseModel):
    column_type: typing.Literal["number"] = "number"
    column_id: typing.Optional[str] = None
    column_display_name: typing.Optional[str] = None
    default_value: typing.Optional[ColumnTypeItemNumberDefaultValue] = None
    min_value: typing.Optional[ColumnTypeItemNumberMinValue] = None
    max_value: typing.Optional[ColumnTypeItemNumberMaxValue] = None
    data_type: typing.Optional[typing.Literal["number"]] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class CollectionConfigOutputColumnsItem_Select(UniversalBaseModel):
    column_type: typing.Literal["select"] = "select"
    column_id: typing.Optional[str] = None
    column_display_name: typing.Optional[str] = None
    options: typing.List[SelectOptionItem]
    selected_option: typing.Optional[int] = None
    data_type: typing.Optional[typing.Literal["string"]] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class CollectionConfigOutputColumnsItem_TextLong(UniversalBaseModel):
    column_type: typing.Literal["text-long"] = "text-long"
    column_id: typing.Optional[str] = None
    column_display_name: typing.Optional[str] = None
    default_value: typing.Optional[str] = None
    data_type: typing.Optional[typing.Literal["string"]] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class CollectionConfigOutputColumnsItem_TextShort(UniversalBaseModel):
    column_type: typing.Literal["text-short"] = "text-short"
    column_id: typing.Optional[str] = None
    column_display_name: typing.Optional[str] = None
    default_value: typing.Optional[str] = None
    data_type: typing.Optional[typing.Literal["string"]] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


CollectionConfigOutputColumnsItem = typing.Union[
    CollectionConfigOutputColumnsItem_Boolean,
    CollectionConfigOutputColumnsItem_Json,
    CollectionConfigOutputColumnsItem_Number,
    CollectionConfigOutputColumnsItem_Select,
    CollectionConfigOutputColumnsItem_TextLong,
    CollectionConfigOutputColumnsItem_TextShort,
]
