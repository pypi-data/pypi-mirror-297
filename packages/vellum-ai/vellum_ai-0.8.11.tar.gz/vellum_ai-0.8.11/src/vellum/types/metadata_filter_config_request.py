# This file was auto-generated by Fern from our API Definition.

from ..core.pydantic_utilities import UniversalBaseModel
import typing
from .metadata_filter_rule_combinator import MetadataFilterRuleCombinator
from .metadata_filter_rule_request import MetadataFilterRuleRequest
from .logical_operator import LogicalOperator
from ..core.pydantic_utilities import IS_PYDANTIC_V2
import pydantic


class MetadataFilterConfigRequest(UniversalBaseModel):
    combinator: typing.Optional[MetadataFilterRuleCombinator] = None
    negated: typing.Optional[bool] = None
    rules: typing.Optional[typing.List[MetadataFilterRuleRequest]] = None
    field: typing.Optional[str] = None
    operator: typing.Optional[LogicalOperator] = None
    value: typing.Optional[str] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
