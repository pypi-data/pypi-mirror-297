Index: boto3-s3-access-grants-plugin/cache/access_grants_cache.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from cacheout import Cache\nimport logging\nfrom botocore.exceptions import ClientError\nfrom account_id_resolver_cache import AccountIdResolverCache\nfrom cache_key import CacheKey\nimport sys\n\nsys.path.append(\"..\")\nsys.path.insert(0, \"boto3-s3-access-grants-plugin\")\nfrom exceptions import IllegalArgumentException\n\nDEFAULT_ACCESS_GRANTS_CACHE_SIZE = 30000\nMAX_LIMIT_ACCESS_GRANTS_CACHE_SIZE = 1000000\nGET_DATA_ACCESS_DURATION = 1 * 60 * 60  # 1 hour\nMAX_GET_DATA_ACCESS_DURATION = 12 * 60 * 60    # 12 hours\nCACHE_EXPIRATION_TIME_PERCENTAGE = 90\n\n\nclass AccessGrantsCache:\n    access_grants_cache = None\n    account_id_resolver_cache = AccountIdResolverCache()\n\n    def __init__(self, cache_size=DEFAULT_ACCESS_GRANTS_CACHE_SIZE,\n                 duration=GET_DATA_ACCESS_DURATION):\n        self.cache_size = cache_size\n        self.duration = duration\n        self.cache_ttl = (duration * CACHE_EXPIRATION_TIME_PERCENTAGE) / 100\n\n        if self.cache_size > MAX_LIMIT_ACCESS_GRANTS_CACHE_SIZE:\n            raise IllegalArgumentException(\n                \"Max cache size should be less than or equal to \" + str(MAX_LIMIT_ACCESS_GRANTS_CACHE_SIZE))\n\n        if self.duration > GET_DATA_ACCESS_DURATION:\n            raise IllegalArgumentException(\"Maximum duration should be less than or equal to \" + str(\n                GET_DATA_ACCESS_DURATION))\n\n        self.access_grants_cache = Cache(maxsize=self.cache_size, ttl=self.cache_ttl)\n\n    #  This is for grants of type \"s3://bucket/prefix/*\"\n    def __search_credentials_at_prefix_level(self, cache_key):\n\n        prefix = cache_key.s3_prefix\n        while prefix != \"s3:\":\n            cache_key = CacheKey(cache_key=cache_key, s3_prefix=prefix)\n            cache_value = self.access_grants_cache.get(cache_key)\n            if cache_value is not None:\n                logging.debug(\"Successfully retrieved credentials from cache.\")\n                return cache_value\n            prefix = prefix.rsplit('/', 1)[0]\n        return None\n\n    # This is for grants of type \"s3://bucket/prefix*\"\n    def __search_credentials_at_character_level(self, cache_key):\n        prefix = cache_key.s3_prefix\n        while prefix != \"s3://\":\n            cache_key = CacheKey(cache_key=cache_key, s3_prefix=prefix + \"*\")\n            cache_value = self.access_grants_cache.get(cache_key)\n            if cache_value is not None:\n                logging.debug(\"Successfully retrieved credentials from cache.\")\n                return cache_value\n            prefix = prefix[:-1]\n        return None\n\n    def __get_credentials_from_service(self, s3_control_client, cache_key, account_id):\n        if s3_control_client is None:\n            raise IllegalArgumentException(\"S3 Control Client should not be null\")\n        bucket_owner_account_id = self.account_id_resolver_cache.resolve(s3_control_client, account_id,\n                                                                         cache_key.s3_prefix)\n        logging.debug((\n                \"Fetching credentials from Access Grants for accountId: \" + bucket_owner_account_id + \", s3Prefix: \" + cache_key.s3_prefix +\n                \", permission: \" + cache_key.permission + \", privilege: \" + \"DEFAULT\"))\n        return s3_control_client.get_data_access(AccountId=bucket_owner_account_id, Target=cache_key.s3_prefix,\n                                                 Permission=cache_key.permission, Privilege='Default')\n\n    # This method removes '/*' from matchedGrantTarget if present.\n    # This helps us differentiate between grants of type \"s3://bucket/prefix/*\" and \"s3://bucket/prefix*\".\n    @staticmethod\n    def __process_matched_target(matched_grant_target):\n        if matched_grant_target.endswith(\"/*\"):\n            return matched_grant_target[:-2]\n        return matched_grant_target\n\n    def get_credentials(self, s3_control_client, cache_key, account_id, access_denied_cache):\n        credentials = self.__search_credentials_at_prefix_level(cache_key)\n        if credentials is None and (cache_key.permission == \"READ\" or cache_key.permission == \"WRITE\"):\n            credentials = self.__search_credentials_at_prefix_level(CacheKey(permission=\"READWRITE\", cache_key=cache_key))\n        if credentials is None:\n            credentials = self.__search_credentials_at_character_level(cache_key)\n        if credentials is None and (cache_key.permission == \"READ\" or cache_key.permission == \"WRITE\"):\n            credentials = self.__search_credentials_at_character_level(\n                CacheKey(permission=\"READWRITE\", cache_key=cache_key))\n        if credentials is None:\n            logging.debug(\"No credentials found in cache. Fetching from service\")\n            try:\n                response = self.__get_credentials_from_service(s3_control_client, cache_key, account_id)\n                credentials = response[\"Credentials\"]\n                matched_grant_target = response[\"MatchedGrantTarget\"]\n                if matched_grant_target.endswith(\"*\"):      # we do not cache object level grants\n                    self.access_grants_cache.set(\n                        CacheKey(s3_prefix=AccessGrantsCache.__process_matched_target(matched_grant_target),\n                                 cache_key=cache_key), credentials)\n                logging.debug(\"Successfully retrieved credentials from service.\")\n            except ClientError as e:\n                if e.response[\"Error\"][\"Code\"] == \"AccessDenied\":\n                    access_denied_cache.put_value_in_cache(cache_key, e)\n                    print(e)\n                raise e\n        return credentials\n\n    def __put_value_in_cache(self, cache_key, value):\n        return self.access_grants_cache.set(cache_key,value)\n\n    def __get_value_from_cache(self, cache_key):\n        return self.access_grants_cache.get(cache_key)\n\n\n
===================================================================
diff --git a/boto3-s3-access-grants-plugin/cache/access_grants_cache.py b/boto3-s3-access-grants-plugin/cache/access_grants_cache.py
--- a/boto3-s3-access-grants-plugin/cache/access_grants_cache.py	
+++ b/boto3-s3-access-grants-plugin/cache/access_grants_cache.py	
@@ -15,6 +15,7 @@
 MAX_GET_DATA_ACCESS_DURATION = 12 * 60 * 60    # 12 hours
 CACHE_EXPIRATION_TIME_PERCENTAGE = 90
 
+logging.debug = print
 
 class AccessGrantsCache:
     access_grants_cache = None
@@ -81,6 +82,7 @@
         return matched_grant_target
 
     def get_credentials(self, s3_control_client, cache_key, account_id, access_denied_cache):
+        logging.debug("fetching AG credentials")
         credentials = self.__search_credentials_at_prefix_level(cache_key)
         if credentials is None and (cache_key.permission == "READ" or cache_key.permission == "WRITE"):
             credentials = self.__search_credentials_at_prefix_level(CacheKey(permission="READWRITE", cache_key=cache_key))
