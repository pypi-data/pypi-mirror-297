from ttgen.combinations import combinations_from_multiplicities, combinations
from itertools import combinations as itertools_combinations

def test_consistent_with_pascal_code_1():

    expected_result = [
        (0, 0, 0, 3),
        (0, 0, 1, 2),
        (0, 0, 2, 1),
        (0, 1, 2, 0),
        (0, 1, 1, 1),
        (0, 1, 0, 2),
        (1, 1, 0, 1),
        (1, 1, 1, 0),
        (1, 0, 2, 0),
        (1, 0, 1, 1),
        (1, 0, 0, 2),
        (2, 0, 0, 1),
        (2, 0, 1, 0),
        (2, 1, 0, 0),
    ]
    result = list(combinations_from_multiplicities([2,1,2,3], 3))

    assert result == expected_result    

def test_consistent_with_pascal_code_2():

    expected_result = [
        (0, 0, 0, 1, 1, 1, 0, 1),
        (0, 0, 0, 2, 1, 1, 0, 0),
        (0, 0, 0, 2, 1, 1, 0, 0),
        (0, 0, 0, 2, 1, 0, 0, 1),
        (0, 0, 0, 2, 0, 1, 0, 1),
        (0, 0, 0, 3, 0, 0, 0, 1),
        (0, 0, 0, 3, 0, 1, 0, 0),
        (0, 0, 0, 3, 1, 0, 0, 0),
        (0, 0, 1, 3, 0, 0, 0, 0),
        (0, 0, 1, 2, 1, 0, 0, 0),
        (0, 0, 1, 2, 0, 1, 0, 0),
        (0, 0, 1, 2, 0, 0, 0, 1),
        (0, 0, 1, 1, 0, 1, 0, 1),
        (0, 0, 1, 1, 1, 0, 0, 1),
        (0, 0, 1, 1, 1, 1, 0, 0),
        (0, 0, 1, 0, 1, 1, 0, 1),
        (0, 1, 1, 0, 1, 1, 0, 0),
        (0, 1, 1, 0, 1, 0, 0, 1),
        (0, 1, 1, 0, 0, 1, 0, 1),
        (0, 1, 1, 1, 0, 0, 0, 1),
        (0, 1, 1, 1, 0, 1, 0, 0),
        (0, 1, 1, 1, 1, 0, 0, 0),
        (0, 1, 1, 2, 0, 0, 0, 0),
        (0, 1, 0, 3, 0, 0, 0, 0),
        (0, 1, 0, 2, 1, 0, 0, 0),
        (0, 1, 0, 2, 0, 1, 0, 0),
        (0, 1, 0, 2, 0, 0, 0, 1),
        (0, 1, 0, 1, 0, 1, 0, 1),
        (0, 1, 0, 1, 1, 0, 0, 1),
        (0, 1, 0, 1, 1, 1, 0, 0),
        (0, 1, 0, 0, 1, 1, 0, 1),
        (0, 2, 0, 0, 1, 1, 0, 0),
        (0, 2, 0, 0, 1, 0, 0, 1),
        (0, 2, 0, 0, 0, 1, 0, 1),
        (0, 2, 0, 1, 0, 0, 0, 1),
        (0, 2, 0, 1, 0, 1, 0, 0),
        (0, 2, 0, 1, 1, 0, 0, 0),
        (0, 2, 0, 2, 0, 0, 0, 0),
        (0, 2, 1, 1, 0, 0, 0, 0),
        (0, 2, 1, 0, 1, 0, 0, 0),
        (0, 2, 1, 0, 0, 1, 0, 0),
        (0, 2, 1, 0, 0, 0, 0, 1),
        (1, 2, 1, 0, 0, 0, 0, 0),
        (1, 2, 0, 0, 0, 0, 0, 1),
        (1, 2, 0, 0, 0, 1, 0, 0),
        (1, 2, 0, 0, 1, 0, 0, 0),
        (1, 2, 0, 1, 0, 0, 0, 0),
        (1, 1, 0, 2, 0, 0, 0, 0),
        (1, 1, 0, 1, 1, 0, 0, 0),
        (1, 1, 0, 1, 0, 1, 0, 0),
        (1, 1, 0, 1, 0, 0, 0, 1),
        (1, 1, 0, 0, 0, 1, 0, 1),
        (1, 1, 0, 0, 1, 0, 0, 1),
        (1, 1, 0, 0, 1, 1, 0, 0),
        (1, 1, 1, 0, 1, 0, 0, 0),
        (1, 1, 1, 0, 0, 1, 0, 0),
        (1, 1, 1, 0, 0, 0, 0, 1),
        (1, 1, 1, 1, 0, 0, 0, 0),
        (1, 0, 1, 2, 0, 0, 0, 0),
        (1, 0, 1, 1, 0, 0, 0, 1),
        (1, 0, 1, 1, 0, 1, 0, 0),
        (1, 0, 1, 1, 1, 0, 0, 0),
        (1, 0, 1, 0, 1, 1, 0, 0),
        (1, 0, 1, 0, 1, 0, 0, 1),
        (1, 0, 1, 0, 0, 1, 0, 1),
        (1, 0, 0, 0, 1, 1, 0, 1),
        (1, 0, 0, 1, 0, 1, 0, 1),
        (1, 0, 0, 1, 1, 0, 0, 1),
        (1, 0, 0, 1, 1, 1, 0, 0),
        (1, 0, 0, 2, 1, 0, 0, 0),
        (1, 0, 0, 2, 0, 1, 0, 0),
        (1, 0, 0, 2, 0, 0, 0, 1),
        (1, 0, 0, 3, 0, 0, 0, 0),
        (2, 0, 0, 2, 0, 0, 0, 0),
        (2, 0, 0, 1, 0, 0, 0, 1),
        (2, 0, 0, 1, 0, 1, 0, 0),
        (2, 0, 0, 1, 1, 0, 0, 0),
        (2, 0, 0, 0, 1, 1, 0, 0),
        (2, 0, 0, 0, 1, 0, 0, 1),
        (2, 0, 0, 0, 0, 1, 0, 1),
        (2, 0, 1, 0, 0, 0, 0, 1),
        (2, 0, 1, 0, 0, 1, 0, 0),
        (2, 0, 1, 0, 1, 0, 0, 0),
        (2, 0, 1, 1, 0, 0, 0, 0),
        (2, 1, 1, 0, 0, 0, 0, 0),
        (2, 1, 0, 1, 0, 0, 0, 0),
        (2, 1, 0, 0, 1, 0, 0, 0),
        (2, 1, 0, 0, 0, 1, 0, 0),
        (2, 1, 0, 0, 0, 0, 0, 1),
        (2, 2, 0, 0, 0, 0, 0, 0),
        (3, 1, 0, 0, 0, 0, 0, 0),
        (3, 0, 0, 0, 0, 0, 0, 1),
        (3, 0, 0, 0, 0, 1, 0, 0),
        (3, 0, 0, 0, 1, 0, 0, 0),
        (3, 0, 0, 1, 0, 0, 0, 0),
        (3, 0, 1, 0, 0, 0, 0, 0),
        (4, 0, 0, 0, 0, 0, 0, 0),
    ]
    result = list(combinations_from_multiplicities([4,2,1,3,1,1,0,1], 4))

    assert result == expected_result    

def test_combination_from_elements_works():

    expected_result = [
        ('D', 'D', 'D'),
        ('C', 'D', 'D'),
        ('C', 'C', 'D'),
        ('B', 'C', 'C'),
        ('B', 'C', 'D'),
        ('B', 'D', 'D'),
        ('A', 'B', 'D'),
        ('A', 'B', 'C'),
        ('A', 'C', 'C'),
        ('A', 'C', 'D'),
        ('A', 'D', 'D'),
        ('A', 'A', 'D'),
        ('A', 'A', 'C'),
        ('A', 'A', 'B'),
    ]
    result = list(combinations(['A', 'A', 'B', 'C', 'C', 'D', 'D', 'D'], 3))

    assert result == expected_result

def test_consistent_with_itertools():
    
    # Compare with set as itertools will generate duplicates
    expected_result = set(itertools_combinations('AABCCDDD', 3))
    result = set(combinations(['A', 'A', 'B', 'C', 'C', 'D', 'D', 'D'], 3))

    assert result == expected_result

def test_works_if_multiplicities_greater_than_number_of_selections():

    expected_result = [
        (0, 4),
        (1, 3),
        (2, 2),
        (3, 1),
    ]
    result = list(combinations_from_multiplicities([3, 10], 4))
    assert result == expected_result