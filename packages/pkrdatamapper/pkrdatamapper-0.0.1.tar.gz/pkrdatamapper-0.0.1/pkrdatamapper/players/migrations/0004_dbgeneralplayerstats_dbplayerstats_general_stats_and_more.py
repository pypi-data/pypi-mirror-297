# Generated by Django 5.1.1 on 2024-09-17 09:49

import django.db.models.deletion
import pkrdatamapper.common.mixins
from django.db import migrations, models


class Migration(migrations.Migration):
    dependencies = [
        ("players", "0003_dbplayerstats_pfr_vpip_ratio"),
    ]

    operations = [
        migrations.CreateModel(
            name="DBGeneralPlayerStats",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "cnt_went_to_showdown",
                    models.PositiveIntegerField(
                        db_column="cnt_went_to_showdown",
                        db_comment="Count of hands where  the player went to showdown",
                        default=0,
                    ),
                ),
                (
                    "cnt_is_hero",
                    models.PositiveIntegerField(
                        db_column="cnt_is_hero",
                        db_comment="Count of hands where  the player is the hero",
                        default=0,
                    ),
                ),
                (
                    "cnt_won_hand",
                    models.PositiveIntegerField(
                        db_column="cnt_won_hand",
                        db_comment="Count of hands where  the player won the hand",
                        default=0,
                    ),
                ),
                (
                    "player",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="players.dbplayer",
                    ),
                ),
            ],
            options={
                "verbose_name": "General Player Stats",
                "db_table": "general_player_stats",
            },
            bases=(models.Model, pkrdatamapper.common.mixins.DFDataMixin),
        ),
        migrations.AddField(
            model_name="dbplayerstats",
            name="general_stats",
            field=models.OneToOneField(
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                to="players.dbgeneralplayerstats",
            ),
        ),
        migrations.CreateModel(
            name="DBPreflopPlayerStats",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "cnt_vpip",
                    models.PositiveIntegerField(
                        db_column="cnt_vpip",
                        db_comment="Count of hands where  the player voluntarily put money in the pot",
                        default=0,
                    ),
                ),
                (
                    "cnt_open_opportunity",
                    models.PositiveIntegerField(
                        db_column="cnt_open_opportunity",
                        db_comment="Count of hands where  the player had the opportunity to open ",
                        default=0,
                    ),
                ),
                (
                    "cnt_open",
                    models.PositiveIntegerField(
                        db_column="cnt_open",
                        db_comment="Count of hands where  the player opened ",
                        default=0,
                    ),
                ),
                (
                    "cnt_first_raise",
                    models.PositiveIntegerField(
                        db_column="cnt_first_raise",
                        db_comment="Count of hands where  the player made the first raise ",
                        default=0,
                    ),
                ),
                (
                    "cnt_fold",
                    models.PositiveIntegerField(
                        db_column="cnt_fold",
                        db_comment="Count of hands where  the player folded ",
                        default=0,
                    ),
                ),
                (
                    "cnt_limp",
                    models.PositiveIntegerField(
                        db_column="cnt_limp",
                        db_comment="Count of hands where  the player limped ",
                        default=0,
                    ),
                ),
                (
                    "cnt_cold_called",
                    models.PositiveIntegerField(
                        db_column="cnt_cold_called",
                        db_comment="Count of hands where  the player cold called ",
                        default=0,
                    ),
                ),
                (
                    "cnt_raise",
                    models.PositiveIntegerField(
                        db_column="cnt_raise",
                        db_comment="Count of hands where  the player raised ",
                        default=0,
                    ),
                ),
                (
                    "cnt_raise_opportunity",
                    models.PositiveIntegerField(
                        db_column="cnt_raise_opportunity",
                        db_comment="Count of hands where  the player had the opportunity to raise ",
                        default=0,
                    ),
                ),
                (
                    "cnt_face_raise",
                    models.PositiveIntegerField(
                        db_column="cnt_face_raise",
                        db_comment="Count of hands where  the player faced a raise ",
                        default=0,
                    ),
                ),
                (
                    "cnt_3bet_opportunity",
                    models.PositiveIntegerField(
                        db_column="cnt_3bet_opportunity",
                        db_comment="Count of hands where  the player had the opportunity to 3bet ",
                        default=0,
                    ),
                ),
                (
                    "cnt_3bet",
                    models.PositiveIntegerField(
                        db_column="cnt_3bet",
                        db_comment="Count of hands where  the player 3bet ",
                        default=0,
                    ),
                ),
                (
                    "cnt_face_3bet",
                    models.PositiveIntegerField(
                        db_column="cnt_face_3bet",
                        db_comment="Count of hands where  the player faced a 3bet ",
                        default=0,
                    ),
                ),
                (
                    "cnt_4bet_opportunity",
                    models.PositiveIntegerField(
                        db_column="cnt_4bet_opportunity",
                        db_comment="Count of hands where  the player had the opportunity to 4+bet ",
                        default=0,
                    ),
                ),
                (
                    "cnt_4bet",
                    models.PositiveIntegerField(
                        db_column="cnt_4bet",
                        db_comment="Count of hands where  the player 4+bet ",
                        default=0,
                    ),
                ),
                (
                    "cnt_face_4bet",
                    models.PositiveIntegerField(
                        db_column="cnt_face_4bet",
                        db_comment="Count of hands where  the player faced a 4+bet ",
                        default=0,
                    ),
                ),
                (
                    "cnt_squeeze_opportunity",
                    models.PositiveIntegerField(
                        db_column="cnt_squeeze_opportunity",
                        db_comment="Count of hands where  the player had the opportunity to squeeze ",
                        default=0,
                    ),
                ),
                (
                    "cnt_squeeze",
                    models.PositiveIntegerField(
                        db_column="cnt_squeeze",
                        db_comment="Count of hands where  the player squeezed ",
                        default=0,
                    ),
                ),
                (
                    "cnt_face_squeeze",
                    models.PositiveIntegerField(
                        db_column="cnt_face_squeeze",
                        db_comment="Count of hands where  the player faced a squeeze ",
                        default=0,
                    ),
                ),
                (
                    "cnt_steal_opportunity",
                    models.PositiveIntegerField(
                        db_column="cnt_steal_opportunity",
                        db_comment="Count of hands where  the player had the opportunity to steal ",
                        default=0,
                    ),
                ),
                (
                    "cnt_steal_attempt",
                    models.PositiveIntegerField(
                        db_column="cnt_steal_attempt",
                        db_comment="Count of hands where  the player attempted to steal ",
                        default=0,
                    ),
                ),
                (
                    "cnt_face_steal_attempt",
                    models.PositiveIntegerField(
                        db_column="cnt_face_steal_attempt",
                        db_comment="Count of hands where  the player faced a steal attempt ",
                        default=0,
                    ),
                ),
                (
                    "cnt_fold_to_steal_attempt",
                    models.PositiveIntegerField(
                        db_column="cnt_fold_to_steal_attempt",
                        db_comment="Count of hands where  the player folded to a steal attempt ",
                        default=0,
                    ),
                ),
                (
                    "cnt_blind_defense_opportunity",
                    models.PositiveIntegerField(
                        db_column="cnt_blind_defense_opportunity",
                        db_comment="Count of hands where  the player had the opportunity to defend the blinds ",
                        default=0,
                    ),
                ),
                (
                    "cnt_blind_defense",
                    models.PositiveIntegerField(
                        db_column="cnt_blind_defense",
                        db_comment="Count of hands where  the player defended the blinds ",
                        default=0,
                    ),
                ),
                (
                    "cnt_open_shove",
                    models.PositiveIntegerField(
                        db_column="cnt_open_shove",
                        db_comment="Count of hands where  the player open shoved ",
                        default=0,
                    ),
                ),
                (
                    "cnt_voluntary_all_in",
                    models.PositiveIntegerField(
                        db_column="cnt_voluntary_all_in",
                        db_comment="Count of hands where  the player voluntarily went all in ",
                        default=0,
                    ),
                ),
                (
                    "player",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="players.dbplayer",
                    ),
                ),
            ],
            options={
                "verbose_name": "Preflop Player Stats",
                "db_table": "preflop_player_stats",
            },
            bases=(models.Model, pkrdatamapper.common.mixins.DFDataMixin),
        ),
        migrations.AddField(
            model_name="dbplayerstats",
            name="preflop_stats",
            field=models.OneToOneField(
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                to="players.dbpreflopplayerstats",
            ),
        ),
    ]
