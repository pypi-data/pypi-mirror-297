# Generated by Django 5.0.6 on 2024-09-11 14:56

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("actions", "0001_initial"),
        ("cards", "0001_initial"),
        ("tournaments", "0001_initial"),
    ]

    operations = [
        migrations.CreateModel(
            name="DBPreflopHandStats",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "flag_vpip",
                    models.BooleanField(
                        db_column="flag_vpip",
                        db_comment="Whether the player voluntarily put money in the pot",
                        default=False,
                        verbose_name="flag_vpip",
                    ),
                ),
                (
                    "flag_open_opportunity",
                    models.BooleanField(
                        db_column="flag_open_opportunity",
                        db_comment="Whether the player had the opportunity to open ",
                        default=False,
                        verbose_name="flag_open_opportunity",
                    ),
                ),
                (
                    "flag_open",
                    models.BooleanField(
                        db_column="flag_open",
                        db_comment="Whether the player opened ",
                        default=False,
                        verbose_name="flag_open",
                    ),
                ),
                (
                    "flag_first_raise",
                    models.BooleanField(
                        db_column="flag_first_raise",
                        db_comment="Whether the player made the first raise ",
                        default=False,
                        verbose_name="flag_first_raise",
                    ),
                ),
                (
                    "flag_fold",
                    models.BooleanField(
                        db_column="flag_fold",
                        db_comment="Whether the player folded ",
                        default=False,
                        verbose_name="flag_fold",
                    ),
                ),
                (
                    "flag_limp",
                    models.BooleanField(
                        db_column="flag_limp",
                        db_comment="Whether the player limped ",
                        default=False,
                        verbose_name="flag_limp",
                    ),
                ),
                (
                    "flag_cold_called",
                    models.BooleanField(
                        db_column="flag_cold_called",
                        db_comment="Whether the player cold called ",
                        default=False,
                        verbose_name="flag_cold_called",
                    ),
                ),
                (
                    "flag_raise",
                    models.BooleanField(
                        db_column="flag_raise",
                        db_comment="Whether the player raised ",
                        default=False,
                        verbose_name="flag_raise",
                    ),
                ),
                (
                    "flag_raise_opportunity",
                    models.BooleanField(
                        db_column="flag_raise_opportunity",
                        db_comment="Whether the player had the opportunity to raise ",
                        default=False,
                        verbose_name="flag_raise_opportunity",
                    ),
                ),
                (
                    "flag_face_raise",
                    models.BooleanField(
                        db_column="flag_face_raise",
                        db_comment="Whether the player faced a raise ",
                        default=False,
                        verbose_name="flag_face_raise",
                    ),
                ),
                (
                    "flag_3bet_opportunity",
                    models.BooleanField(
                        db_column="flag_3bet_opportunity",
                        db_comment="Whether the player had the opportunity to 3bet ",
                        default=False,
                        verbose_name="flag_3bet_opportunity",
                    ),
                ),
                (
                    "flag_3bet",
                    models.BooleanField(
                        db_column="flag_3bet",
                        db_comment="Whether the player 3bet ",
                        default=False,
                        verbose_name="flag_3bet",
                    ),
                ),
                (
                    "flag_face_3bet",
                    models.BooleanField(
                        db_column="flag_face_3bet",
                        db_comment="Whether the player faced a 3bet ",
                        default=False,
                        verbose_name="flag_face_3bet",
                    ),
                ),
                (
                    "flag_4bet_opportunity",
                    models.BooleanField(
                        db_column="flag_4bet_opportunity",
                        db_comment="Whether the player had the opportunity to 4+bet ",
                        default=False,
                        verbose_name="flag_4bet_opportunity",
                    ),
                ),
                (
                    "flag_4bet",
                    models.BooleanField(
                        db_column="flag_4bet",
                        db_comment="Whether the player 4+bet ",
                        default=False,
                        verbose_name="flag_4bet",
                    ),
                ),
                (
                    "flag_face_4bet",
                    models.BooleanField(
                        db_column="flag_face_4bet",
                        db_comment="Whether the player faced a 4+bet ",
                        default=False,
                        verbose_name="flag_face_4bet",
                    ),
                ),
                (
                    "flag_squeeze_opportunity",
                    models.BooleanField(
                        db_column="flag_squeeze_opportunity",
                        db_comment="Whether the player had the opportunity to squeeze ",
                        default=False,
                        verbose_name="flag_squeeze_opportunity",
                    ),
                ),
                (
                    "flag_squeeze",
                    models.BooleanField(
                        db_column="flag_squeeze",
                        db_comment="Whether the player squeezed ",
                        default=False,
                        verbose_name="flag_squeeze",
                    ),
                ),
                (
                    "flag_face_squeeze",
                    models.BooleanField(
                        db_column="flag_face_squeeze",
                        db_comment="Whether the player faced a squeeze ",
                        default=False,
                        verbose_name="flag_face_squeeze",
                    ),
                ),
                (
                    "flag_steal_opportunity",
                    models.BooleanField(
                        db_column="flag_steal_opportunity",
                        db_comment="Whether the player had the opportunity to steal ",
                        default=False,
                        verbose_name="flag_steal_opportunity",
                    ),
                ),
                (
                    "flag_steal_attempt",
                    models.BooleanField(
                        db_column="flag_steal_attempt",
                        db_comment="Whether the player attempted to steal ",
                        default=False,
                        verbose_name="flag_steal_attempt",
                    ),
                ),
                (
                    "flag_face_steal_attempt",
                    models.BooleanField(
                        db_column="flag_face_steal_attempt",
                        db_comment="Whether the player faced a steal attempt ",
                        default=False,
                        verbose_name="flag_face_steal_attempt",
                    ),
                ),
                (
                    "flag_fold_to_steal_attempt",
                    models.BooleanField(
                        db_column="flag_fold_to_steal_attempt",
                        db_comment="Whether the player folded to a steal attempt ",
                        default=False,
                        verbose_name="flag_fold_to_steal_attempt",
                    ),
                ),
                (
                    "flag_blind_defense_opportunity",
                    models.BooleanField(
                        db_column="flag_blind_defense_opportunity",
                        db_comment="Whether the player had the opportunity to defend the blinds ",
                        default=False,
                        verbose_name="flag_blind_defense_opportunity",
                    ),
                ),
                (
                    "flag_blind_defense",
                    models.BooleanField(
                        db_column="flag_blind_defense",
                        db_comment="Whether the player defended the blinds ",
                        default=False,
                        verbose_name="flag_blind_defense",
                    ),
                ),
                (
                    "flag_open_shove",
                    models.BooleanField(
                        db_column="flag_open_shove",
                        db_comment="Whether the player open shoved ",
                        default=False,
                        verbose_name="flag_open_shove",
                    ),
                ),
                (
                    "flag_voluntary_all_in",
                    models.BooleanField(
                        db_column="flag_voluntary_all_in",
                        db_comment="Whether the player voluntarily went all in ",
                        default=False,
                        verbose_name="flag_voluntary_all_in",
                    ),
                ),
                (
                    "count_player_raises",
                    models.PositiveSmallIntegerField(
                        db_column="count_player_raises",
                        db_comment="The number of raises the player made ",
                        default=0,
                        verbose_name="count_player_raises",
                    ),
                ),
                (
                    "count_player_calls",
                    models.PositiveSmallIntegerField(
                        db_column="count_player_calls",
                        db_comment="The number of calls the player made ",
                        default=0,
                        verbose_name="count_player_calls",
                    ),
                ),
                (
                    "count_faced_limps",
                    models.PositiveSmallIntegerField(
                        db_column="count_faced_limps",
                        db_comment="The number of limps the player faced ",
                        default=0,
                        verbose_name="count_faced_limps",
                    ),
                ),
                (
                    "amount_effective_stack",
                    models.DecimalField(
                        db_column="amount_effective_stack",
                        db_comment="The effective stack the player had ",
                        decimal_places=2,
                        default=0,
                        max_digits=15,
                        verbose_name="amount_effective_stack",
                    ),
                ),
                (
                    "amount_to_call_facing_1bet",
                    models.DecimalField(
                        db_column="amount_to_call_facing_1bet",
                        db_comment="The amount the player had to call facing the  big blind",
                        decimal_places=2,
                        default=0,
                        max_digits=15,
                        verbose_name="amount_to_call_facing_1bet",
                    ),
                ),
                (
                    "amount_to_call_facing_2bet",
                    models.DecimalField(
                        db_column="amount_to_call_facing_2bet",
                        db_comment="The amount the player had to call facing the  2bet",
                        decimal_places=2,
                        default=0,
                        max_digits=15,
                        verbose_name="amount_to_call_facing_2bet",
                    ),
                ),
                (
                    "amount_to_call_facing_3bet",
                    models.DecimalField(
                        db_column="amount_to_call_facing_3bet",
                        db_comment="The amount the player had to call facing the  3bet",
                        decimal_places=2,
                        default=0,
                        max_digits=15,
                        verbose_name="amount_to_call_facing_3bet",
                    ),
                ),
                (
                    "amount_to_call_facing_4bet",
                    models.DecimalField(
                        db_column="amount_to_call_facing_4bet",
                        db_comment="The amount the player had to call facing the  4bet",
                        decimal_places=2,
                        default=0,
                        max_digits=15,
                        verbose_name="amount_to_call_facing_4bet",
                    ),
                ),
                (
                    "amount_first_raise_made",
                    models.DecimalField(
                        db_column="amount_first_raise_made",
                        db_comment="The amount the player used on his first raise ",
                        decimal_places=2,
                        default=0,
                        max_digits=15,
                        verbose_name="amount_first_raise_made",
                    ),
                ),
                (
                    "amount_second_raise_made",
                    models.DecimalField(
                        db_column="amount_second_raise_made",
                        db_comment="The amount the player used on his second raise ",
                        decimal_places=2,
                        default=0,
                        max_digits=15,
                        verbose_name="amount_second_raise_made",
                    ),
                ),
                (
                    "ratio_to_call_facing_1bet",
                    models.DecimalField(
                        db_column="ratio_to_call_facing_1bet",
                        db_comment="The ratio of the pot the player had to call facing the bb",
                        decimal_places=5,
                        default=0,
                        max_digits=10,
                        verbose_name="ratio_to_call_facing_1bet",
                    ),
                ),
                (
                    "ratio_to_call_facing_2bet",
                    models.DecimalField(
                        db_column="ratio_to_call_facing_2bet",
                        db_comment="The ratio of the pot the player had to call facing the  2bet",
                        decimal_places=5,
                        default=0,
                        max_digits=10,
                        verbose_name="ratio_to_call_facing_2bet",
                    ),
                ),
                (
                    "ratio_to_call_facing_3bet",
                    models.DecimalField(
                        db_column="ratio_to_call_facing_3bet",
                        db_comment="The ratio of the pot the player had to call facing the  3bet",
                        decimal_places=5,
                        default=0,
                        max_digits=10,
                        verbose_name="ratio_to_call_facing_3bet",
                    ),
                ),
                (
                    "ratio_to_call_facing_4bet",
                    models.DecimalField(
                        db_column="ratio_to_call_facing_4bet",
                        db_comment="The ratio of the pot the player had to call facing the  4bet",
                        decimal_places=5,
                        default=0,
                        max_digits=10,
                        verbose_name="ratio_to_call_facing_4bet",
                    ),
                ),
                (
                    "ratio_first_raise_made",
                    models.DecimalField(
                        db_column="ratio_first_raise_made",
                        db_comment="The ratio of the pot the player used on his first raise ",
                        decimal_places=5,
                        default=0,
                        max_digits=10,
                        verbose_name="ratio_first_raise_made",
                    ),
                ),
                (
                    "ratio_second_raise_made",
                    models.DecimalField(
                        db_column="ratio_second_raise_made",
                        db_comment="The ratio of the pot the player used on his second raise ",
                        decimal_places=5,
                        default=0,
                        max_digits=10,
                        verbose_name="ratio_second_raise_made",
                    ),
                ),
                (
                    "total_bet_amount",
                    models.DecimalField(
                        db_column="total_bet_amount",
                        db_comment="The total amount the player bet ",
                        decimal_places=2,
                        default=0,
                        max_digits=15,
                        verbose_name="total_bet_amount",
                    ),
                ),
            ],
            options={
                "verbose_name": "Preflop Player Hand Stats",
                "db_table": "preflop_player_hand_stats",
            },
        ),
        migrations.CreateModel(
            name="DBRiverHandStats",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "flag_saw",
                    models.BooleanField(
                        db_column="flag_saw",
                        db_comment="Whether player saw the street",
                        default=False,
                        verbose_name="flag_saw",
                    ),
                ),
                (
                    "flag_first_to_talk",
                    models.BooleanField(
                        db_column="flag_first_to_talk",
                        db_comment="Whether player was the first to talk ",
                        default=False,
                        verbose_name="flag_first_to_talk",
                    ),
                ),
                (
                    "flag_has_position",
                    models.BooleanField(
                        db_column="flag_has_position",
                        db_comment="Whether player had position ",
                        default=False,
                        verbose_name="flag_has_position",
                    ),
                ),
                (
                    "flag_bet",
                    models.BooleanField(
                        db_column="flag_bet",
                        db_comment="Whether player bet ",
                        default=False,
                        verbose_name="flag_bet",
                    ),
                ),
                (
                    "flag_open_opportunity",
                    models.BooleanField(
                        db_column="flag_open_opportunity",
                        db_comment="Whether player had the opportunity to open ",
                        default=False,
                        verbose_name="flag_open_opportunity",
                    ),
                ),
                (
                    "flag_open",
                    models.BooleanField(
                        db_column="flag_open",
                        db_comment="Whether player opened ",
                        default=False,
                        verbose_name="flag_open",
                    ),
                ),
                (
                    "flag_cbet_opportunity",
                    models.BooleanField(
                        db_column="flag_cbet_opportunity",
                        db_comment="Whether player had the opportunity to make a c-bet ",
                        default=False,
                        verbose_name="flag_cbet_opportunity",
                    ),
                ),
                (
                    "flag_cbet",
                    models.BooleanField(
                        db_column="flag_cbet",
                        db_comment="Whether player made a continuation bet ",
                        default=False,
                        verbose_name="flag_cbet",
                    ),
                ),
                (
                    "flag_face_cbet",
                    models.BooleanField(
                        db_column="flag_face_cbet",
                        db_comment="Whether player faced a continuation bet ",
                        default=False,
                        verbose_name="flag_face_cbet",
                    ),
                ),
                (
                    "flag_donk_bet_opportunity",
                    models.BooleanField(
                        db_column="flag_donk_bet_opportunity",
                        db_comment="Whether player had the opportunity to make a donk bet ",
                        default=False,
                        verbose_name="flag_donk_bet_opportunity",
                    ),
                ),
                (
                    "flag_donk_bet",
                    models.BooleanField(
                        db_column="flag_donk_bet",
                        db_comment="Whether player made a donk bet ",
                        default=False,
                        verbose_name="flag_donk_bet",
                    ),
                ),
                (
                    "flag_face_donk_bet",
                    models.BooleanField(
                        db_column="flag_face_donk_bet",
                        db_comment="Whether player faced a donk bet ",
                        default=False,
                        verbose_name="flag_face_donk_bet",
                    ),
                ),
                (
                    "flag_first_raise",
                    models.BooleanField(
                        db_column="flag_first_raise",
                        db_comment="Whether player made the first raise ",
                        default=False,
                        verbose_name="flag_first_raise",
                    ),
                ),
                (
                    "flag_fold",
                    models.BooleanField(
                        db_column="flag_fold",
                        db_comment="Whether player folded ",
                        default=False,
                        verbose_name="flag_fold",
                    ),
                ),
                (
                    "flag_check",
                    models.BooleanField(
                        db_column="flag_check",
                        db_comment="Whether player checked ",
                        default=False,
                        verbose_name="flag_check",
                    ),
                ),
                (
                    "flag_check_raise",
                    models.BooleanField(
                        db_column="flag_check_raise",
                        db_comment="Whether player check-raised ",
                        default=False,
                        verbose_name="flag_check_raise",
                    ),
                ),
                (
                    "flag_face_raise",
                    models.BooleanField(
                        db_column="flag_face_raise",
                        db_comment="Whether player faced a raise ",
                        default=False,
                        verbose_name="flag_face_raise",
                    ),
                ),
                (
                    "flag_3bet_opportunity",
                    models.BooleanField(
                        db_column="flag_3bet_opportunity",
                        db_comment="Whether player had the opportunity to 3bet ",
                        default=False,
                        verbose_name="flag_3bet_opportunity",
                    ),
                ),
                (
                    "flag_3bet",
                    models.BooleanField(
                        db_column="flag_3bet",
                        db_comment="Whether player 3bet ",
                        default=False,
                        verbose_name="flag_3bet",
                    ),
                ),
                (
                    "flag_face_3bet",
                    models.BooleanField(
                        db_column="flag_face_3bet",
                        db_comment="Whether player faced a 3bet ",
                        default=False,
                        verbose_name="flag_face_3bet",
                    ),
                ),
                (
                    "flag_4bet_opportunity",
                    models.BooleanField(
                        db_column="flag_4bet_opportunity",
                        db_comment="Whether player had the opportunity to 4+bet ",
                        default=False,
                        verbose_name="flag_4bet_opportunity",
                    ),
                ),
                (
                    "flag_4bet",
                    models.BooleanField(
                        db_column="flag_4bet",
                        db_comment="Whether player 4+bet ",
                        default=False,
                        verbose_name="flag_4bet",
                    ),
                ),
                (
                    "flag_face_4bet",
                    models.BooleanField(
                        db_column="flag_face_4bet",
                        db_comment="Whether player faced a 4+bet ",
                        default=False,
                        verbose_name="flag_face_4bet",
                    ),
                ),
                (
                    "count_player_raises",
                    models.PositiveSmallIntegerField(
                        db_column="count_player_raises",
                        db_comment="The number of raises the player made ",
                        default=0,
                        verbose_name="count_player_raises",
                    ),
                ),
                (
                    "count_player_calls",
                    models.PositiveSmallIntegerField(
                        db_column="count_player_calls",
                        db_comment="The number of calls the player made ",
                        default=0,
                        verbose_name="count_player_calls",
                    ),
                ),
                (
                    "amount_effective_stack",
                    models.DecimalField(
                        db_column="amount_effective_stack",
                        db_comment="The effective stack the player had ",
                        decimal_places=2,
                        default=0,
                        max_digits=15,
                        verbose_name="amount_effective_stack",
                    ),
                ),
                (
                    "amount_to_call_facing_1bet",
                    models.DecimalField(
                        db_column="amount_to_call_facing_1bet",
                        db_comment="The amount the player had to call facing the street bet",
                        decimal_places=2,
                        default=0,
                        max_digits=15,
                        verbose_name="amount_to_call_facing_1bet",
                    ),
                ),
                (
                    "amount_to_call_facing_2bet",
                    models.DecimalField(
                        db_column="amount_to_call_facing_2bet",
                        db_comment="The amount the player had to call facing the street 2bet",
                        decimal_places=2,
                        default=0,
                        max_digits=15,
                        verbose_name="amount_to_call_facing_2bet",
                    ),
                ),
                (
                    "amount_to_call_facing_3bet",
                    models.DecimalField(
                        db_column="amount_to_call_facing_3bet",
                        db_comment="The amount the player had to call facing the street 3bet",
                        decimal_places=2,
                        default=0,
                        max_digits=15,
                        verbose_name="amount_to_call_facing_3bet",
                    ),
                ),
                (
                    "amount_to_call_facing_4bet",
                    models.DecimalField(
                        db_column="amount_to_call_facing_4bet",
                        db_comment="The amount the player had to call facing the street 4bet",
                        decimal_places=2,
                        default=0,
                        max_digits=15,
                        verbose_name="amount_to_call_facing_4bet",
                    ),
                ),
                (
                    "amount_bet_made",
                    models.DecimalField(
                        db_column="amount_bet_made",
                        db_comment="The amount the player used to bet ",
                        decimal_places=2,
                        default=0,
                        max_digits=15,
                        verbose_name="amount_bet_made",
                    ),
                ),
                (
                    "amount_first_raise_made",
                    models.DecimalField(
                        db_column="amount_first_raise_made",
                        db_comment="The amount the player used on his first raise ",
                        decimal_places=2,
                        default=0,
                        max_digits=15,
                        verbose_name="amount_first_raise_made",
                    ),
                ),
                (
                    "amount_second_raise_made",
                    models.DecimalField(
                        db_column="amount_second_raise_made",
                        db_comment="The amount the player used on his second raise ",
                        decimal_places=2,
                        default=0,
                        max_digits=15,
                        verbose_name="amount_second_raise_made",
                    ),
                ),
                (
                    "ratio_to_call_facing_1bet",
                    models.FloatField(
                        db_column="ratio_to_call_facing_1bet",
                        db_comment="The ratio of the pot the player had to call facing the street bet",
                        default=0,
                        verbose_name="ratio_to_call_facing_1bet",
                    ),
                ),
                (
                    "ratio_to_call_facing_2bet",
                    models.FloatField(
                        db_column="ratio_to_call_facing_2bet",
                        db_comment="The ratio of the pot the player had to call facing the street 2bet",
                        default=0,
                        verbose_name="ratio_to_call_facing_2bet",
                    ),
                ),
                (
                    "ratio_to_call_facing_3bet",
                    models.FloatField(
                        db_column="ratio_to_call_facing_3bet",
                        db_comment="The ratio of the pot the player had to call facing the street 3bet",
                        default=0,
                        verbose_name="ratio_to_call_facing_3bet",
                    ),
                ),
                (
                    "ratio_to_call_facing_4bet",
                    models.FloatField(
                        db_column="ratio_to_call_facing_4bet",
                        db_comment="The ratio of the pot the player had to call facing the street 4bet",
                        default=0,
                        verbose_name="ratio_to_call_facing_4bet",
                    ),
                ),
                (
                    "ratio_bet_made",
                    models.FloatField(
                        db_column="ratio_bet_made",
                        db_comment="The ratio of the pot the player used to bet ",
                        default=0,
                        verbose_name="ratio_bet_made",
                    ),
                ),
                (
                    "ratio_first_raise_made",
                    models.FloatField(
                        db_column="ratio_first_raise_made",
                        db_comment="The ratio of the pot the player used on his first raise ",
                        default=0,
                        verbose_name="ratio_first_raise_made",
                    ),
                ),
                (
                    "ratio_second_raise_made",
                    models.FloatField(
                        db_column="ratio_second_raise_made",
                        db_comment="The ratio of the pot the player used on his second raise ",
                        default=0,
                        verbose_name="ratio_second_raise_made",
                    ),
                ),
                (
                    "total_bet_amount",
                    models.DecimalField(
                        db_column="total_bet_amount",
                        db_comment="The total amount the player bet ",
                        decimal_places=2,
                        default=0,
                        max_digits=15,
                        verbose_name="total_bet_amount",
                    ),
                ),
            ],
            options={
                "verbose_name": "River Player Hand Stats",
                "db_table": "river_player_hand_stats",
            },
        ),
        migrations.CreateModel(
            name="DBTurnHandStats",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "flag_saw",
                    models.BooleanField(
                        db_column="flag_saw",
                        db_comment="Whether player saw the street",
                        default=False,
                        verbose_name="flag_saw",
                    ),
                ),
                (
                    "flag_first_to_talk",
                    models.BooleanField(
                        db_column="flag_first_to_talk",
                        db_comment="Whether player was the first to talk ",
                        default=False,
                        verbose_name="flag_first_to_talk",
                    ),
                ),
                (
                    "flag_has_position",
                    models.BooleanField(
                        db_column="flag_has_position",
                        db_comment="Whether player had position ",
                        default=False,
                        verbose_name="flag_has_position",
                    ),
                ),
                (
                    "flag_bet",
                    models.BooleanField(
                        db_column="flag_bet",
                        db_comment="Whether player bet ",
                        default=False,
                        verbose_name="flag_bet",
                    ),
                ),
                (
                    "flag_open_opportunity",
                    models.BooleanField(
                        db_column="flag_open_opportunity",
                        db_comment="Whether player had the opportunity to open ",
                        default=False,
                        verbose_name="flag_open_opportunity",
                    ),
                ),
                (
                    "flag_open",
                    models.BooleanField(
                        db_column="flag_open",
                        db_comment="Whether player opened ",
                        default=False,
                        verbose_name="flag_open",
                    ),
                ),
                (
                    "flag_cbet_opportunity",
                    models.BooleanField(
                        db_column="flag_cbet_opportunity",
                        db_comment="Whether player had the opportunity to make a c-bet ",
                        default=False,
                        verbose_name="flag_cbet_opportunity",
                    ),
                ),
                (
                    "flag_cbet",
                    models.BooleanField(
                        db_column="flag_cbet",
                        db_comment="Whether player made a continuation bet ",
                        default=False,
                        verbose_name="flag_cbet",
                    ),
                ),
                (
                    "flag_face_cbet",
                    models.BooleanField(
                        db_column="flag_face_cbet",
                        db_comment="Whether player faced a continuation bet ",
                        default=False,
                        verbose_name="flag_face_cbet",
                    ),
                ),
                (
                    "flag_donk_bet_opportunity",
                    models.BooleanField(
                        db_column="flag_donk_bet_opportunity",
                        db_comment="Whether player had the opportunity to make a donk bet ",
                        default=False,
                        verbose_name="flag_donk_bet_opportunity",
                    ),
                ),
                (
                    "flag_donk_bet",
                    models.BooleanField(
                        db_column="flag_donk_bet",
                        db_comment="Whether player made a donk bet ",
                        default=False,
                        verbose_name="flag_donk_bet",
                    ),
                ),
                (
                    "flag_face_donk_bet",
                    models.BooleanField(
                        db_column="flag_face_donk_bet",
                        db_comment="Whether player faced a donk bet ",
                        default=False,
                        verbose_name="flag_face_donk_bet",
                    ),
                ),
                (
                    "flag_first_raise",
                    models.BooleanField(
                        db_column="flag_first_raise",
                        db_comment="Whether player made the first raise ",
                        default=False,
                        verbose_name="flag_first_raise",
                    ),
                ),
                (
                    "flag_fold",
                    models.BooleanField(
                        db_column="flag_fold",
                        db_comment="Whether player folded ",
                        default=False,
                        verbose_name="flag_fold",
                    ),
                ),
                (
                    "flag_check",
                    models.BooleanField(
                        db_column="flag_check",
                        db_comment="Whether player checked ",
                        default=False,
                        verbose_name="flag_check",
                    ),
                ),
                (
                    "flag_check_raise",
                    models.BooleanField(
                        db_column="flag_check_raise",
                        db_comment="Whether player check-raised ",
                        default=False,
                        verbose_name="flag_check_raise",
                    ),
                ),
                (
                    "flag_face_raise",
                    models.BooleanField(
                        db_column="flag_face_raise",
                        db_comment="Whether player faced a raise ",
                        default=False,
                        verbose_name="flag_face_raise",
                    ),
                ),
                (
                    "flag_3bet_opportunity",
                    models.BooleanField(
                        db_column="flag_3bet_opportunity",
                        db_comment="Whether player had the opportunity to 3bet ",
                        default=False,
                        verbose_name="flag_3bet_opportunity",
                    ),
                ),
                (
                    "flag_3bet",
                    models.BooleanField(
                        db_column="flag_3bet",
                        db_comment="Whether player 3bet ",
                        default=False,
                        verbose_name="flag_3bet",
                    ),
                ),
                (
                    "flag_face_3bet",
                    models.BooleanField(
                        db_column="flag_face_3bet",
                        db_comment="Whether player faced a 3bet ",
                        default=False,
                        verbose_name="flag_face_3bet",
                    ),
                ),
                (
                    "flag_4bet_opportunity",
                    models.BooleanField(
                        db_column="flag_4bet_opportunity",
                        db_comment="Whether player had the opportunity to 4+bet ",
                        default=False,
                        verbose_name="flag_4bet_opportunity",
                    ),
                ),
                (
                    "flag_4bet",
                    models.BooleanField(
                        db_column="flag_4bet",
                        db_comment="Whether player 4+bet ",
                        default=False,
                        verbose_name="flag_4bet",
                    ),
                ),
                (
                    "flag_face_4bet",
                    models.BooleanField(
                        db_column="flag_face_4bet",
                        db_comment="Whether player faced a 4+bet ",
                        default=False,
                        verbose_name="flag_face_4bet",
                    ),
                ),
                (
                    "count_player_raises",
                    models.PositiveSmallIntegerField(
                        db_column="count_player_raises",
                        db_comment="The number of raises the player made ",
                        default=0,
                        verbose_name="count_player_raises",
                    ),
                ),
                (
                    "count_player_calls",
                    models.PositiveSmallIntegerField(
                        db_column="count_player_calls",
                        db_comment="The number of calls the player made ",
                        default=0,
                        verbose_name="count_player_calls",
                    ),
                ),
                (
                    "amount_effective_stack",
                    models.DecimalField(
                        db_column="amount_effective_stack",
                        db_comment="The effective stack the player had ",
                        decimal_places=2,
                        default=0,
                        max_digits=15,
                        verbose_name="amount_effective_stack",
                    ),
                ),
                (
                    "amount_to_call_facing_1bet",
                    models.DecimalField(
                        db_column="amount_to_call_facing_1bet",
                        db_comment="The amount the player had to call facing the street bet",
                        decimal_places=2,
                        default=0,
                        max_digits=15,
                        verbose_name="amount_to_call_facing_1bet",
                    ),
                ),
                (
                    "amount_to_call_facing_2bet",
                    models.DecimalField(
                        db_column="amount_to_call_facing_2bet",
                        db_comment="The amount the player had to call facing the street 2bet",
                        decimal_places=2,
                        default=0,
                        max_digits=15,
                        verbose_name="amount_to_call_facing_2bet",
                    ),
                ),
                (
                    "amount_to_call_facing_3bet",
                    models.DecimalField(
                        db_column="amount_to_call_facing_3bet",
                        db_comment="The amount the player had to call facing the street 3bet",
                        decimal_places=2,
                        default=0,
                        max_digits=15,
                        verbose_name="amount_to_call_facing_3bet",
                    ),
                ),
                (
                    "amount_to_call_facing_4bet",
                    models.DecimalField(
                        db_column="amount_to_call_facing_4bet",
                        db_comment="The amount the player had to call facing the street 4bet",
                        decimal_places=2,
                        default=0,
                        max_digits=15,
                        verbose_name="amount_to_call_facing_4bet",
                    ),
                ),
                (
                    "amount_bet_made",
                    models.DecimalField(
                        db_column="amount_bet_made",
                        db_comment="The amount the player used to bet ",
                        decimal_places=2,
                        default=0,
                        max_digits=15,
                        verbose_name="amount_bet_made",
                    ),
                ),
                (
                    "amount_first_raise_made",
                    models.DecimalField(
                        db_column="amount_first_raise_made",
                        db_comment="The amount the player used on his first raise ",
                        decimal_places=2,
                        default=0,
                        max_digits=15,
                        verbose_name="amount_first_raise_made",
                    ),
                ),
                (
                    "amount_second_raise_made",
                    models.DecimalField(
                        db_column="amount_second_raise_made",
                        db_comment="The amount the player used on his second raise ",
                        decimal_places=2,
                        default=0,
                        max_digits=15,
                        verbose_name="amount_second_raise_made",
                    ),
                ),
                (
                    "ratio_to_call_facing_1bet",
                    models.FloatField(
                        db_column="ratio_to_call_facing_1bet",
                        db_comment="The ratio of the pot the player had to call facing the street bet",
                        default=0,
                        verbose_name="ratio_to_call_facing_1bet",
                    ),
                ),
                (
                    "ratio_to_call_facing_2bet",
                    models.FloatField(
                        db_column="ratio_to_call_facing_2bet",
                        db_comment="The ratio of the pot the player had to call facing the street 2bet",
                        default=0,
                        verbose_name="ratio_to_call_facing_2bet",
                    ),
                ),
                (
                    "ratio_to_call_facing_3bet",
                    models.FloatField(
                        db_column="ratio_to_call_facing_3bet",
                        db_comment="The ratio of the pot the player had to call facing the street 3bet",
                        default=0,
                        verbose_name="ratio_to_call_facing_3bet",
                    ),
                ),
                (
                    "ratio_to_call_facing_4bet",
                    models.FloatField(
                        db_column="ratio_to_call_facing_4bet",
                        db_comment="The ratio of the pot the player had to call facing the street 4bet",
                        default=0,
                        verbose_name="ratio_to_call_facing_4bet",
                    ),
                ),
                (
                    "ratio_bet_made",
                    models.FloatField(
                        db_column="ratio_bet_made",
                        db_comment="The ratio of the pot the player used to bet ",
                        default=0,
                        verbose_name="ratio_bet_made",
                    ),
                ),
                (
                    "ratio_first_raise_made",
                    models.FloatField(
                        db_column="ratio_first_raise_made",
                        db_comment="The ratio of the pot the player used on his first raise ",
                        default=0,
                        verbose_name="ratio_first_raise_made",
                    ),
                ),
                (
                    "ratio_second_raise_made",
                    models.FloatField(
                        db_column="ratio_second_raise_made",
                        db_comment="The ratio of the pot the player used on his second raise ",
                        default=0,
                        verbose_name="ratio_second_raise_made",
                    ),
                ),
                (
                    "total_bet_amount",
                    models.DecimalField(
                        db_column="total_bet_amount",
                        db_comment="The total amount the player bet ",
                        decimal_places=2,
                        default=0,
                        max_digits=15,
                        verbose_name="total_bet_amount",
                    ),
                ),
            ],
            options={
                "verbose_name": "Turn Player Hand Stats",
                "db_table": "turn_player_hand_stats",
            },
        ),
        migrations.CreateModel(
            name="DBFlopHandStats",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "flag_saw",
                    models.BooleanField(
                        db_column="flag_saw",
                        db_comment="Whether player saw the street",
                        default=False,
                        verbose_name="flag_saw",
                    ),
                ),
                (
                    "flag_first_to_talk",
                    models.BooleanField(
                        db_column="flag_first_to_talk",
                        db_comment="Whether player was the first to talk ",
                        default=False,
                        verbose_name="flag_first_to_talk",
                    ),
                ),
                (
                    "flag_has_position",
                    models.BooleanField(
                        db_column="flag_has_position",
                        db_comment="Whether player had position ",
                        default=False,
                        verbose_name="flag_has_position",
                    ),
                ),
                (
                    "flag_bet",
                    models.BooleanField(
                        db_column="flag_bet",
                        db_comment="Whether player bet ",
                        default=False,
                        verbose_name="flag_bet",
                    ),
                ),
                (
                    "flag_open_opportunity",
                    models.BooleanField(
                        db_column="flag_open_opportunity",
                        db_comment="Whether player had the opportunity to open ",
                        default=False,
                        verbose_name="flag_open_opportunity",
                    ),
                ),
                (
                    "flag_open",
                    models.BooleanField(
                        db_column="flag_open",
                        db_comment="Whether player opened ",
                        default=False,
                        verbose_name="flag_open",
                    ),
                ),
                (
                    "flag_cbet_opportunity",
                    models.BooleanField(
                        db_column="flag_cbet_opportunity",
                        db_comment="Whether player had the opportunity to make a c-bet ",
                        default=False,
                        verbose_name="flag_cbet_opportunity",
                    ),
                ),
                (
                    "flag_cbet",
                    models.BooleanField(
                        db_column="flag_cbet",
                        db_comment="Whether player made a continuation bet ",
                        default=False,
                        verbose_name="flag_cbet",
                    ),
                ),
                (
                    "flag_face_cbet",
                    models.BooleanField(
                        db_column="flag_face_cbet",
                        db_comment="Whether player faced a continuation bet ",
                        default=False,
                        verbose_name="flag_face_cbet",
                    ),
                ),
                (
                    "flag_donk_bet_opportunity",
                    models.BooleanField(
                        db_column="flag_donk_bet_opportunity",
                        db_comment="Whether player had the opportunity to make a donk bet ",
                        default=False,
                        verbose_name="flag_donk_bet_opportunity",
                    ),
                ),
                (
                    "flag_donk_bet",
                    models.BooleanField(
                        db_column="flag_donk_bet",
                        db_comment="Whether player made a donk bet ",
                        default=False,
                        verbose_name="flag_donk_bet",
                    ),
                ),
                (
                    "flag_face_donk_bet",
                    models.BooleanField(
                        db_column="flag_face_donk_bet",
                        db_comment="Whether player faced a donk bet ",
                        default=False,
                        verbose_name="flag_face_donk_bet",
                    ),
                ),
                (
                    "flag_first_raise",
                    models.BooleanField(
                        db_column="flag_first_raise",
                        db_comment="Whether player made the first raise ",
                        default=False,
                        verbose_name="flag_first_raise",
                    ),
                ),
                (
                    "flag_fold",
                    models.BooleanField(
                        db_column="flag_fold",
                        db_comment="Whether player folded ",
                        default=False,
                        verbose_name="flag_fold",
                    ),
                ),
                (
                    "flag_check",
                    models.BooleanField(
                        db_column="flag_check",
                        db_comment="Whether player checked ",
                        default=False,
                        verbose_name="flag_check",
                    ),
                ),
                (
                    "flag_check_raise",
                    models.BooleanField(
                        db_column="flag_check_raise",
                        db_comment="Whether player check-raised ",
                        default=False,
                        verbose_name="flag_check_raise",
                    ),
                ),
                (
                    "flag_face_raise",
                    models.BooleanField(
                        db_column="flag_face_raise",
                        db_comment="Whether player faced a raise ",
                        default=False,
                        verbose_name="flag_face_raise",
                    ),
                ),
                (
                    "flag_3bet_opportunity",
                    models.BooleanField(
                        db_column="flag_3bet_opportunity",
                        db_comment="Whether player had the opportunity to 3bet ",
                        default=False,
                        verbose_name="flag_3bet_opportunity",
                    ),
                ),
                (
                    "flag_3bet",
                    models.BooleanField(
                        db_column="flag_3bet",
                        db_comment="Whether player 3bet ",
                        default=False,
                        verbose_name="flag_3bet",
                    ),
                ),
                (
                    "flag_face_3bet",
                    models.BooleanField(
                        db_column="flag_face_3bet",
                        db_comment="Whether player faced a 3bet ",
                        default=False,
                        verbose_name="flag_face_3bet",
                    ),
                ),
                (
                    "flag_4bet_opportunity",
                    models.BooleanField(
                        db_column="flag_4bet_opportunity",
                        db_comment="Whether player had the opportunity to 4+bet ",
                        default=False,
                        verbose_name="flag_4bet_opportunity",
                    ),
                ),
                (
                    "flag_4bet",
                    models.BooleanField(
                        db_column="flag_4bet",
                        db_comment="Whether player 4+bet ",
                        default=False,
                        verbose_name="flag_4bet",
                    ),
                ),
                (
                    "flag_face_4bet",
                    models.BooleanField(
                        db_column="flag_face_4bet",
                        db_comment="Whether player faced a 4+bet ",
                        default=False,
                        verbose_name="flag_face_4bet",
                    ),
                ),
                (
                    "count_player_raises",
                    models.PositiveSmallIntegerField(
                        db_column="count_player_raises",
                        db_comment="The number of raises the player made ",
                        default=0,
                        verbose_name="count_player_raises",
                    ),
                ),
                (
                    "count_player_calls",
                    models.PositiveSmallIntegerField(
                        db_column="count_player_calls",
                        db_comment="The number of calls the player made ",
                        default=0,
                        verbose_name="count_player_calls",
                    ),
                ),
                (
                    "amount_effective_stack",
                    models.DecimalField(
                        db_column="amount_effective_stack",
                        db_comment="The effective stack the player had ",
                        decimal_places=2,
                        default=0,
                        max_digits=15,
                        verbose_name="amount_effective_stack",
                    ),
                ),
                (
                    "amount_to_call_facing_1bet",
                    models.DecimalField(
                        db_column="amount_to_call_facing_1bet",
                        db_comment="The amount the player had to call facing the street bet",
                        decimal_places=2,
                        default=0,
                        max_digits=15,
                        verbose_name="amount_to_call_facing_1bet",
                    ),
                ),
                (
                    "amount_to_call_facing_2bet",
                    models.DecimalField(
                        db_column="amount_to_call_facing_2bet",
                        db_comment="The amount the player had to call facing the street 2bet",
                        decimal_places=2,
                        default=0,
                        max_digits=15,
                        verbose_name="amount_to_call_facing_2bet",
                    ),
                ),
                (
                    "amount_to_call_facing_3bet",
                    models.DecimalField(
                        db_column="amount_to_call_facing_3bet",
                        db_comment="The amount the player had to call facing the street 3bet",
                        decimal_places=2,
                        default=0,
                        max_digits=15,
                        verbose_name="amount_to_call_facing_3bet",
                    ),
                ),
                (
                    "amount_to_call_facing_4bet",
                    models.DecimalField(
                        db_column="amount_to_call_facing_4bet",
                        db_comment="The amount the player had to call facing the street 4bet",
                        decimal_places=2,
                        default=0,
                        max_digits=15,
                        verbose_name="amount_to_call_facing_4bet",
                    ),
                ),
                (
                    "amount_bet_made",
                    models.DecimalField(
                        db_column="amount_bet_made",
                        db_comment="The amount the player used to bet ",
                        decimal_places=2,
                        default=0,
                        max_digits=15,
                        verbose_name="amount_bet_made",
                    ),
                ),
                (
                    "amount_first_raise_made",
                    models.DecimalField(
                        db_column="amount_first_raise_made",
                        db_comment="The amount the player used on his first raise ",
                        decimal_places=2,
                        default=0,
                        max_digits=15,
                        verbose_name="amount_first_raise_made",
                    ),
                ),
                (
                    "amount_second_raise_made",
                    models.DecimalField(
                        db_column="amount_second_raise_made",
                        db_comment="The amount the player used on his second raise ",
                        decimal_places=2,
                        default=0,
                        max_digits=15,
                        verbose_name="amount_second_raise_made",
                    ),
                ),
                (
                    "ratio_to_call_facing_1bet",
                    models.FloatField(
                        db_column="ratio_to_call_facing_1bet",
                        db_comment="The ratio of the pot the player had to call facing the street bet",
                        default=0,
                        verbose_name="ratio_to_call_facing_1bet",
                    ),
                ),
                (
                    "ratio_to_call_facing_2bet",
                    models.FloatField(
                        db_column="ratio_to_call_facing_2bet",
                        db_comment="The ratio of the pot the player had to call facing the street 2bet",
                        default=0,
                        verbose_name="ratio_to_call_facing_2bet",
                    ),
                ),
                (
                    "ratio_to_call_facing_3bet",
                    models.FloatField(
                        db_column="ratio_to_call_facing_3bet",
                        db_comment="The ratio of the pot the player had to call facing the street 3bet",
                        default=0,
                        verbose_name="ratio_to_call_facing_3bet",
                    ),
                ),
                (
                    "ratio_to_call_facing_4bet",
                    models.FloatField(
                        db_column="ratio_to_call_facing_4bet",
                        db_comment="The ratio of the pot the player had to call facing the street 4bet",
                        default=0,
                        verbose_name="ratio_to_call_facing_4bet",
                    ),
                ),
                (
                    "ratio_bet_made",
                    models.FloatField(
                        db_column="ratio_bet_made",
                        db_comment="The ratio of the pot the player used to bet ",
                        default=0,
                        verbose_name="ratio_bet_made",
                    ),
                ),
                (
                    "ratio_first_raise_made",
                    models.FloatField(
                        db_column="ratio_first_raise_made",
                        db_comment="The ratio of the pot the player used on his first raise ",
                        default=0,
                        verbose_name="ratio_first_raise_made",
                    ),
                ),
                (
                    "ratio_second_raise_made",
                    models.FloatField(
                        db_column="ratio_second_raise_made",
                        db_comment="The ratio of the pot the player used on his second raise ",
                        default=0,
                        verbose_name="ratio_second_raise_made",
                    ),
                ),
                (
                    "total_bet_amount",
                    models.DecimalField(
                        db_column="total_bet_amount",
                        db_comment="The total amount the player bet ",
                        decimal_places=2,
                        default=0,
                        max_digits=15,
                        verbose_name="total_bet_amount",
                    ),
                ),
                (
                    "actions_sequence",
                    models.ForeignKey(
                        db_column="actions_sequence",
                        db_comment="The sequence of actions the player made ",
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="flop_actions_sequence",
                        to="actions.dbactionssequence",
                        verbose_name="actions_sequence",
                    ),
                ),
                (
                    "move_facing_1bet",
                    models.ForeignKey(
                        db_column="move_facing_1bet",
                        db_comment="The move the player did when facing the street bet",
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="flop_move_facing_1bet",
                        to="actions.dbactionmove",
                        verbose_name="move_facing_1bet",
                    ),
                ),
                (
                    "move_facing_2bet",
                    models.ForeignKey(
                        db_column="move_facing_2bet",
                        db_comment="The move the player did when facing the street 2bet",
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="flop_move_facing_2bet",
                        to="actions.dbactionmove",
                        verbose_name="move_facing_2bet",
                    ),
                ),
                (
                    "move_facing_3bet",
                    models.ForeignKey(
                        db_column="move_facing_3bet",
                        db_comment="The move the player did when facing the street 3bet",
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="flop_move_facing_3bet",
                        to="actions.dbactionmove",
                        verbose_name="move_facing_3bet",
                    ),
                ),
                (
                    "move_facing_4bet",
                    models.ForeignKey(
                        db_column="move_facing_4bet",
                        db_comment="The move the player did when facing the street 4bet",
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="flop_move_facing_4bet",
                        to="actions.dbactionmove",
                        verbose_name="move_facing_4bet",
                    ),
                ),
                (
                    "move_facing_cbet",
                    models.ForeignKey(
                        db_column="move_facing_cbet",
                        db_comment="The move the player did when facing the street cbet",
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="flop_move_facing_cbet",
                        to="actions.dbactionmove",
                        verbose_name="move_facing_cbet",
                    ),
                ),
                (
                    "move_facing_donk_bet",
                    models.ForeignKey(
                        db_column="move_facing_donk_bet",
                        db_comment="The move the player did when facing the street donk bet",
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="flop_move_facing_donk_bet",
                        to="actions.dbactionmove",
                        verbose_name="move_facing_donk_bet",
                    ),
                ),
            ],
            options={
                "verbose_name": "Flop Player Hand Stats",
                "db_table": "flop_player_hand_stats",
            },
        ),
        migrations.CreateModel(
            name="DBGeneralHandStats",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "flag_went_to_showdown",
                    models.BooleanField(
                        db_column="flag_went_to_showdown",
                        db_comment="Whether the player went to showdown",
                        default=False,
                        verbose_name="flag_went_to_showdown",
                    ),
                ),
                (
                    "flag_is_hero",
                    models.BooleanField(
                        db_column="flag_is_hero",
                        db_comment="Whether the player is the hero",
                        default=False,
                        verbose_name="flag_is_hero",
                    ),
                ),
                (
                    "flag_won_hand",
                    models.BooleanField(
                        db_column="flag_won_hand",
                        db_comment="Whether the player won the hand",
                        default=False,
                        verbose_name="flag_won_hand",
                    ),
                ),
                (
                    "starting_stack",
                    models.DecimalField(
                        db_column="starting_stack",
                        db_comment="The starting stack of the player at the beginning of the hand",
                        decimal_places=2,
                        default=0,
                        max_digits=15,
                        verbose_name="starting_stack",
                    ),
                ),
                (
                    "amount_won",
                    models.DecimalField(
                        db_column="amount_won",
                        db_comment="The amount the player won ",
                        decimal_places=2,
                        default=0,
                        max_digits=15,
                        verbose_name="amount_won",
                    ),
                ),
                (
                    "amount_expected_won",
                    models.DecimalField(
                        db_column="amount_expected_won",
                        db_comment="The amount the player is expected to win after showdown (EV)",
                        decimal_places=2,
                        default=0,
                        max_digits=15,
                        verbose_name="amount_expected_won",
                    ),
                ),
                (
                    "total_bet_amount",
                    models.DecimalField(
                        db_column="total_bet_amount",
                        db_comment="The total amount the player bet ",
                        decimal_places=2,
                        default=0,
                        max_digits=15,
                        verbose_name="total_bet_amount",
                    ),
                ),
                (
                    "all_in_street",
                    models.ForeignKey(
                        db_column="all_in_street",
                        db_comment="The street the player went all-in",
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="all_in_street",
                        to="actions.dbstreet",
                        verbose_name="all_in_street",
                    ),
                ),
                (
                    "combo",
                    models.ForeignKey(
                        db_column="combo",
                        db_comment="The combo the player had",
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="combo",
                        to="cards.dbcombo",
                        verbose_name="combo",
                    ),
                ),
                (
                    "face_all_in_street",
                    models.ForeignKey(
                        db_column="face_all_in_street",
                        db_comment="The street the player faced an all-in",
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="face_all_in_street",
                        to="actions.dbstreet",
                        verbose_name="face_all_in_street",
                    ),
                ),
                (
                    "face_covering_bet_street",
                    models.ForeignKey(
                        db_column="face_covering_bet_street",
                        db_comment="The street the player faced a covering bet",
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="face_covering_bet_street",
                        to="actions.dbstreet",
                        verbose_name="face_covering_bet_street",
                    ),
                ),
                (
                    "facing_all_in_move",
                    models.ForeignKey(
                        db_column="facing_all_in_move",
                        db_comment="The move the player did when facing an all-in",
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="general_facing_all_in_move",
                        to="actions.dbactionmove",
                        verbose_name="facing_all_in_move",
                    ),
                ),
                (
                    "facing_covering_bet_move",
                    models.ForeignKey(
                        db_column="facing_covering_bet_move",
                        db_comment="The move the player did when facing a covering bet",
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="general_facing_covering_bet_move",
                        to="actions.dbactionmove",
                        verbose_name="facing_covering_bet_move",
                    ),
                ),
                (
                    "fold_street",
                    models.ForeignKey(
                        db_column="fold_street",
                        db_comment="The street the player folded",
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="fold_street",
                        to="actions.dbstreet",
                        verbose_name="fold_street",
                    ),
                ),
            ],
            options={
                "verbose_name": "General Player Hand Stats",
                "db_table": "general_player_hand_stats",
            },
        ),
        migrations.CreateModel(
            name="DBHandHistory",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "hand_id",
                    models.CharField(
                        blank=True, default="", max_length=64, unique=True
                    ),
                ),
                ("hand_date", models.DateTimeField()),
                ("max_players", models.PositiveSmallIntegerField()),
                ("cnt_players", models.PositiveSmallIntegerField()),
                ("button_seat", models.PositiveSmallIntegerField()),
                (
                    "flop",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        to="cards.dbflop",
                    ),
                ),
                (
                    "hero_combo",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        to="cards.dbcombo",
                    ),
                ),
                (
                    "level",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        to="tournaments.dblevel",
                    ),
                ),
                (
                    "river",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="rivers",
                        to="cards.dbcard",
                    ),
                ),
                (
                    "tournament",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        to="tournaments.dbtournament",
                    ),
                ),
                (
                    "turn",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="turns",
                        to="cards.dbcard",
                    ),
                ),
            ],
            options={
                "verbose_name": "Hand History",
                "verbose_name_plural": "Hand Histories",
                "db_table": "hand_histories",
                "ordering": ["hand_id", "hand_date"],
            },
        ),
        migrations.CreateModel(
            name="DBPlayerHandStats",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "flop_stats",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="flop_stats",
                        to="histories.dbflophandstats",
                    ),
                ),
                (
                    "general_stats",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="general_stats",
                        to="histories.dbgeneralhandstats",
                    ),
                ),
                (
                    "hand_history",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="histories.dbhandhistory",
                    ),
                ),
            ],
            options={
                "verbose_name": "Player Hand Stats",
                "verbose_name_plural": "Player Hand Stats",
                "db_table": "player_hand_stats",
                "ordering": ["hand_history", "player"],
            },
        ),
    ]
