# Generated by Django 5.0.6 on 2024-09-11 14:56

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):
    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="DBBuyIn",
            fields=[
                (
                    "id",
                    models.SmallAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "prize_pool_contribution",
                    models.DecimalField(decimal_places=2, default=0.0, max_digits=8),
                ),
                (
                    "bounty",
                    models.DecimalField(decimal_places=2, default=0.0, max_digits=8),
                ),
                (
                    "rake",
                    models.DecimalField(decimal_places=2, default=0.0, max_digits=8),
                ),
                (
                    "total",
                    models.DecimalField(decimal_places=2, default=0.0, max_digits=8),
                ),
            ],
            options={
                "verbose_name": "Buy In",
                "verbose_name_plural": "Buy Ins",
                "db_table": "buy_ins",
            },
        ),
        migrations.CreateModel(
            name="DBLevel",
            fields=[
                (
                    "id",
                    models.SmallAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("value", models.PositiveSmallIntegerField()),
                ("sb", models.FloatField()),
                ("bb", models.FloatField()),
                ("ante", models.FloatField()),
            ],
            options={
                "verbose_name": "Level",
                "verbose_name_plural": "Levels",
                "db_table": "levels",
            },
        ),
        migrations.CreateModel(
            name="DBRefTournament",
            fields=[
                (
                    "id",
                    models.SmallAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        db_comment="The name of the tournament", max_length=64
                    ),
                ),
                (
                    "starting_stack",
                    models.IntegerField(
                        db_comment="The starting stack of the players", default=20000
                    ),
                ),
                (
                    "is_ko",
                    models.BooleanField(
                        db_comment="Whether the tournament is a knockout", default=False
                    ),
                ),
            ],
            options={
                "verbose_name": "Reference Tournament",
                "verbose_name_plural": "Reference Tournaments",
                "db_table": "ref_tournaments",
            },
        ),
        migrations.CreateModel(
            name="DBTournament",
            fields=[
                (
                    "id",
                    models.SmallAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "tournament_id",
                    models.CharField(
                        db_comment="The tournament id generated by the poker room",
                        max_length=64,
                        unique=True,
                    ),
                ),
                (
                    "total_players",
                    models.PositiveIntegerField(
                        db_comment="The total number of players in the tournament"
                    ),
                ),
                (
                    "final_position",
                    models.PositiveIntegerField(
                        db_comment="The final position of hero in the tournament",
                        null=True,
                    ),
                ),
                (
                    "start_date",
                    models.DateTimeField(
                        db_comment="The start datetime of the tournament"
                    ),
                ),
                (
                    "amount_won",
                    models.FloatField(db_comment="The amount won by hero", default=0.0),
                ),
                (
                    "prize_pool",
                    models.FloatField(
                        db_comment="The prize pool of the tournament", default=0.0
                    ),
                ),
                (
                    "nb_entries",
                    models.PositiveSmallIntegerField(
                        db_comment="The number of entries of hero in the tournament",
                        default=1,
                    ),
                ),
            ],
            options={
                "verbose_name": "Tournament",
                "verbose_name_plural": "Tournaments",
                "db_table": "tournaments",
            },
        ),
        migrations.CreateModel(
            name="DBTourSpeed",
            fields=[
                (
                    "id",
                    models.SmallAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        db_comment="The speed of the tournament",
                        max_length=8,
                        unique=True,
                    ),
                ),
            ],
            options={
                "verbose_name": "Tournament Speed",
                "verbose_name_plural": "Tournament Speeds",
                "db_table": "tour_speeds",
            },
        ),
        migrations.CreateModel(
            name="DBTourType",
            fields=[
                (
                    "id",
                    models.SmallAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        db_comment="The type of the tournament",
                        max_length=16,
                        unique=True,
                    ),
                ),
            ],
            options={
                "verbose_name": "Tournament Type",
                "verbose_name_plural": "Tournament Types",
                "db_table": "tour_types",
            },
        ),
        migrations.AddConstraint(
            model_name="dbbuyin",
            constraint=models.UniqueConstraint(
                fields=("prize_pool_contribution", "bounty", "rake"),
                name="unique_buy_in",
            ),
        ),
        migrations.AddConstraint(
            model_name="dblevel",
            constraint=models.UniqueConstraint(
                fields=("value", "sb", "bb", "ante"), name="unique_level"
            ),
        ),
        migrations.AddField(
            model_name="dbreftournament",
            name="buy_in",
            field=models.ForeignKey(
                db_comment="The buy-in of the tournament",
                on_delete=django.db.models.deletion.CASCADE,
                to="tournaments.dbbuyin",
            ),
        ),
        migrations.AddField(
            model_name="dbtournament",
            name="ref_tournament",
            field=models.ForeignKey(
                db_comment="The reference tournament",
                on_delete=django.db.models.deletion.CASCADE,
                to="tournaments.dbreftournament",
            ),
        ),
        migrations.AddConstraint(
            model_name="dbtourspeed",
            constraint=models.UniqueConstraint(
                fields=("name",), name="unique_tour_speed"
            ),
        ),
        migrations.AddField(
            model_name="dbreftournament",
            name="speed",
            field=models.ForeignKey(
                db_comment="The speed of the tournament",
                default=2,
                on_delete=django.db.models.deletion.CASCADE,
                to="tournaments.dbtourspeed",
            ),
        ),
        migrations.AddConstraint(
            model_name="dbtourtype",
            constraint=models.UniqueConstraint(
                fields=("name",), name="unique_tour_type"
            ),
        ),
        migrations.AddField(
            model_name="dbreftournament",
            name="tournament_type",
            field=models.ForeignKey(
                db_comment="The type of the tournament",
                default=1,
                on_delete=django.db.models.deletion.CASCADE,
                to="tournaments.dbtourtype",
            ),
        ),
        migrations.AddConstraint(
            model_name="dbtournament",
            constraint=models.UniqueConstraint(
                fields=("tournament_id",), name="unique_tournament"
            ),
        ),
        migrations.AddConstraint(
            model_name="dbreftournament",
            constraint=models.UniqueConstraint(
                fields=("name", "buy_in", "speed", "starting_stack", "tournament_type"),
                name="unique_ref_tournament",
            ),
        ),
    ]
