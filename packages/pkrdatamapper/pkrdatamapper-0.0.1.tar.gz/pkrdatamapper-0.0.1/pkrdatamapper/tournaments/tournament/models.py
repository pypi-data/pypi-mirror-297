import pytz
from django.conf import settings
from django.db import models
from pkrcomponents.components.tournaments.tournament import Tournament
from pkrdatamapper.common.mixins import DFDataMixin
from pkrdatamapper.tournaments.ref_tournament.models import DBRefTournament


class DBTournament(models.Model, DFDataMixin):
    tournament_id = models.CharField(max_length=64, unique=True,
                                     db_comment="The tournament id generated by the poker room")
    ref_tournament = models.ForeignKey(DBRefTournament, on_delete=models.CASCADE, db_comment="The reference tournament")
    total_players = models.PositiveIntegerField(db_comment="The total number of players in the tournament")
    final_position = models.PositiveIntegerField(null=True, db_comment="The final position of hero in the tournament")
    start_date = models.DateTimeField(db_comment="The start datetime of the tournament")
    amount_won = models.FloatField(default=0.0, db_comment="The amount won by hero")
    bounty_won = models.FloatField(default=0.0, db_comment="The amount of bounties won by hero")
    prize_pool = models.FloatField(default=0.0, db_comment="The prize pool of the tournament")
    nb_entries = models.PositiveSmallIntegerField(default=1,
                                                  db_comment="The number of entries of hero in the tournament")

    @classmethod
    def from_tournament(cls, tournament: Tournament):
        local_timezone = pytz.timezone(settings.TIME_ZONE)
        start_date = local_timezone.localize(tournament.start_date)
        ref_tournament = DBRefTournament.from_tournament(tournament)
        db_tournament, _ = cls.objects.update_or_create(
            tournament_id=tournament.id,
            defaults={
                'ref_tournament': ref_tournament,
                'total_players': tournament.total_players,
                'start_date': start_date,
                'final_position': tournament.final_position,
                'amount_won': tournament.amount_won,
                'bounty_won': tournament.bounty_won,
                'prize_pool': tournament.prize_pool,
                'nb_entries': tournament.nb_entries,

            }
        )
        db_tournament.save()
        return db_tournament

    class Meta:
        db_table = 'tournaments'
        verbose_name = "Tournament"
        verbose_name_plural = "Tournaments"
        constraints = [
            models.UniqueConstraint(fields=['tournament_id'], name='unique_tournament')
        ]

    def __str__(self):
        return self.tournament_id
