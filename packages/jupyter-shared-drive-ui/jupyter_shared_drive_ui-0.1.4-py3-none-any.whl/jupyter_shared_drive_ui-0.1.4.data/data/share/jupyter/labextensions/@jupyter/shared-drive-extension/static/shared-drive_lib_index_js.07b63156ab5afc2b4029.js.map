{"version":3,"file":"shared-drive_lib_index_js.07b63156ab5afc2b4029.js","mappings":";;;;;;;;;;;;;;;AAAA;AACA;AAC+B;AAC/B;AACA;AACA;AACA;AACA;AACO;AACP,YAAY,OAAO;AACnB,YAAY,gDAAmB,UAAU,oCAAoC;AAC7E,QAAQ,gDAAmB,UAAU,kEAAkE,+BAA+B;AACtI,YAAY,gDAAmB;AAC/B,QAAQ,gDAAmB;AAC3B;;;;;;;;;;;;;;;;;;;;;;;ACdA;AACA;AACuE;AACmC;AAC9D;AAC0F;AACtI;AACA;AACA;AACA,6BAA6B,oDAAK;AAClC;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA,6BAA6B,wDAAU;AACvC;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,CAAC;AACD;AACA,mCAAmC,yDAAU;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,uBAAuB;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gDAAgD,sDAAO;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,uDAAK;AAChC;AACA;AACA,gBAAgB,mBAAmB;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,+EAA0C;AACzE,6BAA6B,+EAA0C;AACvE;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,8DAAe;AAC/C,oCAAoC,6DAAe;AACnD;AACA,oDAAoD,kIAAkI;AACtL;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA,CAAC;AACD;AACA;AACA;AACA,kBAAkB,8DAAY;AAC9B;AACA,YAAY,mBAAmB;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,+EAA0C;AACnE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA,CAAC;AACD;AACA;AACA;AACA,6BAA6B,uDAAK;AAClC;AACA;AACA,gBAAgB,mBAAmB;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,+EAA0C;AACzE,6BAA6B,+EAA0C;AACvE;AACA;AACA;AACA;AACA,oCAAoC,6DAAe,2BAA2B,8DAAe;AAC7F;AACA,oDAAoD,kIAAkI;AACtL;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA,CAAC;AACD;AACA;AACA;AACA,0BAA0B,wDAAU;AACpC;AACA;AACA,4BAA4B,yBAAyB;AACrD;AACA;AACA;AACA,gCAAgC,kDAAkD;AAClF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,mBAAmB;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,wEAAmC;AACtE,iCAAiC,wEAAmC;AACpE;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,mEAA8B;AAChE;AACA;AACA,kCAAkC,mEAA8B;AAChE;AACA;AACA,qBAAqB;AACrB,yBAAyB,sDAAO;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,0DAAQ,GAAG,6CAA6C;AACpE;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;;;;;;;;;;;;;;;;;;;;;;;;;ACtRA;AACA;AACA;AACA;AACA;AACA;AACyB;AACC;AACH;AACS;;;;;;;;;;;;;;;;;;;;;;ACThC;AACA;AACqD;AACL;AACT;AACvC;AACA;AACA;AACO,+BAA+B,oDAAO;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,iDAAC,MAAM,mEAAmE;AACzF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,iDAAC,OAAO,oDAAoD;AAC3E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,iDAAC;AACpB;AACA,aAAa,EAAE,iDAAC,OAAO,qCAAqC;AAC5D;AACA;AACA,mBAAmB,iDAAC;AACpB;AACA,yBAAyB;AACzB,aAAa,EAAE,iDAAC,QAAQ;AACxB;AACA;AACA,mBAAmB,iDAAC;AACpB;AACA,aAAa,EAAE,+DAAQ;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACO,uBAAuB,iDAAI;AAClC;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;AC1EA;AACA;AAC0C;AAC1C;AACA;AACA;AACA;AACA;AACA;AACO,sBAAsB,oDAAK;AAClC;AACA;AACA;AACO,6BAA6B,oDAAK;;;;;;;;;;;;;;;;;;;;;;;ACbzC;AACA;AACmD;AACX;AACT;AACkB;AAC1C,4BAA4B,kDAAK;AACxC;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACO,2BAA2B,6DAAW;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,gDAAmB,CAAC,0DAAiB,IAAI,kBAAkB;AAC1E;AACA","sources":["webpack://@jupyter/shared-drive-extension/../shared-drive/lib/components.js","webpack://@jupyter/shared-drive-extension/../shared-drive/lib/cursors.js","webpack://@jupyter/shared-drive-extension/../shared-drive/lib/index.js","webpack://@jupyter/shared-drive-extension/../shared-drive/lib/menu.js","webpack://@jupyter/shared-drive-extension/../shared-drive/lib/tokens.js","webpack://@jupyter/shared-drive-extension/../shared-drive/lib/userinfopanel.js"],"sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport * as React from 'react';\n/**\n * React component for the user icon.\n *\n * @returns The React component\n */\nexport const UserIconComponent = props => {\n    const { user } = props;\n    return (React.createElement(\"div\", { className: \"jp-UserInfo-Container\" },\n        React.createElement(\"div\", { title: user.display_name, className: \"jp-UserInfo-Icon\", style: { backgroundColor: user.color } },\n            React.createElement(\"span\", null, user.initials)),\n        React.createElement(\"h3\", null, user.display_name)));\n};\n","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { Annotation, EditorSelection, Facet } from '@codemirror/state';\nimport { EditorView, hoverTooltip, layer, RectangleMarker, tooltips, ViewPlugin } from '@codemirror/view';\nimport { JSONExt } from '@lumino/coreutils';\nimport { createAbsolutePositionFromRelativePosition, createRelativePositionFromJSON, createRelativePositionFromTypeIndex } from 'yjs';\n/**\n * Facet storing the Yjs document objects\n */\nconst editorAwarenessFacet = Facet.define({\n    combine(configs) {\n        return configs[configs.length - 1];\n    }\n});\n/**\n * Remote selection theme\n */\nconst remoteSelectionTheme = EditorView.baseTheme({\n    '.jp-remote-cursor': {\n        borderLeft: '1px solid black',\n        marginLeft: '-1px'\n    },\n    '.jp-remote-cursor.jp-mod-primary': {\n        borderLeftWidth: '2px'\n    },\n    '.jp-remote-selection': {\n        opacity: 0.5\n    },\n    '.cm-tooltip': {\n        border: 'none'\n    },\n    '.cm-tooltip .jp-remote-userInfo': {\n        color: 'var(--jp-ui-inverse-font-color0)',\n        padding: '0px 2px'\n    }\n});\n// TODO fix which user needs update\nconst remoteSelectionsAnnotation = Annotation.define();\n/**\n * Wrapper around RectangleMarker to be able to set the user color for the remote cursor and selection ranges.\n */\nclass RemoteMarker {\n    /**\n     * Constructor\n     *\n     * @param style Specific user style to be applied on the marker element\n     * @param marker {@link RectangleMarker} to wrap\n     */\n    constructor(style, marker) {\n        this.style = style;\n        this.marker = marker;\n    }\n    draw() {\n        const elt = this.marker.draw();\n        for (const [key, value] of Object.entries(this.style)) {\n            // @ts-expect-error Unknown key\n            elt.style[key] = value;\n        }\n        return elt;\n    }\n    eq(other) {\n        return (this.marker.eq(other.marker) && JSONExt.deepEqual(this.style, other.style));\n    }\n    update(dom, oldMarker) {\n        for (const [key, value] of Object.entries(this.style)) {\n            // @ts-expect-error Unknown key\n            dom.style[key] = value;\n        }\n        return this.marker.update(dom, oldMarker.marker);\n    }\n}\n/**\n * Extension defining a new editor layer storing the remote user cursors\n */\nconst remoteCursorsLayer = layer({\n    above: true,\n    markers(view) {\n        const { awareness, ytext } = view.state.facet(editorAwarenessFacet);\n        const ydoc = ytext.doc;\n        const cursors = [];\n        awareness.getStates().forEach((state, clientID) => {\n            var _a, _b, _c;\n            if (clientID === awareness.doc.clientID) {\n                return;\n            }\n            const cursors_ = state.cursors;\n            for (const cursor of cursors_ !== null && cursors_ !== void 0 ? cursors_ : []) {\n                if (!(cursor === null || cursor === void 0 ? void 0 : cursor.anchor) || !(cursor === null || cursor === void 0 ? void 0 : cursor.head)) {\n                    return;\n                }\n                const anchor = createAbsolutePositionFromRelativePosition(cursor.anchor, ydoc);\n                const head = createAbsolutePositionFromRelativePosition(cursor.head, ydoc);\n                if ((anchor === null || anchor === void 0 ? void 0 : anchor.type) !== ytext || (head === null || head === void 0 ? void 0 : head.type) !== ytext) {\n                    return;\n                }\n                const className = ((_a = cursor.primary) !== null && _a !== void 0 ? _a : true)\n                    ? 'jp-remote-cursor jp-mod-primary'\n                    : 'jp-remote-cursor';\n                const cursor_ = EditorSelection.cursor(head.index, head.index > anchor.index ? -1 : 1);\n                for (const piece of RectangleMarker.forRange(view, className, cursor_)) {\n                    // Wrap the rectangle marker to set the user color\n                    cursors.push(new RemoteMarker({ borderLeftColor: (_c = (_b = state.user) === null || _b === void 0 ? void 0 : _b.color) !== null && _c !== void 0 ? _c : 'black' }, piece));\n                }\n            }\n        });\n        return cursors;\n    },\n    update(update, layer) {\n        return !!update.transactions.find(t => t.annotation(remoteSelectionsAnnotation));\n    },\n    class: 'jp-remote-cursors'\n});\n/**\n * Tooltip extension to display user display name at cursor position\n */\nconst userHover = hoverTooltip((view, pos) => {\n    var _a;\n    const { awareness, ytext } = view.state.facet(editorAwarenessFacet);\n    const ydoc = ytext.doc;\n    for (const [clientID, state] of awareness.getStates()) {\n        if (clientID === awareness.doc.clientID) {\n            continue;\n        }\n        for (const cursor of (_a = state.cursors) !== null && _a !== void 0 ? _a : []) {\n            if (!(cursor === null || cursor === void 0 ? void 0 : cursor.head)) {\n                continue;\n            }\n            const head = createAbsolutePositionFromRelativePosition(cursor.head, ydoc);\n            if ((head === null || head === void 0 ? void 0 : head.type) !== ytext) {\n                continue;\n            }\n            // Use some margin around the cursor to display the user.\n            if (head.index - 3 <= pos && pos <= head.index + 3) {\n                return {\n                    pos: head.index,\n                    above: true,\n                    create: () => {\n                        var _a, _b, _c, _d;\n                        const dom = document.createElement('div');\n                        dom.classList.add('jp-remote-userInfo');\n                        dom.style.backgroundColor = (_b = (_a = state.user) === null || _a === void 0 ? void 0 : _a.color) !== null && _b !== void 0 ? _b : 'darkgrey';\n                        dom.textContent =\n                            (_d = (_c = state.user) === null || _c === void 0 ? void 0 : _c.display_name) !== null && _d !== void 0 ? _d : 'Anonymous';\n                        return { dom };\n                    }\n                };\n            }\n        }\n    }\n    return null;\n}, {\n    hideOn: (tr, tooltip) => !!tr.annotation(remoteSelectionsAnnotation),\n    hoverTime: 0\n});\n/**\n * Extension defining a new editor layer storing the remote selections\n */\nconst remoteSelectionLayer = layer({\n    above: false,\n    markers(view) {\n        const { awareness, ytext } = view.state.facet(editorAwarenessFacet);\n        const ydoc = ytext.doc;\n        const cursors = [];\n        awareness.getStates().forEach((state, clientID) => {\n            var _a, _b, _c;\n            if (clientID === awareness.doc.clientID) {\n                return;\n            }\n            const cursors_ = state.cursors;\n            for (const cursor of cursors_ !== null && cursors_ !== void 0 ? cursors_ : []) {\n                if (((_a = cursor.empty) !== null && _a !== void 0 ? _a : true) || !(cursor === null || cursor === void 0 ? void 0 : cursor.anchor) || !(cursor === null || cursor === void 0 ? void 0 : cursor.head)) {\n                    return;\n                }\n                const anchor = createAbsolutePositionFromRelativePosition(cursor.anchor, ydoc);\n                const head = createAbsolutePositionFromRelativePosition(cursor.head, ydoc);\n                if ((anchor === null || anchor === void 0 ? void 0 : anchor.type) !== ytext || (head === null || head === void 0 ? void 0 : head.type) !== ytext) {\n                    return;\n                }\n                const className = 'jp-remote-selection';\n                for (const piece of RectangleMarker.forRange(view, className, EditorSelection.range(anchor.index, head.index))) {\n                    // Wrap the rectangle marker to set the user color\n                    cursors.push(new RemoteMarker({ backgroundColor: (_c = (_b = state.user) === null || _b === void 0 ? void 0 : _b.color) !== null && _c !== void 0 ? _c : 'black' }, piece));\n                }\n            }\n        });\n        return cursors;\n    },\n    update(update, layer) {\n        return !!update.transactions.find(t => t.annotation(remoteSelectionsAnnotation));\n    },\n    class: 'jp-remote-selections'\n});\n/**\n * CodeMirror extension exchanging and displaying remote user selection ranges (including cursors)\n */\nconst showCollaborators = ViewPlugin.fromClass(class {\n    constructor(view) {\n        this.editorAwareness = view.state.facet(editorAwarenessFacet);\n        this._listener = ({ added, updated, removed }) => {\n            const clients = added.concat(updated).concat(removed);\n            if (clients.findIndex(id => id !== this.editorAwareness.awareness.doc.clientID) >= 0) {\n                // Trick to get the remoteCursorLayers to be updated\n                view.dispatch({ annotations: [remoteSelectionsAnnotation.of([])] });\n            }\n        };\n        this.editorAwareness.awareness.on('change', this._listener);\n    }\n    destroy() {\n        this.editorAwareness.awareness.off('change', this._listener);\n    }\n    /**\n     * Communicate the current user cursor position to all remotes\n     */\n    update(update) {\n        var _a;\n        if (!update.docChanged && !update.selectionSet) {\n            return;\n        }\n        const { awareness, ytext } = this.editorAwareness;\n        const localAwarenessState = awareness.getLocalState();\n        // set local awareness state (update cursors)\n        if (localAwarenessState) {\n            const hasFocus = update.view.hasFocus && update.view.dom.ownerDocument.hasFocus();\n            const selection = update.state.selection;\n            const cursors = new Array();\n            if (hasFocus && selection) {\n                for (const r of selection.ranges) {\n                    const primary = r === selection.main;\n                    const anchor = createRelativePositionFromTypeIndex(ytext, r.anchor);\n                    const head = createRelativePositionFromTypeIndex(ytext, r.head);\n                    cursors.push({\n                        anchor,\n                        head,\n                        primary,\n                        empty: r.empty\n                    });\n                }\n                if (!localAwarenessState.cursors || cursors.length > 0) {\n                    const oldCursors = (_a = localAwarenessState.cursors) === null || _a === void 0 ? void 0 : _a.map(cursor => {\n                        return {\n                            ...cursor,\n                            anchor: (cursor === null || cursor === void 0 ? void 0 : cursor.anchor)\n                                ? createRelativePositionFromJSON(cursor.anchor)\n                                : null,\n                            head: (cursor === null || cursor === void 0 ? void 0 : cursor.head)\n                                ? createRelativePositionFromJSON(cursor.head)\n                                : null\n                        };\n                    });\n                    if (!JSONExt.deepEqual(cursors, oldCursors)) {\n                        // Update cursors\n                        awareness.setLocalStateField('cursors', cursors);\n                    }\n                }\n            }\n        }\n    }\n}, {\n    provide: () => {\n        return [\n            remoteSelectionTheme,\n            remoteCursorsLayer,\n            remoteSelectionLayer,\n            userHover,\n            // As we use relative positioning of widget, the tooltip must be positioned absolutely\n            // And we attach the tooltip to the body to avoid overflow rules\n            tooltips({ position: 'absolute', parent: document.body })\n        ];\n    }\n});\n/**\n * CodeMirror extension to display remote users cursors\n *\n * @param config Editor source and awareness\n * @returns CodeMirror extension\n */\nexport function remoteUserCursors(config) {\n    return [editorAwarenessFacet.of(config), showCollaborators];\n}\n","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n/**\n * @packageDocumentation\n * @module shared-drive\n */\nexport * from './tokens';\nexport * from './cursors';\nexport * from './menu';\nexport * from './userinfopanel';\n","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { userIcon } from '@jupyterlab/ui-components';\nimport { Menu, MenuBar } from '@lumino/widgets';\nimport { h } from '@lumino/virtualdom';\n/**\n * Custom renderer for the user menu.\n */\nexport class RendererUserMenu extends MenuBar.Renderer {\n    /**\n     * Constructor of the class RendererUserMenu.\n     *\n     * @argument user Current user object.\n     */\n    constructor(user) {\n        super();\n        this._user = user;\n    }\n    /**\n     * Render the virtual element for a menu bar item.\n     *\n     * @param data - The data to use for rendering the item.\n     *\n     * @returns A virtual element representing the item.\n     */\n    renderItem(data) {\n        const className = this.createItemClass(data);\n        const dataset = this.createItemDataset(data);\n        const aria = this.createItemARIA(data);\n        return h.li({ className, dataset, tabindex: '0', onfocus: data.onfocus, ...aria }, this._createUserIcon(), this.renderLabel(data), this.renderIcon(data));\n    }\n    /**\n     * Render the label element for a menu item.\n     *\n     * @param data - The data to use for rendering the label.\n     *\n     * @returns A virtual element representing the item label.\n     */\n    renderLabel(data) {\n        const content = this.formatLabel(data);\n        return h.div({ className: 'lm-MenuBar-itemLabel jp-MenuBar-label' }, content);\n    }\n    /**\n     * Render the user icon element for a menu item.\n     *\n     * @returns A virtual element representing the item label.\n     */\n    _createUserIcon() {\n        if (this._user.isReady && this._user.identity.avatar_url) {\n            return h.div({\n                className: 'lm-MenuBar-itemIcon jp-MenuBar-imageIcon'\n            }, h.img({ src: this._user.identity.avatar_url }));\n        }\n        else if (this._user.isReady) {\n            return h.div({\n                className: 'lm-MenuBar-itemIcon jp-MenuBar-anonymousIcon',\n                style: { backgroundColor: this._user.identity.color }\n            }, h.span({}, this._user.identity.initials));\n        }\n        else {\n            return h.div({\n                className: 'lm-MenuBar-itemIcon jp-MenuBar-anonymousIcon'\n            }, userIcon);\n        }\n    }\n}\n/**\n * This menu does not contain anything but we keep it around in case someone uses it.\n * Custom lumino Menu for the user menu.\n */\nexport class UserMenu extends Menu {\n    constructor(options) {\n        super(options);\n    }\n}\n","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { Token } from '@lumino/coreutils';\n/**\n * The user menu token.\n *\n * NOTE: Require this token in your extension to access the user menu\n * (top-right menu in JupyterLab's interface).\n */\nexport const IUserMenu = new Token('@jupyter/collaboration:IUserMenu');\n/**\n * The global awareness token.\n */\nexport const IGlobalAwareness = new Token('@jupyter/collaboration:IGlobalAwareness');\n","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { ReactWidget } from '@jupyterlab/apputils';\nimport { Panel } from '@lumino/widgets';\nimport * as React from 'react';\nimport { UserIconComponent } from './components';\nexport class UserInfoPanel extends Panel {\n    constructor(user) {\n        super({});\n        this.addClass('jp-UserInfoPanel');\n        this._profile = user;\n        this._body = null;\n        if (this._profile.isReady) {\n            this._body = new UserInfoBody(this._profile.identity);\n            this.addWidget(this._body);\n            this.update();\n        }\n        else {\n            this._profile.ready\n                .then(() => {\n                this._body = new UserInfoBody(this._profile.identity);\n                this.addWidget(this._body);\n                this.update();\n            })\n                .catch(e => console.error(e));\n        }\n    }\n}\n/**\n * A SettingsWidget for the user.\n */\nexport class UserInfoBody extends ReactWidget {\n    /**\n     * Constructs a new settings widget.\n     */\n    constructor(user) {\n        super();\n        this._user = user;\n    }\n    get user() {\n        return this._user;\n    }\n    set user(user) {\n        this._user = user;\n        this.update();\n    }\n    render() {\n        return React.createElement(UserIconComponent, { user: this._user });\n    }\n}\n"],"names":[],"sourceRoot":""}