{"version":3,"file":"lib_index_js.ed10b55257ef5b9e1e26.js","mappings":"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","sources":["webpack://@jupyter/shared-drive-extension/./src/collaboration.ts","webpack://@jupyter/shared-drive-extension/./src/index.ts"],"sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n/**\n * @packageDocumentation\n * @module shared-drive-extension\n */\n\nimport {\n  JupyterFrontEnd,\n  JupyterFrontEndPlugin\n} from '@jupyterlab/application';\nimport { IToolbarWidgetRegistry } from '@jupyterlab/apputils';\nimport {\n  EditorExtensionRegistry,\n  IEditorExtensionRegistry\n} from '@jupyterlab/codemirror';\n//import { WebrtcAwarenessProvider } from '@jupyter/docprovider';\n//import { URLExt } from '@jupyterlab/coreutils';\n//import { ServerConnection } from '@jupyterlab/services';\nimport { IStateDB, StateDB } from '@jupyterlab/statedb';\n//import { ITranslator, nullTranslator } from '@jupyterlab/translation';\n\nimport { Menu, MenuBar } from '@lumino/widgets';\n\nimport { IAwareness } from '@jupyter/ydoc';\n\nimport {\n  IGlobalAwareness,\n  IUserMenu,\n  remoteUserCursors,\n  RendererUserMenu,\n  UserMenu\n} from '@jupyter/shared-drive';\n\nimport * as Y from 'yjs';\nimport { Awareness } from 'y-protocols/awareness';\n\n/**\n * Jupyter plugin providing the IUserMenu.\n */\nexport const userMenuPlugin: JupyterFrontEndPlugin<IUserMenu> = {\n  id: '@jupyter/shared-drive-extension:userMenu',\n  description: 'Provide connected user menu.',\n  requires: [],\n  provides: IUserMenu,\n  activate: (app: JupyterFrontEnd): IUserMenu => {\n    const { commands } = app;\n    const { user } = app.serviceManager;\n    return new UserMenu({ commands, user });\n  }\n};\n\n/**\n * Jupyter plugin adding the IUserMenu to the menu bar if collaborative flag enabled.\n */\nexport const menuBarPlugin: JupyterFrontEndPlugin<void> = {\n  id: '@jupyter/shared-drive-extension:user-menu-bar',\n  description: 'Add user menu to the interface.',\n  autoStart: true,\n  requires: [IUserMenu, IToolbarWidgetRegistry],\n  activate: async (\n    app: JupyterFrontEnd,\n    menu: IUserMenu,\n    toolbarRegistry: IToolbarWidgetRegistry\n  ): Promise<void> => {\n    const { user } = app.serviceManager;\n\n    const menuBar = new MenuBar({\n      forceItemsPosition: {\n        forceX: false,\n        forceY: false\n      },\n      renderer: new RendererUserMenu(user)\n    });\n    menuBar.id = 'jp-UserMenu';\n    user.userChanged.connect(() => menuBar.update());\n    menuBar.addMenu(menu as Menu);\n\n    toolbarRegistry.addFactory('TopBar', 'user-menu', () => menuBar);\n  }\n};\n\n/**\n * Jupyter plugin creating a global awareness for RTC.\n */\nexport const rtcGlobalAwarenessPlugin: JupyterFrontEndPlugin<IAwareness> = {\n  id: '@jupyter/shared-drive-extension:rtcGlobalAwareness',\n  description: 'Add global awareness to share working document of users.',\n  requires: [IStateDB],\n  provides: IGlobalAwareness,\n  activate: (app: JupyterFrontEnd, state: StateDB): IAwareness => {\n    const { user } = app.serviceManager;\n\n    const ydoc = new Y.Doc();\n    const awareness = new Awareness(ydoc);\n    awareness.setLocalState({ username: user.identity?.name, contents: [] });\n\n    //const server = ServerConnection.makeSettings();\n    //const url = URLExt.join(server.wsUrl, 'api/collaboration/room');\n\n    //new WebrtcAwarenessProvider({\n    //  url: url,\n    //  roomID: 'JupyterLab:globalAwareness',\n    //  awareness: awareness,\n    //  user: user\n    //});\n\n    //state.changed.connect(async () => {\n    //  const data: any = await state.toJSON();\n    //  const current: string = data['layout-restorer:data']?.main?.current || '';\n\n    //  if (current.match(/^\\w+:RTC:/)) {\n    //    awareness.setLocalStateField('current', current);\n    //  } else {\n    //    awareness.setLocalStateField('current', null);\n    //  }\n    //});\n\n    return awareness;\n  }\n};\n\nexport const userEditorCursors: JupyterFrontEndPlugin<void> = {\n  id: '@jupyter/share-drive-extension:userEditorCursors',\n  description:\n    'Add CodeMirror extension to display remote user cursors and selections.',\n  autoStart: true,\n  requires: [IEditorExtensionRegistry],\n  activate: (\n    app: JupyterFrontEnd,\n    extensions: IEditorExtensionRegistry\n  ): void => {\n    extensions.addExtension({\n      name: 'remote-user-cursors',\n      factory(options) {\n        const { awareness, ysource: ytext } = options.model.sharedModel as any;\n        return EditorExtensionRegistry.createImmutableExtension(\n          remoteUserCursors({ awareness, ytext })\n        );\n      }\n    });\n  }\n};\n","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n/**\n * @packageDocumentation\n * @module shared-drive-extension\n */\n\nimport { JupyterFrontEndPlugin } from '@jupyterlab/application';\n\nimport {\n  userMenuPlugin,\n  menuBarPlugin,\n  rtcGlobalAwarenessPlugin,\n  userEditorCursors\n} from './collaboration';\n\n/**\n * Export the plugins as default.\n */\nconst plugins: JupyterFrontEndPlugin<any>[] = [\n  userMenuPlugin,\n  menuBarPlugin,\n  rtcGlobalAwarenessPlugin,\n  userEditorCursors\n];\n\nexport default plugins;\n"],"names":[],"sourceRoot":""}