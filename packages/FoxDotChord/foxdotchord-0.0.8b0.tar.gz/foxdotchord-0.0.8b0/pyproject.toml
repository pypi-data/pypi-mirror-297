[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "FoxDotChord"
description = "Chords for use in renardo or FoxDot"
version = "0.0.8b0"
authors = [{ name = "taconi", email = "igor.taconi@protonmail.com" }]
maintainers = [{ name = "taconi", email = "igor.taconi@protonmail.com" }]
license = "GPL-3.0-or-later"
readme = "README.md"
keywords = ["FoxDot", "foxdot", "chord"]
classifiers = [
  "Development Status :: 2 - Pre-Alpha",
  "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: 3.13",
  "Topic :: Software Development :: Libraries :: Application Frameworks",
  "Topic :: Utilities",
]

requires-python = ">=3.9"
dependencies = []

[project.urls]
Homepage = "https://codeberg.org/taconi/FoxDotChord"
Documentation = "https://foxdotchord.readthedocs.io"
Repository = "https://codeberg.org/taconi/FoxDotChord"
"Contributor Guide" = "https://foxdotchord.readthedocs.io/contributing"
Changelog = "https://foxdotchord.readthedocs.io/changelog/"
Issues = "https://codeberg.org/taconi/FoxDotChord/issues"

[tool.hatch.envs.news]
dependencies = ["towncrier>=24.8.0"]

[tool.hatch.envs.docs]
dependencies = [
  "mkdocs-material>=9.5.35",
  "mkdocstrings-python>=1.11.1",
  "mkdocs-static-i18n[material]>=1.2.3",
]

[tool.hatch.envs.docs.scripts]
serve = "mkdocs serve"
build = "mkdocs build"
deploy = "mkdocs gh-deploy --force -b pages"

[tool.hatch.build.targets.sdist]
packages = ["FoxDotChord/"]

[tool.hatch.build.targets.wheel]
packages = ["FoxDotChord/"]

[tool.hatch.metadata]
allow-direct-references = true

[tool.hatch.envs.hatch-test]
dependencies = [
  "pytest>=8.0.2",
  "pytest-clarity>=1.0.1",
  "pytest-cov>=4.1.0",
  "pytest-sugar>=1.0.0",
  "renardo>=0.9.12",
  # "FoxDot @ git+https://gitlab.com/iShapeNoise/foxdot",
]

[tool.hatch.envs.hatch-test.scripts]
run = ["pytest --cov=FoxDotChord/ --doctest-modules", "coverage report"]

[[tool.hatch.envs.hatch-test.matrix]]
python = ["3.8", "3.9", "3.10", "3.11", "3.12"]

[tool.pytest.ini_options]
addopts = "-vv --diff-symbols --cache-clear --cov-report html --cov-config pyproject.toml"
filterwarnings = ["ignore::DeprecationWarning"]
markers = ["major", "chromatic"]

[tool.coverage.run]
branch = true

[tool.coverage.report]
# Regexes for lines to exclude from consideration
exclude_also = [
  # Don't complain about missing debug-only code:
  "def __repr__",
  "if self\\.debug",

  # Don't complain if tests don't hit defensive assertion code:
  "raise AssertionError",
  "raise NotImplementedError",

  # Don't complain if non-runnable code isn't run:
  "if 0:",
  "if __name__ == .__main__.:",

  # Don't complain about abstract methods, they aren't run:
  "@(abc\\.)?abstractmethod",
]

ignore_errors = true

[tool.towncrier]
package = "FoxDotChord"
directory = "docs/en/changelog.d"
filename = "docs/en/changelog.md"
start_string = "<!-- towncrier release notes start -->\n"
underlines = ["", "", ""]
title_format = "## [{version}](https://codeberg.org/taconi/FoxDotChord/src/tag/{version}) - {project_date}"
issue_format = "[#{issue}](https://codeberg.org/taconi/FoxDotChord/issues/{issue})"

[[tool.towncrier.type]]
directory = "security"
name = "Security"
showcontent = true

[[tool.towncrier.type]]
directory = "removed"
name = "Removed"
showcontent = true

[[tool.towncrier.type]]
directory = "deprecated"
name = "Deprecated"
showcontent = true

[[tool.towncrier.type]]
directory = "added"
name = "Added"
showcontent = true

[[tool.towncrier.type]]
directory = "changed"
name = "Changed"
showcontent = true

[[tool.towncrier.type]]
directory = "fixed"
name = "Fixed"
showcontent = true

[[tool.towncrier.type]]
directory = "doc"
name = "Documentation"
showcontent = true
