# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _pyaqcv
else:
    import _pyaqcv

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


__cplusplus = _pyaqcv.__cplusplus
class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pyaqcv.delete_SwigPyIterator

    def value(self):
        return _pyaqcv.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _pyaqcv.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _pyaqcv.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _pyaqcv.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _pyaqcv.SwigPyIterator_equal(self, x)

    def copy(self):
        return _pyaqcv.SwigPyIterator_copy(self)

    def next(self):
        return _pyaqcv.SwigPyIterator_next(self)

    def __next__(self):
        return _pyaqcv.SwigPyIterator___next__(self)

    def previous(self):
        return _pyaqcv.SwigPyIterator_previous(self)

    def advance(self, n):
        return _pyaqcv.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _pyaqcv.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _pyaqcv.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _pyaqcv.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _pyaqcv.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _pyaqcv.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _pyaqcv.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _pyaqcv:
_pyaqcv.SwigPyIterator_swigregister(SwigPyIterator)

SHARED_PTR_DISOWN = _pyaqcv.SHARED_PTR_DISOWN
class BufferPoolController(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def get_reserved_size(self):
        return _pyaqcv.BufferPoolController_get_reserved_size(self)

    def get_max_reserved_size(self):
        return _pyaqcv.BufferPoolController_get_max_reserved_size(self)

    def set_max_reserved_size(self, size):
        return _pyaqcv.BufferPoolController_set_max_reserved_size(self, size)

    def free_all_reserved_buffers(self):
        return _pyaqcv.BufferPoolController_free_all_reserved_buffers(self)

# Register BufferPoolController in _pyaqcv:
_pyaqcv.BufferPoolController_swigregister(BufferPoolController)

kUsageDefault = _pyaqcv.kUsageDefault
class MatSize(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _pyaqcv.MatSize_swiginit(self, _pyaqcv.new_MatSize(*args))

    def dims(self):
        return _pyaqcv.MatSize_dims(self)

    def __call__(self):
        return _pyaqcv.MatSize___call__(self)

    def __eq__(self, sz):
        return _pyaqcv.MatSize___eq__(self, sz)

    def __ne__(self, sz):
        return _pyaqcv.MatSize___ne__(self, sz)
    __swig_destroy__ = _pyaqcv.delete_MatSize

# Register MatSize in _pyaqcv:
_pyaqcv.MatSize_swigregister(MatSize)

AQ_CN_MAX = _pyaqcv.AQ_CN_MAX
AQ_CN_SHIFT = _pyaqcv.AQ_CN_SHIFT
AQ_DEPTH_MAX = _pyaqcv.AQ_DEPTH_MAX
AQ_8U = _pyaqcv.AQ_8U
AQ_8S = _pyaqcv.AQ_8S
AQ_16U = _pyaqcv.AQ_16U
AQ_16S = _pyaqcv.AQ_16S
AQ_32S = _pyaqcv.AQ_32S
AQ_32F = _pyaqcv.AQ_32F
AQ_64F = _pyaqcv.AQ_64F
AQ_16F = _pyaqcv.AQ_16F
AQ_MAT_DEPTH_MASK = _pyaqcv.AQ_MAT_DEPTH_MASK
AQ_8UC1 = _pyaqcv.AQ_8UC1
AQ_8UC2 = _pyaqcv.AQ_8UC2
AQ_8UC3 = _pyaqcv.AQ_8UC3
AQ_8UC4 = _pyaqcv.AQ_8UC4
AQ_8SC1 = _pyaqcv.AQ_8SC1
AQ_8SC2 = _pyaqcv.AQ_8SC2
AQ_8SC3 = _pyaqcv.AQ_8SC3
AQ_8SC4 = _pyaqcv.AQ_8SC4
AQ_16UC1 = _pyaqcv.AQ_16UC1
AQ_16UC2 = _pyaqcv.AQ_16UC2
AQ_16UC3 = _pyaqcv.AQ_16UC3
AQ_16UC4 = _pyaqcv.AQ_16UC4
AQ_16SC1 = _pyaqcv.AQ_16SC1
AQ_16SC2 = _pyaqcv.AQ_16SC2
AQ_16SC3 = _pyaqcv.AQ_16SC3
AQ_16SC4 = _pyaqcv.AQ_16SC4
AQ_32SC1 = _pyaqcv.AQ_32SC1
AQ_32SC2 = _pyaqcv.AQ_32SC2
AQ_32SC3 = _pyaqcv.AQ_32SC3
AQ_32SC4 = _pyaqcv.AQ_32SC4
AQ_32FC1 = _pyaqcv.AQ_32FC1
AQ_32FC2 = _pyaqcv.AQ_32FC2
AQ_32FC3 = _pyaqcv.AQ_32FC3
AQ_32FC4 = _pyaqcv.AQ_32FC4
AQ_64FC1 = _pyaqcv.AQ_64FC1
AQ_64FC2 = _pyaqcv.AQ_64FC2
AQ_64FC3 = _pyaqcv.AQ_64FC3
AQ_64FC4 = _pyaqcv.AQ_64FC4
AQ_16FC1 = _pyaqcv.AQ_16FC1
AQ_16FC2 = _pyaqcv.AQ_16FC2
AQ_16FC3 = _pyaqcv.AQ_16FC3
AQ_16FC4 = _pyaqcv.AQ_16FC4
kDecompLU = _pyaqcv.kDecompLU
kDecompSVD = _pyaqcv.kDecompSVD
kDecompEIG = _pyaqcv.kDecompEIG
kDecompCholeshy = _pyaqcv.kDecompCholeshy
kDecompQR = _pyaqcv.kDecompQR
kDecompNormal = _pyaqcv.kDecompNormal
kNormInf = _pyaqcv.kNormInf
kNormL1 = _pyaqcv.kNormL1
kNormL2 = _pyaqcv.kNormL2
kNormL2Sqr = _pyaqcv.kNormL2Sqr
kNormHamming = _pyaqcv.kNormHamming
kNormHamming2 = _pyaqcv.kNormHamming2
kNormTypeMask = _pyaqcv.kNormTypeMask
kNormRelative = _pyaqcv.kNormRelative
kNormMinMax = _pyaqcv.kNormMinMax

def norm_l2_sqr(a, b, n):
    return _pyaqcv.norm_l2_sqr(a, b, n)

def norm_l1(*args):
    return _pyaqcv.norm_l1(*args)

def cube_root(*args):
    return _pyaqcv.cube_root(*args)

def fast_atan2(y, x):
    return _pyaqcv.fast_atan2(y, x)

def LU(*args):
    return _pyaqcv.LU(*args)

def Cholesky(*args):
    return _pyaqcv.Cholesky(*args)

def fast_malloc(bufSize):
    return _pyaqcv.fast_malloc(bufSize)

def fast_free(ptr):
    return _pyaqcv.fast_free(ptr)

def char_tolower(ch):
    return _pyaqcv.char_tolower(ch)

def char_toupper(ch):
    return _pyaqcv.char_toupper(ch)
class RotatedRect(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _pyaqcv.RotatedRect_swiginit(self, _pyaqcv.new_RotatedRect(*args))
    __swig_destroy__ = _pyaqcv.delete_RotatedRect

    def points(self, pts):
        return _pyaqcv.RotatedRect_points(self, pts)

    def bounding_rect(self):
        return _pyaqcv.RotatedRect_bounding_rect(self)
    center = property(_pyaqcv.RotatedRect_center_get, _pyaqcv.RotatedRect_center_set)
    size = property(_pyaqcv.RotatedRect_size_get, _pyaqcv.RotatedRect_size_set)
    angle = property(_pyaqcv.RotatedRect_angle_get, _pyaqcv.RotatedRect_angle_set)

# Register RotatedRect in _pyaqcv:
_pyaqcv.RotatedRect_swigregister(RotatedRect)

class Range(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _pyaqcv.Range_swiginit(self, _pyaqcv.new_Range(*args))

    def size(self):
        return _pyaqcv.Range_size(self)

    def empty(self):
        return _pyaqcv.Range_empty(self)

    @staticmethod
    def all():
        return _pyaqcv.Range_all()
    __swig_destroy__ = _pyaqcv.delete_Range
    start = property(_pyaqcv.Range_start_get, _pyaqcv.Range_start_set)
    end = property(_pyaqcv.Range_end_get, _pyaqcv.Range_end_set)

# Register Range in _pyaqcv:
_pyaqcv.Range_swigregister(Range)

def Range_all():
    return _pyaqcv.Range_all()

class TermCriteria(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    kCount = _pyaqcv.TermCriteria_kCount
    kMaxIter = _pyaqcv.TermCriteria_kMaxIter
    kEps = _pyaqcv.TermCriteria_kEps

    def __init__(self, *args):
        _pyaqcv.TermCriteria_swiginit(self, _pyaqcv.new_TermCriteria(*args))
    __swig_destroy__ = _pyaqcv.delete_TermCriteria

    def is_valid(self):
        return _pyaqcv.TermCriteria_is_valid(self)
    type = property(_pyaqcv.TermCriteria_type_get, _pyaqcv.TermCriteria_type_set)
    max_count = property(_pyaqcv.TermCriteria_max_count_get, _pyaqcv.TermCriteria_max_count_set)
    epsilon = property(_pyaqcv.TermCriteria_epsilon_get, _pyaqcv.TermCriteria_epsilon_set)

# Register TermCriteria in _pyaqcv:
_pyaqcv.TermCriteria_swigregister(TermCriteria)

class Moments(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _pyaqcv.Moments_swiginit(self, _pyaqcv.new_Moments(*args))
    __swig_destroy__ = _pyaqcv.delete_Moments
    m00 = property(_pyaqcv.Moments_m00_get, _pyaqcv.Moments_m00_set)
    m10 = property(_pyaqcv.Moments_m10_get, _pyaqcv.Moments_m10_set)
    m01 = property(_pyaqcv.Moments_m01_get, _pyaqcv.Moments_m01_set)
    m20 = property(_pyaqcv.Moments_m20_get, _pyaqcv.Moments_m20_set)
    m11 = property(_pyaqcv.Moments_m11_get, _pyaqcv.Moments_m11_set)
    m02 = property(_pyaqcv.Moments_m02_get, _pyaqcv.Moments_m02_set)
    m30 = property(_pyaqcv.Moments_m30_get, _pyaqcv.Moments_m30_set)
    m21 = property(_pyaqcv.Moments_m21_get, _pyaqcv.Moments_m21_set)
    m12 = property(_pyaqcv.Moments_m12_get, _pyaqcv.Moments_m12_set)
    m03 = property(_pyaqcv.Moments_m03_get, _pyaqcv.Moments_m03_set)
    mu20 = property(_pyaqcv.Moments_mu20_get, _pyaqcv.Moments_mu20_set)
    mu11 = property(_pyaqcv.Moments_mu11_get, _pyaqcv.Moments_mu11_set)
    mu02 = property(_pyaqcv.Moments_mu02_get, _pyaqcv.Moments_mu02_set)
    mu30 = property(_pyaqcv.Moments_mu30_get, _pyaqcv.Moments_mu30_set)
    mu21 = property(_pyaqcv.Moments_mu21_get, _pyaqcv.Moments_mu21_set)
    mu12 = property(_pyaqcv.Moments_mu12_get, _pyaqcv.Moments_mu12_set)
    mu03 = property(_pyaqcv.Moments_mu03_get, _pyaqcv.Moments_mu03_set)
    nu20 = property(_pyaqcv.Moments_nu20_get, _pyaqcv.Moments_nu20_set)
    nu11 = property(_pyaqcv.Moments_nu11_get, _pyaqcv.Moments_nu11_set)
    nu02 = property(_pyaqcv.Moments_nu02_get, _pyaqcv.Moments_nu02_set)
    nu30 = property(_pyaqcv.Moments_nu30_get, _pyaqcv.Moments_nu30_set)
    nu21 = property(_pyaqcv.Moments_nu21_get, _pyaqcv.Moments_nu21_set)
    nu12 = property(_pyaqcv.Moments_nu12_get, _pyaqcv.Moments_nu12_set)
    nu03 = property(_pyaqcv.Moments_nu03_get, _pyaqcv.Moments_nu03_set)

# Register Moments in _pyaqcv:
_pyaqcv.Moments_swigregister(Moments)

AQCV_PI = _pyaqcv.AQCV_PI
AQCV_2PI = _pyaqcv.AQCV_2PI
AQCV_LOG2 = _pyaqcv.AQCV_LOG2
AQCV_PI_2 = _pyaqcv.AQCV_PI_2
AQCV_PI_4 = _pyaqcv.AQCV_PI_4
class aq16suf(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    i = property(_pyaqcv.aq16suf_i_get, _pyaqcv.aq16suf_i_set)
    u = property(_pyaqcv.aq16suf_u_get, _pyaqcv.aq16suf_u_set)

    def __init__(self):
        _pyaqcv.aq16suf_swiginit(self, _pyaqcv.new_aq16suf())
    __swig_destroy__ = _pyaqcv.delete_aq16suf

# Register aq16suf in _pyaqcv:
_pyaqcv.aq16suf_swigregister(aq16suf)

class aq32suf(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    i = property(_pyaqcv.aq32suf_i_get, _pyaqcv.aq32suf_i_set)
    u = property(_pyaqcv.aq32suf_u_get, _pyaqcv.aq32suf_u_set)
    f = property(_pyaqcv.aq32suf_f_get, _pyaqcv.aq32suf_f_set)

    def __init__(self):
        _pyaqcv.aq32suf_swiginit(self, _pyaqcv.new_aq32suf())
    __swig_destroy__ = _pyaqcv.delete_aq32suf

# Register aq32suf in _pyaqcv:
_pyaqcv.aq32suf_swigregister(aq32suf)

class aq64suf(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    i = property(_pyaqcv.aq64suf_i_get, _pyaqcv.aq64suf_i_set)
    u = property(_pyaqcv.aq64suf_u_get, _pyaqcv.aq64suf_u_set)
    f = property(_pyaqcv.aq64suf_f_get, _pyaqcv.aq64suf_f_set)

    def __init__(self):
        _pyaqcv.aq64suf_swiginit(self, _pyaqcv.new_aq64suf())
    __swig_destroy__ = _pyaqcv.delete_aq64suf

# Register aq64suf in _pyaqcv:
_pyaqcv.aq64suf_swigregister(aq64suf)


def is_nan(value):
    return _pyaqcv.is_nan(value)

def is_inf(value):
    return _pyaqcv.is_inf(value)
AQ_ENABLE_UNROLLED = _pyaqcv.AQ_ENABLE_UNROLLED
AQ_CPU_NONE = _pyaqcv.AQ_CPU_NONE
AQ_CPU_MMX = _pyaqcv.AQ_CPU_MMX
AQ_CPU_SSE = _pyaqcv.AQ_CPU_SSE
AQ_CPU_SSE2 = _pyaqcv.AQ_CPU_SSE2
AQ_CPU_SSE3 = _pyaqcv.AQ_CPU_SSE3
AQ_CPU_SSSE3 = _pyaqcv.AQ_CPU_SSSE3
AQ_CPU_SSE4_1 = _pyaqcv.AQ_CPU_SSE4_1
AQ_CPU_SSE4_2 = _pyaqcv.AQ_CPU_SSE4_2
AQ_CPU_POPCNT = _pyaqcv.AQ_CPU_POPCNT
AQ_CPU_FP16 = _pyaqcv.AQ_CPU_FP16
AQ_CPU_AVX = _pyaqcv.AQ_CPU_AVX
AQ_CPU_AVX2 = _pyaqcv.AQ_CPU_AVX2
AQ_CPU_FMA3 = _pyaqcv.AQ_CPU_FMA3
AQ_CPU_AVX_512F = _pyaqcv.AQ_CPU_AVX_512F
AQ_CPU_AVX_512BW = _pyaqcv.AQ_CPU_AVX_512BW
AQ_CPU_AVX_512CD = _pyaqcv.AQ_CPU_AVX_512CD
AQ_CPU_AVX_512DQ = _pyaqcv.AQ_CPU_AVX_512DQ
AQ_CPU_AVX_512ER = _pyaqcv.AQ_CPU_AVX_512ER
AQ_CPU_AVX_512IFMA512 = _pyaqcv.AQ_CPU_AVX_512IFMA512
AQ_CPU_AVX_512IFMA = _pyaqcv.AQ_CPU_AVX_512IFMA
AQ_CPU_AVX_512PF = _pyaqcv.AQ_CPU_AVX_512PF
AQ_CPU_AVX_512VBMI = _pyaqcv.AQ_CPU_AVX_512VBMI
AQ_CPU_AVX_512VL = _pyaqcv.AQ_CPU_AVX_512VL
AQ_CPU_AVX_512VBMI2 = _pyaqcv.AQ_CPU_AVX_512VBMI2
AQ_CPU_AVX_512VNNI = _pyaqcv.AQ_CPU_AVX_512VNNI
AQ_CPU_AVX_512BITALG = _pyaqcv.AQ_CPU_AVX_512BITALG
AQ_CPU_AVX_512VPOPCNTDQ = _pyaqcv.AQ_CPU_AVX_512VPOPCNTDQ
AQ_CPU_AVX_5124VNNIW = _pyaqcv.AQ_CPU_AVX_5124VNNIW
AQ_CPU_AVX_5124FMAPS = _pyaqcv.AQ_CPU_AVX_5124FMAPS
AQ_CPU_NEON = _pyaqcv.AQ_CPU_NEON
AQ_CPU_MSA = _pyaqcv.AQ_CPU_MSA
AQ_CPU_VSX = _pyaqcv.AQ_CPU_VSX
AQ_CPU_VSX3 = _pyaqcv.AQ_CPU_VSX3
AQ_CPU_RVV = _pyaqcv.AQ_CPU_RVV
AQ_HAL_ERROR_OK = _pyaqcv.AQ_HAL_ERROR_OK
AQ_HAL_ERROR_NOT_IMPLEMENTED = _pyaqcv.AQ_HAL_ERROR_NOT_IMPLEMENTED
AQ_HAL_ERROR_UNKNOWN = _pyaqcv.AQ_HAL_ERROR_UNKNOWN
AQ_HARDWARE_MAX_FEATURE = _pyaqcv.AQ_HARDWARE_MAX_FEATURE
AQ_STRONG_ALIGNMENT = _pyaqcv.AQ_STRONG_ALIGNMENT
AQ_FP16_TYPE = _pyaqcv.AQ_FP16_TYPE
AQ_MAX_DIM = _pyaqcv.AQ_MAX_DIM
AQ_AUTOSTEP = _pyaqcv.AQ_AUTOSTEP
AQ_MALLOC_ALIGN = _pyaqcv.AQ_MALLOC_ALIGN
AQ_MAT_CN_MASK = _pyaqcv.AQ_MAT_CN_MASK
AQ_MAT_TYPE_MASK = _pyaqcv.AQ_MAT_TYPE_MASK
AQ_MAT_CONT_FLAG_SHIFT = _pyaqcv.AQ_MAT_CONT_FLAG_SHIFT
AQ_MAT_CONT_FLAG = _pyaqcv.AQ_MAT_CONT_FLAG
AQ_SUBMAT_FLAG_SHIFT = _pyaqcv.AQ_SUBMAT_FLAG_SHIFT
AQ_SUBMAT_FLAG = _pyaqcv.AQ_SUBMAT_FLAG
AQ_CXX11 = _pyaqcv.AQ_CXX11
AQ_CXX_MOVE_SEMANTICS = _pyaqcv.AQ_CXX_MOVE_SEMANTICS
AQ_CXX_STD_ARRAY = _pyaqcv.AQ_CXX_STD_ARRAY
class float16_t(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _pyaqcv.float16_t_swiginit(self, _pyaqcv.new_float16_t(*args))

    @staticmethod
    def fromBits(b):
        return _pyaqcv.float16_t_fromBits(b)

    @staticmethod
    def zero():
        return _pyaqcv.float16_t_zero()

    def bits(self):
        return _pyaqcv.float16_t_bits(self)
    __swig_destroy__ = _pyaqcv.delete_float16_t

# Register float16_t in _pyaqcv:
_pyaqcv.float16_t_swigregister(float16_t)

def float16_t_fromBits(b):
    return _pyaqcv.float16_t_fromBits(b)

def float16_t_zero():
    return _pyaqcv.float16_t_zero()

kAccessRead = _pyaqcv.kAccessRead
kAccessWrite = _pyaqcv.kAccessWrite
kAccessRW = _pyaqcv.kAccessRW
kAccessMask = _pyaqcv.kAccessMask
kAccessFast = _pyaqcv.kAccessFast
class _InputArray(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    kKindShift = _pyaqcv._InputArray_kKindShift
    kFixedType = _pyaqcv._InputArray_kFixedType
    kFixedSize = _pyaqcv._InputArray_kFixedSize
    kKindMask = _pyaqcv._InputArray_kKindMask
    kNone = _pyaqcv._InputArray_kNone
    kMat = _pyaqcv._InputArray_kMat
    kMatx = _pyaqcv._InputArray_kMatx
    kStdVector = _pyaqcv._InputArray_kStdVector
    kStdVectorVector = _pyaqcv._InputArray_kStdVectorVector
    kStdVectorMat = _pyaqcv._InputArray_kStdVectorMat
    kExpr = _pyaqcv._InputArray_kExpr
    kStdBoolVector = _pyaqcv._InputArray_kStdBoolVector
    kStdArray = _pyaqcv._InputArray_kStdArray
    kStdArrayMat = _pyaqcv._InputArray_kStdArrayMat

    def __init__(self, *args):
        _pyaqcv._InputArray_swiginit(self, _pyaqcv.new__InputArray(*args))

    def get_mat(self, idx=-1):
        return _pyaqcv._InputArray_get_mat(self, idx)

    def get_mat_(self, idx=-1):
        return _pyaqcv._InputArray_get_mat_(self, idx)

    def get_mat_vector(self, mv):
        return _pyaqcv._InputArray_get_mat_vector(self, mv)

    def get_flags(self):
        return _pyaqcv._InputArray_get_flags(self)

    def get_obj(self):
        return _pyaqcv._InputArray_get_obj(self)

    def get_size(self):
        return _pyaqcv._InputArray_get_size(self)

    def kind(self):
        return _pyaqcv._InputArray_kind(self)

    def dims(self, i=-1):
        return _pyaqcv._InputArray_dims(self, i)

    def cols(self, i=-1):
        return _pyaqcv._InputArray_cols(self, i)

    def rows(self, i=-1):
        return _pyaqcv._InputArray_rows(self, i)

    def size(self, i=-1):
        return _pyaqcv._InputArray_size(self, i)

    def sizend(self, sz, i=-1):
        return _pyaqcv._InputArray_sizend(self, sz, i)

    def same_size(self, arr):
        return _pyaqcv._InputArray_same_size(self, arr)

    def total(self, i=-1):
        return _pyaqcv._InputArray_total(self, i)

    def type(self, i=-1):
        return _pyaqcv._InputArray_type(self, i)

    def depth(self, i=-1):
        return _pyaqcv._InputArray_depth(self, i)

    def channels(self, i=-1):
        return _pyaqcv._InputArray_channels(self, i)

    def is_continuous(self, i=-1):
        return _pyaqcv._InputArray_is_continuous(self, i)

    def is_submatrix(self, i=-1):
        return _pyaqcv._InputArray_is_submatrix(self, i)

    def empty(self):
        return _pyaqcv._InputArray_empty(self)

    def copy_to(self, *args):
        return _pyaqcv._InputArray_copy_to(self, *args)

    def offset(self, i=-1):
        return _pyaqcv._InputArray_offset(self, i)

    def step(self, i=-1):
        return _pyaqcv._InputArray_step(self, i)

    def is_mat(self):
        return _pyaqcv._InputArray_is_mat(self)

    def is_mat_vector(self):
        return _pyaqcv._InputArray_is_mat_vector(self)

    def is_matx(self):
        return _pyaqcv._InputArray_is_matx(self)

    def is_vector(self):
        return _pyaqcv._InputArray_is_vector(self)
    __swig_destroy__ = _pyaqcv.delete__InputArray

# Register _InputArray in _pyaqcv:
_pyaqcv._InputArray_swigregister(_InputArray)

class _OutputArray(_InputArray):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    kDepthMask8U = _pyaqcv._OutputArray_kDepthMask8U
    kDepthMask8S = _pyaqcv._OutputArray_kDepthMask8S
    kDepthMask16U = _pyaqcv._OutputArray_kDepthMask16U
    kDepthMask16S = _pyaqcv._OutputArray_kDepthMask16S
    kDepthMask32S = _pyaqcv._OutputArray_kDepthMask32S
    kDepthMask32F = _pyaqcv._OutputArray_kDepthMask32F
    kDepthMask64F = _pyaqcv._OutputArray_kDepthMask64F
    kDepthMask16F = _pyaqcv._OutputArray_kDepthMask16F
    kDepthMaskAll = _pyaqcv._OutputArray_kDepthMaskAll
    kDepthMaskAllBut8S = _pyaqcv._OutputArray_kDepthMaskAllBut8S
    kDepthMaskAll16F = _pyaqcv._OutputArray_kDepthMaskAll16F
    kDepthMaskFlt = _pyaqcv._OutputArray_kDepthMaskFlt

    def __init__(self, *args):
        _pyaqcv._OutputArray_swiginit(self, _pyaqcv.new__OutputArray(*args))

    def fixed_size(self):
        return _pyaqcv._OutputArray_fixed_size(self)

    def fixed_type(self):
        return _pyaqcv._OutputArray_fixed_type(self)

    def needed(self):
        return _pyaqcv._OutputArray_needed(self)

    def get_mat_ref(self, i=-1):
        return _pyaqcv._OutputArray_get_mat_ref(self, i)

    def create(self, *args):
        return _pyaqcv._OutputArray_create(self, *args)

    def create_same_size(self, arr, mtype):
        return _pyaqcv._OutputArray_create_same_size(self, arr, mtype)

    def release(self):
        return _pyaqcv._OutputArray_release(self)

    def clear(self):
        return _pyaqcv._OutputArray_clear(self)

    def set_to(self, *args):
        return _pyaqcv._OutputArray_set_to(self, *args)

    def assign(self, *args):
        return _pyaqcv._OutputArray_assign(self, *args)

    def move(self, m):
        return _pyaqcv._OutputArray_move(self, m)
    __swig_destroy__ = _pyaqcv.delete__OutputArray

# Register _OutputArray in _pyaqcv:
_pyaqcv._OutputArray_swigregister(_OutputArray)

class _InputOutputArray(_OutputArray):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _pyaqcv._InputOutputArray_swiginit(self, _pyaqcv.new__InputOutputArray(*args))
    __swig_destroy__ = _pyaqcv.delete__InputOutputArray

# Register _InputOutputArray in _pyaqcv:
_pyaqcv._InputOutputArray_swigregister(_InputOutputArray)


def no_array():
    return _pyaqcv.no_array()
class MatOp(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pyaqcv.delete_MatOp

    def element_wise(self, expr):
        return _pyaqcv.MatOp_element_wise(self, expr)

    def assign(self, expr, m, type=-1):
        return _pyaqcv.MatOp_assign(self, expr, m, type)

    def roi(self, expr, row_range, col_range, res):
        return _pyaqcv.MatOp_roi(self, expr, row_range, col_range, res)

    def diag(self, expr, d, res):
        return _pyaqcv.MatOp_diag(self, expr, d, res)

    def aug_assign_add(self, expr, m):
        return _pyaqcv.MatOp_aug_assign_add(self, expr, m)

    def aug_assign_subtract(self, expr, m):
        return _pyaqcv.MatOp_aug_assign_subtract(self, expr, m)

    def aug_assign_multiply(self, expr, m):
        return _pyaqcv.MatOp_aug_assign_multiply(self, expr, m)

    def aug_assign_divide(self, expr, m):
        return _pyaqcv.MatOp_aug_assign_divide(self, expr, m)

    def aug_assign_and(self, expr, m):
        return _pyaqcv.MatOp_aug_assign_and(self, expr, m)

    def aug_assign_or(self, expr, m):
        return _pyaqcv.MatOp_aug_assign_or(self, expr, m)

    def aug_assign_xor(self, expr, m):
        return _pyaqcv.MatOp_aug_assign_xor(self, expr, m)

    def add(self, *args):
        return _pyaqcv.MatOp_add(self, *args)

    def subtract(self, *args):
        return _pyaqcv.MatOp_subtract(self, *args)

    def multiply(self, *args):
        return _pyaqcv.MatOp_multiply(self, *args)

    def divide(self, *args):
        return _pyaqcv.MatOp_divide(self, *args)

    def abs(self, expr, res):
        return _pyaqcv.MatOp_abs(self, expr, res)

    def transpose(self, expr, res):
        return _pyaqcv.MatOp_transpose(self, expr, res)

    def matmul(self, expr1, expr2, res):
        return _pyaqcv.MatOp_matmul(self, expr1, expr2, res)

    def invert(self, expr, method, res):
        return _pyaqcv.MatOp_invert(self, expr, method, res)

    def size(self, expr):
        return _pyaqcv.MatOp_size(self, expr)

    def type(self, expr):
        return _pyaqcv.MatOp_type(self, expr)

# Register MatOp in _pyaqcv:
_pyaqcv.MatOp_swigregister(MatOp)

class MatExpr(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _pyaqcv.MatExpr_swiginit(self, _pyaqcv.new_MatExpr(*args))
    __swig_destroy__ = _pyaqcv.delete_MatExpr

    def size(self):
        return _pyaqcv.MatExpr_size(self)

    def type(self):
        return _pyaqcv.MatExpr_type(self)

    def row(self, y):
        return _pyaqcv.MatExpr_row(self, y)

    def col(self, x):
        return _pyaqcv.MatExpr_col(self, x)

    def diag(self, d=0):
        return _pyaqcv.MatExpr_diag(self, d)

    def __call__(self, *args):
        return _pyaqcv.MatExpr___call__(self, *args)

    def t(self):
        return _pyaqcv.MatExpr_t(self)

    def inv(self, method=0):
        return _pyaqcv.MatExpr_inv(self, method)

    def mul(self, *args):
        return _pyaqcv.MatExpr_mul(self, *args)

    def cross(self, m):
        return _pyaqcv.MatExpr_cross(self, m)

    def dot(self, m):
        return _pyaqcv.MatExpr_dot(self, m)

    def swap(self, b):
        return _pyaqcv.MatExpr_swap(self, b)
    op = property(_pyaqcv.MatExpr_op_get, _pyaqcv.MatExpr_op_set)
    flags = property(_pyaqcv.MatExpr_flags_get, _pyaqcv.MatExpr_flags_set)
    a = property(_pyaqcv.MatExpr_a_get, _pyaqcv.MatExpr_a_set)
    b = property(_pyaqcv.MatExpr_b_get, _pyaqcv.MatExpr_b_set)
    c = property(_pyaqcv.MatExpr_c_get, _pyaqcv.MatExpr_c_set)
    alpha = property(_pyaqcv.MatExpr_alpha_get, _pyaqcv.MatExpr_alpha_set)
    beta = property(_pyaqcv.MatExpr_beta_get, _pyaqcv.MatExpr_beta_set)
    s = property(_pyaqcv.MatExpr_s_get, _pyaqcv.MatExpr_s_set)

# Register MatExpr in _pyaqcv:
_pyaqcv.MatExpr_swigregister(MatExpr)


def __mul__(*args):
    return _pyaqcv.__mul__(*args)

def __truediv__(*args):
    return _pyaqcv.__truediv__(*args)

def __and__(*args):
    return _pyaqcv.__and__(*args)

def __or__(*args):
    return _pyaqcv.__or__(*args)

def __xor__(*args):
    return _pyaqcv.__xor__(*args)

def __invert__(*args):
    return _pyaqcv.__invert__(*args)

def abs(*args):
    return _pyaqcv.abs(*args)
class MatDataAutoLock(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _pyaqcv.MatDataAutoLock_swiginit(self, _pyaqcv.new_MatDataAutoLock(*args))
    __swig_destroy__ = _pyaqcv.delete_MatDataAutoLock
    u1 = property(_pyaqcv.MatDataAutoLock_u1_get, _pyaqcv.MatDataAutoLock_u1_set)
    u2 = property(_pyaqcv.MatDataAutoLock_u2_get, _pyaqcv.MatDataAutoLock_u2_set)

# Register MatDataAutoLock in _pyaqcv:
_pyaqcv.MatDataAutoLock_swigregister(MatDataAutoLock)

class MatStep(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _pyaqcv.MatStep_swiginit(self, _pyaqcv.new_MatStep(*args))
    buf = property(_pyaqcv.MatStep_buf_get, _pyaqcv.MatStep_buf_set)
    __swig_destroy__ = _pyaqcv.delete_MatStep

# Register MatStep in _pyaqcv:
_pyaqcv.MatStep_swigregister(MatStep)

DepthTypes_kDepth_Original = _pyaqcv.DepthTypes_kDepth_Original
DepthTypes_kDepth_U8 = _pyaqcv.DepthTypes_kDepth_U8
DepthTypes_kDepth_S8 = _pyaqcv.DepthTypes_kDepth_S8
DepthTypes_kDepth_U16 = _pyaqcv.DepthTypes_kDepth_U16
DepthTypes_kDepth_S16 = _pyaqcv.DepthTypes_kDepth_S16
DepthTypes_kDepth_S32 = _pyaqcv.DepthTypes_kDepth_S32
DepthTypes_kDepth_F32 = _pyaqcv.DepthTypes_kDepth_F32
DepthTypes_kDepth_F64 = _pyaqcv.DepthTypes_kDepth_F64
class Mat(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _pyaqcv.delete_Mat

    def row(self, y):
        return _pyaqcv.Mat_row(self, y)

    def col(self, x):
        return _pyaqcv.Mat_col(self, x)

    def row_range(self, *args):
        return _pyaqcv.Mat_row_range(self, *args)

    def col_range(self, *args):
        return _pyaqcv.Mat_col_range(self, *args)

    @staticmethod
    def diag(*args):
        return _pyaqcv.Mat_diag(*args)

    def clone(self):
        return _pyaqcv.Mat_clone(self)

    def copy_to(self, *args):
        return _pyaqcv.Mat_copy_to(self, *args)

    def convert_to(self, m, rtype, alpha=1, beta=0):
        return _pyaqcv.Mat_convert_to(self, m, rtype, alpha, beta)

    def assign_to(self, m, type=-1):
        return _pyaqcv.Mat_assign_to(self, m, type)

    def set_to(self, *args):
        return _pyaqcv.Mat_set_to(self, *args)

    def reshape(self, *args):
        return _pyaqcv.Mat_reshape(self, *args)

    def t(self):
        return _pyaqcv.Mat_t(self)

    def inv(self, *args):
        return _pyaqcv.Mat_inv(self, *args)

    def mul(self, m, scale=1):
        return _pyaqcv.Mat_mul(self, m, scale)

    def cross(self, m):
        return _pyaqcv.Mat_cross(self, m)

    def dot(self, m):
        return _pyaqcv.Mat_dot(self, m)

    @staticmethod
    def zeros(*args):
        return _pyaqcv.Mat_zeros(*args)

    @staticmethod
    def ones(*args):
        return _pyaqcv.Mat_ones(*args)

    @staticmethod
    def eye(*args):
        return _pyaqcv.Mat_eye(*args)

    def create(self, *args):
        return _pyaqcv.Mat_create(self, *args)

    def addref(self):
        return _pyaqcv.Mat_addref(self)

    def release(self):
        return _pyaqcv.Mat_release(self)

    def deallocate(self):
        return _pyaqcv.Mat_deallocate(self)

    def copy_size(self, m):
        return _pyaqcv.Mat_copy_size(self, m)

    def reserve(self, sz):
        return _pyaqcv.Mat_reserve(self, sz)

    def reserve_buffer(self, sz):
        return _pyaqcv.Mat_reserve_buffer(self, sz)

    def resize(self, *args):
        return _pyaqcv.Mat_resize(self, *args)

    def push_back_(self, elem):
        return _pyaqcv.Mat_push_back_(self, elem)

    def push_back(self, m):
        return _pyaqcv.Mat_push_back(self, m)

    def pop_back(self, nelems=1):
        return _pyaqcv.Mat_pop_back(self, nelems)

    def locate_roi(self, whole_size, ofs):
        return _pyaqcv.Mat_locate_roi(self, whole_size, ofs)

    def adjust_roi(self, dtop, dbottom, dleft, dright):
        return _pyaqcv.Mat_adjust_roi(self, dtop, dbottom, dleft, dright)

    def __call__(self, *args):
        return _pyaqcv.Mat___call__(self, *args)

    def is_continuous(self):
        return _pyaqcv.Mat_is_continuous(self)

    def is_submatrix(self):
        return _pyaqcv.Mat_is_submatrix(self)

    def elem_size(self):
        return _pyaqcv.Mat_elem_size(self)

    def elem_size1(self):
        return _pyaqcv.Mat_elem_size1(self)

    def type(self):
        return _pyaqcv.Mat_type(self)

    def depth(self):
        return _pyaqcv.Mat_depth(self)

    def depth_type(self):
        return _pyaqcv.Mat_depth_type(self)

    def channels(self):
        return _pyaqcv.Mat_channels(self)

    def step1(self, i=0):
        return _pyaqcv.Mat_step1(self, i)

    def empty(self):
        return _pyaqcv.Mat_empty(self)

    def total(self, *args):
        return _pyaqcv.Mat_total(self, *args)

    def check_vector(self, elem_channels, depth=-1, require_continuous=True):
        return _pyaqcv.Mat_check_vector(self, elem_channels, depth, require_continuous)

    def width(self):
        return _pyaqcv.Mat_width(self)

    def height(self):
        return _pyaqcv.Mat_height(self)

    def elem_size_1(self):
        return _pyaqcv.Mat_elem_size_1(self)

    def roi(self, x, y, width, height):
        return _pyaqcv.Mat_roi(self, x, y, width, height)

    def data_byte_size(self):
        return _pyaqcv.Mat_data_byte_size(self)

    def ptr(self, *args):
        return _pyaqcv.Mat_ptr(self, *args)

    def from_chars(self, buffer, height, width, depth, channel, copy=True):
        return _pyaqcv.Mat_from_chars(self, buffer, height, width, depth, channel, copy)

    def to_chars(self, buffer, buf_size):
        return _pyaqcv.Mat_to_chars(self, buffer, buf_size)

    def __init__(self, *args):
        _pyaqcv.Mat_swiginit(self, _pyaqcv.new_Mat(*args))
    kMagicVal = _pyaqcv.Mat_kMagicVal
    kAutoStep = _pyaqcv.Mat_kAutoStep
    kContinuousFlag = _pyaqcv.Mat_kContinuousFlag
    kSubMatrixFlag = _pyaqcv.Mat_kSubMatrixFlag
    kMagicMask = _pyaqcv.Mat_kMagicMask
    kTypeMask = _pyaqcv.Mat_kTypeMask
    kDepthMask = _pyaqcv.Mat_kDepthMask
    flags = property(_pyaqcv.Mat_flags_get, _pyaqcv.Mat_flags_set)
    dims = property(_pyaqcv.Mat_dims_get, _pyaqcv.Mat_dims_set)
    rows = property(_pyaqcv.Mat_rows_get, _pyaqcv.Mat_rows_set)
    cols = property(_pyaqcv.Mat_cols_get, _pyaqcv.Mat_cols_set)
    data = property(_pyaqcv.Mat_data_get, _pyaqcv.Mat_data_set)
    datastart = property(_pyaqcv.Mat_datastart_get, _pyaqcv.Mat_datastart_set)
    dataend = property(_pyaqcv.Mat_dataend_get, _pyaqcv.Mat_dataend_set)
    datalimit = property(_pyaqcv.Mat_datalimit_get, _pyaqcv.Mat_datalimit_set)
    allocator = property(_pyaqcv.Mat_allocator_get, _pyaqcv.Mat_allocator_set)

    @staticmethod
    def get_std_allocator():
        return _pyaqcv.Mat_get_std_allocator()

    @staticmethod
    def get_default_allocator():
        return _pyaqcv.Mat_get_default_allocator()

    @staticmethod
    def set_default_allocator(allocator):
        return _pyaqcv.Mat_set_default_allocator(allocator)

    def update_continuity_flag(self):
        return _pyaqcv.Mat_update_continuity_flag(self)
    u = property(_pyaqcv.Mat_u_get, _pyaqcv.Mat_u_set)
    size = property(_pyaqcv.Mat_size_get, _pyaqcv.Mat_size_set)
    step = property(_pyaqcv.Mat_step_get)

    def at_vec1c(self, *args):
        return _pyaqcv.Mat_at_vec1c(self, *args)

    def at_vec2c(self, *args):
        return _pyaqcv.Mat_at_vec2c(self, *args)

    def at_vec3c(self, *args):
        return _pyaqcv.Mat_at_vec3c(self, *args)

    def at_vec4c(self, *args):
        return _pyaqcv.Mat_at_vec4c(self, *args)

    def at_vec1b(self, *args):
        return _pyaqcv.Mat_at_vec1b(self, *args)

    def at_vec2b(self, *args):
        return _pyaqcv.Mat_at_vec2b(self, *args)

    def at_vec3b(self, *args):
        return _pyaqcv.Mat_at_vec3b(self, *args)

    def at_vec4b(self, *args):
        return _pyaqcv.Mat_at_vec4b(self, *args)

    def at_vec1s(self, *args):
        return _pyaqcv.Mat_at_vec1s(self, *args)

    def at_vec2s(self, *args):
        return _pyaqcv.Mat_at_vec2s(self, *args)

    def at_vec3s(self, *args):
        return _pyaqcv.Mat_at_vec3s(self, *args)

    def at_vec4s(self, *args):
        return _pyaqcv.Mat_at_vec4s(self, *args)

    def at_vec1w(self, *args):
        return _pyaqcv.Mat_at_vec1w(self, *args)

    def at_vec2w(self, *args):
        return _pyaqcv.Mat_at_vec2w(self, *args)

    def at_vec3w(self, *args):
        return _pyaqcv.Mat_at_vec3w(self, *args)

    def at_vec4w(self, *args):
        return _pyaqcv.Mat_at_vec4w(self, *args)

    def at_vec1i(self, *args):
        return _pyaqcv.Mat_at_vec1i(self, *args)

    def at_vec2i(self, *args):
        return _pyaqcv.Mat_at_vec2i(self, *args)

    def at_vec3i(self, *args):
        return _pyaqcv.Mat_at_vec3i(self, *args)

    def at_vec4i(self, *args):
        return _pyaqcv.Mat_at_vec4i(self, *args)

    def at_vec1f(self, *args):
        return _pyaqcv.Mat_at_vec1f(self, *args)

    def at_vec2f(self, *args):
        return _pyaqcv.Mat_at_vec2f(self, *args)

    def at_vec3f(self, *args):
        return _pyaqcv.Mat_at_vec3f(self, *args)

    def at_vec4f(self, *args):
        return _pyaqcv.Mat_at_vec4f(self, *args)

    def at_vec1d(self, *args):
        return _pyaqcv.Mat_at_vec1d(self, *args)

    def at_vec2d(self, *args):
        return _pyaqcv.Mat_at_vec2d(self, *args)

    def at_vec3d(self, *args):
        return _pyaqcv.Mat_at_vec3d(self, *args)

    def at_vec4d(self, *args):
        return _pyaqcv.Mat_at_vec4d(self, *args)

# Register Mat in _pyaqcv:
_pyaqcv.Mat_swigregister(Mat)

def Mat_diag(*args):
    return _pyaqcv.Mat_diag(*args)

def Mat_zeros(*args):
    return _pyaqcv.Mat_zeros(*args)

def Mat_ones(*args):
    return _pyaqcv.Mat_ones(*args)

def Mat_eye(*args):
    return _pyaqcv.Mat_eye(*args)

def Mat_get_std_allocator():
    return _pyaqcv.Mat_get_std_allocator()

def Mat_get_default_allocator():
    return _pyaqcv.Mat_get_default_allocator()

def Mat_set_default_allocator(allocator):
    return _pyaqcv.Mat_set_default_allocator(allocator)


def __lshift__(os, mat):
    return _pyaqcv.__lshift__(os, mat)

def geometry_matrix3f_to_mat(matrix3f, res_mat, keep_last_row=True):
    return _pyaqcv.geometry_matrix3f_to_mat(matrix3f, res_mat, keep_last_row)

def mat_to_geometry_matrix3f(mat, matrix3f):
    return _pyaqcv.mat_to_geometry_matrix3f(mat, matrix3f)
class Matx_AddOp(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _pyaqcv.Matx_AddOp_swiginit(self, _pyaqcv.new_Matx_AddOp(*args))
    __swig_destroy__ = _pyaqcv.delete_Matx_AddOp

# Register Matx_AddOp in _pyaqcv:
_pyaqcv.Matx_AddOp_swigregister(Matx_AddOp)

class Matx_SubOp(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _pyaqcv.Matx_SubOp_swiginit(self, _pyaqcv.new_Matx_SubOp(*args))
    __swig_destroy__ = _pyaqcv.delete_Matx_SubOp

# Register Matx_SubOp in _pyaqcv:
_pyaqcv.Matx_SubOp_swigregister(Matx_SubOp)

class Matx_ScaleOp(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _pyaqcv.Matx_ScaleOp_swiginit(self, _pyaqcv.new_Matx_ScaleOp(*args))
    __swig_destroy__ = _pyaqcv.delete_Matx_ScaleOp

# Register Matx_ScaleOp in _pyaqcv:
_pyaqcv.Matx_ScaleOp_swigregister(Matx_ScaleOp)

class Matx_MulOp(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _pyaqcv.Matx_MulOp_swiginit(self, _pyaqcv.new_Matx_MulOp(*args))
    __swig_destroy__ = _pyaqcv.delete_Matx_MulOp

# Register Matx_MulOp in _pyaqcv:
_pyaqcv.Matx_MulOp_swigregister(Matx_MulOp)

class Matx_DivOp(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _pyaqcv.Matx_DivOp_swiginit(self, _pyaqcv.new_Matx_DivOp(*args))
    __swig_destroy__ = _pyaqcv.delete_Matx_DivOp

# Register Matx_DivOp in _pyaqcv:
_pyaqcv.Matx_DivOp_swigregister(Matx_DivOp)

class Matx_MatMulOp(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _pyaqcv.Matx_MatMulOp_swiginit(self, _pyaqcv.new_Matx_MatMulOp(*args))
    __swig_destroy__ = _pyaqcv.delete_Matx_MatMulOp

# Register Matx_MatMulOp in _pyaqcv:
_pyaqcv.Matx_MatMulOp_swigregister(Matx_MatMulOp)

class Matx_TOp(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _pyaqcv.Matx_TOp_swiginit(self, _pyaqcv.new_Matx_TOp(*args))
    __swig_destroy__ = _pyaqcv.delete_Matx_TOp

# Register Matx_TOp in _pyaqcv:
_pyaqcv.Matx_TOp_swigregister(Matx_TOp)

class MatConstIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _pyaqcv.MatConstIterator_swiginit(self, _pyaqcv.new_MatConstIterator(*args))

    def __ref__(self):
        return _pyaqcv.MatConstIterator___ref__(self)

    def __iadd__(self, ofs):
        return _pyaqcv.MatConstIterator___iadd__(self, ofs)

    def __isub__(self, ofs):
        return _pyaqcv.MatConstIterator___isub__(self, ofs)

    def pos(self, *args):
        return _pyaqcv.MatConstIterator_pos(self, *args)

    def lpos(self):
        return _pyaqcv.MatConstIterator_lpos(self)

    def seek(self, *args):
        return _pyaqcv.MatConstIterator_seek(self, *args)
    __swig_destroy__ = _pyaqcv.delete_MatConstIterator
    m = property(_pyaqcv.MatConstIterator_m_get, _pyaqcv.MatConstIterator_m_set)
    elem_size = property(_pyaqcv.MatConstIterator_elem_size_get, _pyaqcv.MatConstIterator_elem_size_set)
    ptr = property(_pyaqcv.MatConstIterator_ptr_get, _pyaqcv.MatConstIterator_ptr_set)
    slice_start = property(_pyaqcv.MatConstIterator_slice_start_get, _pyaqcv.MatConstIterator_slice_start_set)
    slice_end = property(_pyaqcv.MatConstIterator_slice_end_get, _pyaqcv.MatConstIterator_slice_end_set)

# Register MatConstIterator in _pyaqcv:
_pyaqcv.MatConstIterator_swigregister(MatConstIterator)

class NAryMatIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _pyaqcv.NAryMatIterator_swiginit(self, _pyaqcv.new_NAryMatIterator(*args))

    def init(self, arrays, planes, ptrs, narrays=-1):
        return _pyaqcv.NAryMatIterator_init(self, arrays, planes, ptrs, narrays)
    __swig_destroy__ = _pyaqcv.delete_NAryMatIterator
    arrays = property(_pyaqcv.NAryMatIterator_arrays_get, _pyaqcv.NAryMatIterator_arrays_set)
    planes = property(_pyaqcv.NAryMatIterator_planes_get, _pyaqcv.NAryMatIterator_planes_set)
    ptrs = property(_pyaqcv.NAryMatIterator_ptrs_get, _pyaqcv.NAryMatIterator_ptrs_set)
    narrays = property(_pyaqcv.NAryMatIterator_narrays_get, _pyaqcv.NAryMatIterator_narrays_set)
    nplanes = property(_pyaqcv.NAryMatIterator_nplanes_get, _pyaqcv.NAryMatIterator_nplanes_set)
    size = property(_pyaqcv.NAryMatIterator_size_get, _pyaqcv.NAryMatIterator_size_set)

# Register NAryMatIterator in _pyaqcv:
_pyaqcv.NAryMatIterator_swigregister(NAryMatIterator)


def __eq__(*args):
    return _pyaqcv.__eq__(*args)

def __ne__(*args):
    return _pyaqcv.__ne__(*args)

def __lt__(*args):
    return _pyaqcv.__lt__(*args)

def __gt__(*args):
    return _pyaqcv.__gt__(*args)

def __le__(*args):
    return _pyaqcv.__le__(*args)

def __ge__(*args):
    return _pyaqcv.__ge__(*args)

def __add__(*args):
    return _pyaqcv.__add__(*args)

def __sub__(*args):
    return _pyaqcv.__sub__(*args)

def swap(*args):
    return _pyaqcv.swap(*args)
kBorderConstant = _pyaqcv.kBorderConstant
kBorderReplicate = _pyaqcv.kBorderReplicate
kBorderReflect = _pyaqcv.kBorderReflect
kBorderWrap = _pyaqcv.kBorderWrap
kBorderReflect101 = _pyaqcv.kBorderReflect101
kBorderTransparent = _pyaqcv.kBorderTransparent
kBorderReflect_101 = _pyaqcv.kBorderReflect_101
kBorderDefault = _pyaqcv.kBorderDefault
kBorderIsolated = _pyaqcv.kBorderIsolated

def border_interpolate(p, len, type):
    return _pyaqcv.border_interpolate(p, len, type)

def copy_make_border(*args):
    return _pyaqcv.copy_make_border(*args)

def add(*args):
    return _pyaqcv.add(*args)

def subtract(*args):
    return _pyaqcv.subtract(*args)

def multiply(src1, src2, dst, scale=1, dtype=-1):
    return _pyaqcv.multiply(src1, src2, dst, scale, dtype)

def divide(*args):
    return _pyaqcv.divide(*args)

def add_weighted(src1, alpha, src2, beta, gamma, dst, dtype=-1):
    return _pyaqcv.add_weighted(src1, alpha, src2, beta, gamma, dst, dtype)

def scale_add(src1, alpha, src2, dst):
    return _pyaqcv.scale_add(src1, alpha, src2, dst)

def convert_scale_abs(src, dst, alpha=1, beta=0):
    return _pyaqcv.convert_scale_abs(src, dst, alpha, beta)

def lut(src, lut, dst):
    return _pyaqcv.lut(src, lut, dst)

def count_non_zero(src):
    return _pyaqcv.count_non_zero(src)

def find_non_zero(src, idx):
    return _pyaqcv.find_non_zero(src, idx)

def sum(*args):
    return _pyaqcv.sum(*args)

def mean(*args):
    return _pyaqcv.mean(*args)

def mean_std_dev(*args):
    return _pyaqcv.mean_std_dev(*args)

def norm(*args):
    return _pyaqcv.norm(*args)

def normalize(*args):
    return _pyaqcv.normalize(*args)

def psnr(src1, src2, R=255.):
    return _pyaqcv.psnr(src1, src2, R)

def batch_distance(*args):
    return _pyaqcv.batch_distance(*args)

def min_max_loc(*args):
    return _pyaqcv.min_max_loc(*args)

def min_max_idx(*args):
    return _pyaqcv.min_max_idx(*args)
kReduceSum = _pyaqcv.kReduceSum
kReduceAvg = _pyaqcv.kReduceAvg
kReduceMax = _pyaqcv.kReduceMax
kReduceMin = _pyaqcv.kReduceMin

def reduce(src, dst, dim, rtype, dtype=-1):
    return _pyaqcv.reduce(src, dst, dim, rtype, dtype)

def merge(mv, dst):
    return _pyaqcv.merge(mv, dst)

def split(src, mv):
    return _pyaqcv.split(src, mv)

def mix_channels(*args):
    return _pyaqcv.mix_channels(*args)

def extract_channel(src, dst, coi):
    return _pyaqcv.extract_channel(src, dst, coi)

def insert_channel(src, dst, coi):
    return _pyaqcv.insert_channel(src, dst, coi)
kVertical = _pyaqcv.kVertical
kHorizontal = _pyaqcv.kHorizontal
kBoth = _pyaqcv.kBoth
kFlip45 = _pyaqcv.kFlip45
kFlip135 = _pyaqcv.kFlip135

def flip(src, dst, flip_code):
    return _pyaqcv.flip(src, dst, flip_code)

def repeat(*args):
    return _pyaqcv.repeat(*args)

def hconcat(*args):
    return _pyaqcv.hconcat(*args)

def vconcat(*args):
    return _pyaqcv.vconcat(*args)

def bitwise_and(*args):
    return _pyaqcv.bitwise_and(*args)

def bitwise_or(*args):
    return _pyaqcv.bitwise_or(*args)

def bitwise_xor(*args):
    return _pyaqcv.bitwise_xor(*args)

def bitwise_not(*args):
    return _pyaqcv.bitwise_not(*args)

def absdiff(src1, src2, dst):
    return _pyaqcv.absdiff(src1, src2, dst)

def copy_to(*args):
    return _pyaqcv.copy_to(*args)

def in_range(src, lowerb, upperb, dst):
    return _pyaqcv.in_range(src, lowerb, upperb, dst)
kCmpEQ = _pyaqcv.kCmpEQ
kCmpGT = _pyaqcv.kCmpGT
kCmpGE = _pyaqcv.kCmpGE
kCmpLT = _pyaqcv.kCmpLT
kCmpLE = _pyaqcv.kCmpLE
kCmpNE = _pyaqcv.kCmpNE

def compare(src1, src2, dst, cmp_type):
    return _pyaqcv.compare(src1, src2, dst, cmp_type)

def min(*args):
    return _pyaqcv.min(*args)

def max(*args):
    return _pyaqcv.max(*args)

def sqrt(*args):
    return _pyaqcv.sqrt(*args)

def pow(*args):
    return _pyaqcv.pow(*args)

def exp(*args):
    return _pyaqcv.exp(*args)

def log(*args):
    return _pyaqcv.log(*args)

def polar_to_cart(magnitude, angle, x, y, angle_in_degrees=False):
    return _pyaqcv.polar_to_cart(magnitude, angle, x, y, angle_in_degrees)

def cart_to_polar(x, y, magnitude, angle, angle_in_degrees=False):
    return _pyaqcv.cart_to_polar(x, y, magnitude, angle, angle_in_degrees)

def phase(x, y, angle, angle_in_degrees=False):
    return _pyaqcv.phase(x, y, angle, angle_in_degrees)

def magnitude(x, y, magnitude):
    return _pyaqcv.magnitude(x, y, magnitude)

def check_range(*args):
    return _pyaqcv.check_range(*args)

def patch_nans(a, val=0):
    return _pyaqcv.patch_nans(a, val)
kGemmDefault = _pyaqcv.kGemmDefault
kGemm1T = _pyaqcv.kGemm1T
kGemm2T = _pyaqcv.kGemm2T
kGemm3T = _pyaqcv.kGemm3T

def gemm(*args):
    return _pyaqcv.gemm(*args)

def mul_transposed(*args):
    return _pyaqcv.mul_transposed(*args)

def transpose(src, dst):
    return _pyaqcv.transpose(src, dst)

def transform(src, dst, m):
    return _pyaqcv.transform(src, dst, m)

def perspective_transform(src, dst, m):
    return _pyaqcv.perspective_transform(src, dst, m)

def complete_symm(m, lower_to_upper=False):
    return _pyaqcv.complete_symm(m, lower_to_upper)

def set_identity(*args):
    return _pyaqcv.set_identity(*args)

def determinant(mtx):
    return _pyaqcv.determinant(mtx)

def trace(m):
    return _pyaqcv.trace(m)

def invert(*args):
    return _pyaqcv.invert(*args)

def solve(*args):
    return _pyaqcv.solve(*args)
kSortEveryRow = _pyaqcv.kSortEveryRow
kSortEveryColumn = _pyaqcv.kSortEveryColumn
kSortAscending = _pyaqcv.kSortAscending
kSortDescending = _pyaqcv.kSortDescending

def sort(src, dst, flags):
    return _pyaqcv.sort(src, dst, flags)

def sort_idx(src, dst, flags):
    return _pyaqcv.sort_idx(src, dst, flags)

def solve_cubic(coeffs, roots):
    return _pyaqcv.solve_cubic(coeffs, roots)

def solve_poly(coeffs, roots, max_iters=300):
    return _pyaqcv.solve_poly(coeffs, roots, max_iters)

def eigen(*args):
    return _pyaqcv.eigen(*args)

def eigen_non_symmetric(src, eigenvalues, eigenvectors):
    return _pyaqcv.eigen_non_symmetric(src, eigenvalues, eigenvectors)
kCovarScrambled = _pyaqcv.kCovarScrambled
kCovarNormal = _pyaqcv.kCovarNormal
kCovarUseAvg = _pyaqcv.kCovarUseAvg
kCovarScale = _pyaqcv.kCovarScale
kCovarRows = _pyaqcv.kCovarRows
kCovarCols = _pyaqcv.kCovarCols

def calc_covar_matrix(samples, covar, mean, flags, ctype=6):
    return _pyaqcv.calc_covar_matrix(samples, covar, mean, flags, ctype)

def mahalanobis(v1, v2, icovar):
    return _pyaqcv.mahalanobis(v1, v2, icovar)
kDftDefault = _pyaqcv.kDftDefault
kDftInverse = _pyaqcv.kDftInverse
kDftScale = _pyaqcv.kDftScale
kDftRows = _pyaqcv.kDftRows
kDftComplexOutput = _pyaqcv.kDftComplexOutput
kDftRealOutput = _pyaqcv.kDftRealOutput
kDftComplexInput = _pyaqcv.kDftComplexInput
kDctInverse = _pyaqcv.kDctInverse
kDctRows = _pyaqcv.kDctRows

def dft(*args):
    return _pyaqcv.dft(*args)

def idft(*args):
    return _pyaqcv.idft(*args)

def dct(*args):
    return _pyaqcv.dct(*args)

def idct(*args):
    return _pyaqcv.idct(*args)

def mul_spectrums(a, b, c, flags, conj_b=False):
    return _pyaqcv.mul_spectrums(a, b, c, flags, conj_b)

def get_optimal_dft_size(vecsize):
    return _pyaqcv.get_optimal_dft_size(vecsize)
class PCA(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    kDataAsRow = _pyaqcv.PCA_kDataAsRow
    kDataAsCol = _pyaqcv.PCA_kDataAsCol
    kUseAge = _pyaqcv.PCA_kUseAge

    def __init__(self, *args):
        _pyaqcv.PCA_swiginit(self, _pyaqcv.new_PCA(*args))

    def __call__(self, *args):
        return _pyaqcv.PCA___call__(self, *args)

    def project(self, *args):
        return _pyaqcv.PCA_project(self, *args)

    def back_project(self, *args):
        return _pyaqcv.PCA_back_project(self, *args)
    __swig_destroy__ = _pyaqcv.delete_PCA
    eigenvectors = property(_pyaqcv.PCA_eigenvectors_get, _pyaqcv.PCA_eigenvectors_set)
    eigenvalues = property(_pyaqcv.PCA_eigenvalues_get, _pyaqcv.PCA_eigenvalues_set)
    mean = property(_pyaqcv.PCA_mean_get, _pyaqcv.PCA_mean_set)

# Register PCA in _pyaqcv:
_pyaqcv.PCA_swigregister(PCA)


def pca_compute(*args):
    return _pyaqcv.pca_compute(*args)

def pca_project(data, mean, eigenvectors, result):
    return _pyaqcv.pca_project(data, mean, eigenvectors, result)

def pca_back_project(data, mean, eigenvectors, result):
    return _pyaqcv.pca_back_project(data, mean, eigenvectors, result)
class LDA(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _pyaqcv.LDA_swiginit(self, _pyaqcv.new_LDA(*args))
    __swig_destroy__ = _pyaqcv.delete_LDA

    def compute(self, *args):
        return _pyaqcv.LDA_compute(self, *args)

    def project(self, *args):
        return _pyaqcv.LDA_project(self, *args)

    def reconstruct(self, *args):
        return _pyaqcv.LDA_reconstruct(self, *args)

    def eigenvectors(self):
        return _pyaqcv.LDA_eigenvectors(self)

    def eigenvalues(self):
        return _pyaqcv.LDA_eigenvalues(self)

    @staticmethod
    def subspace_project(*args):
        return _pyaqcv.LDA_subspace_project(*args)

    @staticmethod
    def subspace_reconstruct(*args):
        return _pyaqcv.LDA_subspace_reconstruct(*args)

# Register LDA in _pyaqcv:
_pyaqcv.LDA_swigregister(LDA)

def LDA_subspace_project(*args):
    return _pyaqcv.LDA_subspace_project(*args)

def LDA_subspace_reconstruct(*args):
    return _pyaqcv.LDA_subspace_reconstruct(*args)

class SVD(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    kDefault = _pyaqcv.SVD_kDefault
    kModifyA = _pyaqcv.SVD_kModifyA
    kNoUV = _pyaqcv.SVD_kNoUV
    kFullUV = _pyaqcv.SVD_kFullUV

    def __init__(self, *args):
        _pyaqcv.SVD_swiginit(self, _pyaqcv.new_SVD(*args))

    def __call__(self, *args):
        return _pyaqcv.SVD___call__(self, *args)

    @staticmethod
    def compute(*args):
        return _pyaqcv.SVD_compute(*args)

    @staticmethod
    def solve_z(src, dst):
        return _pyaqcv.SVD_solve_z(src, dst)

    def back_subst(self, *args):
        return _pyaqcv.SVD_back_subst(self, *args)
    __swig_destroy__ = _pyaqcv.delete_SVD
    u = property(_pyaqcv.SVD_u_get, _pyaqcv.SVD_u_set)
    w = property(_pyaqcv.SVD_w_get, _pyaqcv.SVD_w_set)
    vt = property(_pyaqcv.SVD_vt_get, _pyaqcv.SVD_vt_set)

# Register SVD in _pyaqcv:
_pyaqcv.SVD_swigregister(SVD)

def SVD_compute(*args):
    return _pyaqcv.SVD_compute(*args)

def SVD_solve_z(src, dst):
    return _pyaqcv.SVD_solve_z(src, dst)


def svd_decomp(*args):
    return _pyaqcv.svd_decomp(*args)

def svd_back_subst(w, u, vt, rhs, dst):
    return _pyaqcv.svd_back_subst(w, u, vt, rhs, dst)
class RNG(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    kUniform = _pyaqcv.RNG_kUniform
    kNormal = _pyaqcv.RNG_kNormal

    def __init__(self, *args):
        _pyaqcv.RNG_swiginit(self, _pyaqcv.new_RNG(*args))

    def next(self):
        return _pyaqcv.RNG_next(self)

    def __call__(self, *args):
        return _pyaqcv.RNG___call__(self, *args)

    def uniform(self, *args):
        return _pyaqcv.RNG_uniform(self, *args)

    def fill(self, *args):
        return _pyaqcv.RNG_fill(self, *args)

    def gaussian(self, sigma):
        return _pyaqcv.RNG_gaussian(self, sigma)
    state = property(_pyaqcv.RNG_state_get, _pyaqcv.RNG_state_set)

    def __eq__(self, other):
        return _pyaqcv.RNG___eq__(self, other)
    __swig_destroy__ = _pyaqcv.delete_RNG

# Register RNG in _pyaqcv:
_pyaqcv.RNG_swigregister(RNG)


def the_rng():
    return _pyaqcv.the_rng()

def set_rng_seed(seed):
    return _pyaqcv.set_rng_seed(seed)

def randu(dst, low, high):
    return _pyaqcv.randu(dst, low, high)

def randn(dst, mean, stddev):
    return _pyaqcv.randn(dst, mean, stddev)

def rand_shuffle(dst, iter_factor=1., rng=None):
    return _pyaqcv.rand_shuffle(dst, iter_factor, rng)
kKmeansRandomCenters = _pyaqcv.kKmeansRandomCenters
kKmeansPPCenters = _pyaqcv.kKmeansPPCenters
kKmeansUseInitialLabels = _pyaqcv.kKmeansUseInitialLabels

def kmeans(*args):
    return _pyaqcv.kmeans(*args)

def __iadd__(*args):
    return _pyaqcv.__iadd__(*args)

def __isub__(*args):
    return _pyaqcv.__isub__(*args)

def __imul__(*args):
    return _pyaqcv.__imul__(*args)

def __itruediv__(*args):
    return _pyaqcv.__itruediv__(*args)

def __iand__(*args):
    return _pyaqcv.__iand__(*args)

def __ior__(*args):
    return _pyaqcv.__ior__(*args)

def __ixor__(*args):
    return _pyaqcv.__ixor__(*args)

def get_version_string():
    return _pyaqcv.get_version_string()

def get_version_major():
    return _pyaqcv.get_version_major()

def get_version_minor():
    return _pyaqcv.get_version_minor()

def get_version_revision():
    return _pyaqcv.get_version_revision()

def set_thread_num(nthreads):
    return _pyaqcv.set_thread_num(nthreads)

def get_thread_num():
    return _pyaqcv.get_thread_num()

def get_thread_maximum_num():
    return _pyaqcv.get_thread_maximum_num()

def get_thread_id():
    return _pyaqcv.get_thread_id()

def get_tick_count():
    return _pyaqcv.get_tick_count()

def get_tick_frequency():
    return _pyaqcv.get_tick_frequency()

def check_cpu_intrins():
    return _pyaqcv.check_cpu_intrins()

def get_elem_size(type):
    return _pyaqcv.get_elem_size(type)
class ParallelLoopBody(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pyaqcv.delete_ParallelLoopBody

    def __call__(self, range):
        return _pyaqcv.ParallelLoopBody___call__(self, range)

# Register ParallelLoopBody in _pyaqcv:
_pyaqcv.ParallelLoopBody_swigregister(ParallelLoopBody)


def parallel_for_(range, body, nstripes=-1.):
    return _pyaqcv.parallel_for_(range, body, nstripes)

def align_size(sz, n):
    return _pyaqcv.align_size(sz, n)

def div_up(*args):
    return _pyaqcv.div_up(*args)

def round_up(*args):
    return _pyaqcv.round_up(*args)

def scalar_to_raw_data(s, buf, type, unroll_to=0):
    return _pyaqcv.scalar_to_raw_data(s, buf, type, unroll_to)

def alloc_singleton_buffer(size):
    return _pyaqcv.alloc_singleton_buffer(size)

def alloc_singleton_new_buffer(size):
    return _pyaqcv.alloc_singleton_new_buffer(size)
class StopWatch(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pyaqcv.StopWatch_swiginit(self, _pyaqcv.new_StopWatch())
    __swig_destroy__ = _pyaqcv.delete_StopWatch

    def reset(self):
        return _pyaqcv.StopWatch_reset(self)

    def restart(self):
        return _pyaqcv.StopWatch_restart(self)

    def start(self):
        return _pyaqcv.StopWatch_start(self)

    def stop(self):
        return _pyaqcv.StopWatch_stop(self)

    def is_runing(self):
        return _pyaqcv.StopWatch_is_runing(self)

    def elapsed_miliseconds(self):
        return _pyaqcv.StopWatch_elapsed_miliseconds(self)

    def elapsed_microseconds(self):
        return _pyaqcv.StopWatch_elapsed_microseconds(self)

# Register StopWatch in _pyaqcv:
_pyaqcv.StopWatch_swigregister(StopWatch)


def floor(value):
    return _pyaqcv.floor(value)

def ceil(value):
    return _pyaqcv.ceil(value)

def round(value):
    return _pyaqcv.round(value)
class PointFeat(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    pt = property(_pyaqcv.PointFeat_pt_get, _pyaqcv.PointFeat_pt_set)
    angle = property(_pyaqcv.PointFeat_angle_get, _pyaqcv.PointFeat_angle_set)
    magnitude = property(_pyaqcv.PointFeat_magnitude_get, _pyaqcv.PointFeat_magnitude_set)
    weight = property(_pyaqcv.PointFeat_weight_get, _pyaqcv.PointFeat_weight_set)
    score = property(_pyaqcv.PointFeat_score_get, _pyaqcv.PointFeat_score_set)
    is_mod_180 = property(_pyaqcv.PointFeat_is_mod_180_get, _pyaqcv.PointFeat_is_mod_180_set)
    size = property(_pyaqcv.PointFeat_size_get, _pyaqcv.PointFeat_size_set)
    pyr_level = property(_pyaqcv.PointFeat_pyr_level_get, _pyaqcv.PointFeat_pyr_level_set)

    def __init__(self):
        _pyaqcv.PointFeat_swiginit(self, _pyaqcv.new_PointFeat())
    __swig_destroy__ = _pyaqcv.delete_PointFeat

# Register PointFeat in _pyaqcv:
_pyaqcv.PointFeat_swigregister(PointFeat)

class PointFeatArraySet(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    point_features = property(_pyaqcv.PointFeatArraySet_point_features_get, _pyaqcv.PointFeatArraySet_point_features_set)
    chains_info = property(_pyaqcv.PointFeatArraySet_chains_info_get, _pyaqcv.PointFeatArraySet_chains_info_set)

    def __init__(self):
        _pyaqcv.PointFeatArraySet_swiginit(self, _pyaqcv.new_PointFeatArraySet())
    __swig_destroy__ = _pyaqcv.delete_PointFeatArraySet

# Register PointFeatArraySet in _pyaqcv:
_pyaqcv.PointFeatArraySet_swigregister(PointFeatArraySet)


def enable_exception(enable=True):
    return _pyaqcv.enable_exception(enable)

def exception_enabled():
    return _pyaqcv.exception_enabled()
class Exception(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _pyaqcv.Exception_swiginit(self, _pyaqcv.new_Exception(*args))
    __swig_destroy__ = _pyaqcv.delete_Exception

    def what(self):
        return _pyaqcv.Exception_what(self)

    def name(self):
        return _pyaqcv.Exception_name(self)

    def err_code(self):
        return _pyaqcv.Exception_err_code(self)

    def get_info(self):
        return _pyaqcv.Exception_get_info(self)

# Register Exception in _pyaqcv:
_pyaqcv.Exception_swigregister(Exception)


def handle_error(e):
    return _pyaqcv.handle_error(e)
class UnknownError(Exception):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, msg, func, file, line):
        _pyaqcv.UnknownError_swiginit(self, _pyaqcv.new_UnknownError(msg, func, file, line))
    __swig_destroy__ = _pyaqcv.delete_UnknownError

# Register UnknownError in _pyaqcv:
_pyaqcv.UnknownError_swigregister(UnknownError)

class MemoryError(Exception):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, msg, func, file, line):
        _pyaqcv.MemoryError_swiginit(self, _pyaqcv.new_MemoryError(msg, func, file, line))
    __swig_destroy__ = _pyaqcv.delete_MemoryError

# Register MemoryError in _pyaqcv:
_pyaqcv.MemoryError_swigregister(MemoryError)

class IOError(Exception):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, msg, func, file, line):
        _pyaqcv.IOError_swiginit(self, _pyaqcv.new_IOError(msg, func, file, line))
    __swig_destroy__ = _pyaqcv.delete_IOError

# Register IOError in _pyaqcv:
_pyaqcv.IOError_swigregister(IOError)

class ArgumentsError(Exception):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, msg, func, file, line):
        _pyaqcv.ArgumentsError_swiginit(self, _pyaqcv.new_ArgumentsError(msg, func, file, line))
    __swig_destroy__ = _pyaqcv.delete_ArgumentsError

# Register ArgumentsError in _pyaqcv:
_pyaqcv.ArgumentsError_swigregister(ArgumentsError)

class LogicError(Exception):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, msg, func, file, line):
        _pyaqcv.LogicError_swiginit(self, _pyaqcv.new_LogicError(msg, func, file, line))
    __swig_destroy__ = _pyaqcv.delete_LogicError

# Register LogicError in _pyaqcv:
_pyaqcv.LogicError_swigregister(LogicError)

class MathError(Exception):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, msg, func, file, line):
        _pyaqcv.MathError_swiginit(self, _pyaqcv.new_MathError(msg, func, file, line))
    __swig_destroy__ = _pyaqcv.delete_MathError

# Register MathError in _pyaqcv:
_pyaqcv.MathError_swigregister(MathError)

class UnimplementedERROR(Exception):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, msg, func, file, line):
        _pyaqcv.UnimplementedERROR_swiginit(self, _pyaqcv.new_UnimplementedERROR(msg, func, file, line))
    __swig_destroy__ = _pyaqcv.delete_UnimplementedERROR

# Register UnimplementedERROR in _pyaqcv:
_pyaqcv.UnimplementedERROR_swigregister(UnimplementedERROR)

class GeneralAqcvAssertException(Exception):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, msg, func, file, line):
        _pyaqcv.GeneralAqcvAssertException_swiginit(self, _pyaqcv.new_GeneralAqcvAssertException(msg, func, file, line))
    __swig_destroy__ = _pyaqcv.delete_GeneralAqcvAssertException

# Register GeneralAqcvAssertException in _pyaqcv:
_pyaqcv.GeneralAqcvAssertException_swigregister(GeneralAqcvAssertException)

class GeneralAqcvErrorException(Exception):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, msg, func, file, line):
        _pyaqcv.GeneralAqcvErrorException_swiginit(self, _pyaqcv.new_GeneralAqcvErrorException(msg, func, file, line))
    __swig_destroy__ = _pyaqcv.delete_GeneralAqcvErrorException

# Register GeneralAqcvErrorException in _pyaqcv:
_pyaqcv.GeneralAqcvErrorException_swigregister(GeneralAqcvErrorException)

class PlatformEnvironmentError(Exception):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, msg, func, file, line):
        _pyaqcv.PlatformEnvironmentError_swiginit(self, _pyaqcv.new_PlatformEnvironmentError(msg, func, file, line))
    __swig_destroy__ = _pyaqcv.delete_PlatformEnvironmentError

# Register PlatformEnvironmentError in _pyaqcv:
_pyaqcv.PlatformEnvironmentError_swigregister(PlatformEnvironmentError)

class FitModelBase(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pyaqcv.delete_FitModelBase

    def get_min_sample_num(self):
        return _pyaqcv.FitModelBase_get_min_sample_num(self)

    def init_model(self, pts_mat, idxs):
        return _pyaqcv.FitModelBase_init_model(self, pts_mat, idxs)

    def fit(self, pts_mat, idxs):
        return _pyaqcv.FitModelBase_fit(self, pts_mat, idxs)

    def distance(self, pts_mat, distance_mat, idxs):
        return _pyaqcv.FitModelBase_distance(self, pts_mat, distance_mat, idxs)

# Register FitModelBase in _pyaqcv:
_pyaqcv.FitModelBase_swigregister(FitModelBase)

class AuthStatus(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, _code, msg):
        _pyaqcv.AuthStatus_swiginit(self, _pyaqcv.new_AuthStatus(_code, msg))

    def __nonzero__(self):
        return _pyaqcv.AuthStatus___nonzero__(self)
    __bool__ = __nonzero__


    code = property(_pyaqcv.AuthStatus_code_get, _pyaqcv.AuthStatus_code_set)
    error_msg = property(_pyaqcv.AuthStatus_error_msg_get, _pyaqcv.AuthStatus_error_msg_set)
    __swig_destroy__ = _pyaqcv.delete_AuthStatus

# Register AuthStatus in _pyaqcv:
_pyaqcv.AuthStatus_swigregister(AuthStatus)

class AuthCallBack(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pyaqcv.delete_AuthCallBack

    def handle(self, remain_chance, error_msg):
        return _pyaqcv.AuthCallBack_handle(self, remain_chance, error_msg)

# Register AuthCallBack in _pyaqcv:
_pyaqcv.AuthCallBack_swigregister(AuthCallBack)

class Authorization(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pyaqcv.Authorization_swiginit(self, _pyaqcv.new_Authorization())
    __swig_destroy__ = _pyaqcv.delete_Authorization

    @staticmethod
    def set_authorize_callback(auth_cb):
        return _pyaqcv.Authorization_set_authorize_callback(auth_cb)

    @staticmethod
    def remove_authorize_callback():
        return _pyaqcv.Authorization_remove_authorize_callback()

    @staticmethod
    def authorize_status(*args):
        return _pyaqcv.Authorization_authorize_status(*args)

    @staticmethod
    def get_dongle_features():
        return _pyaqcv.Authorization_get_dongle_features()

    @staticmethod
    def set_authorize_info(*args):
        return _pyaqcv.Authorization_set_authorize_info(*args)

    @staticmethod
    def set_remote_authorize_code(auth_code):
        return _pyaqcv.Authorization_set_remote_authorize_code(auth_code)

# Register Authorization in _pyaqcv:
_pyaqcv.Authorization_swigregister(Authorization)

def Authorization_set_authorize_callback(auth_cb):
    return _pyaqcv.Authorization_set_authorize_callback(auth_cb)

def Authorization_remove_authorize_callback():
    return _pyaqcv.Authorization_remove_authorize_callback()

def Authorization_authorize_status(*args):
    return _pyaqcv.Authorization_authorize_status(*args)

def Authorization_get_dongle_features():
    return _pyaqcv.Authorization_get_dongle_features()

def Authorization_set_authorize_info(*args):
    return _pyaqcv.Authorization_set_authorize_info(*args)

def Authorization_set_remote_authorize_code(auth_code):
    return _pyaqcv.Authorization_set_remote_authorize_code(auth_code)

class MD5(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pyaqcv.MD5_swiginit(self, _pyaqcv.new_MD5())
    __swig_destroy__ = _pyaqcv.delete_MD5

    def __call__(self, *args):
        return _pyaqcv.MD5___call__(self, *args)

    def add(self, buffer, num_bytes):
        return _pyaqcv.MD5_add(self, buffer, num_bytes)

    def get_hash(self):
        return _pyaqcv.MD5_get_hash(self)

    def reset(self):
        return _pyaqcv.MD5_reset(self)

# Register MD5 in _pyaqcv:
_pyaqcv.MD5_swigregister(MD5)

class SHA1(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pyaqcv.SHA1_swiginit(self, _pyaqcv.new_SHA1())
    __swig_destroy__ = _pyaqcv.delete_SHA1

    def __call__(self, *args):
        return _pyaqcv.SHA1___call__(self, *args)

    def add(self, buffer, num_bytes):
        return _pyaqcv.SHA1_add(self, buffer, num_bytes)

    def get_hash(self):
        return _pyaqcv.SHA1_get_hash(self)

    def reset(self):
        return _pyaqcv.SHA1_reset(self)

# Register SHA1 in _pyaqcv:
_pyaqcv.SHA1_swigregister(SHA1)

class SHA256(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pyaqcv.SHA256_swiginit(self, _pyaqcv.new_SHA256())
    __swig_destroy__ = _pyaqcv.delete_SHA256

    def __call__(self, *args):
        return _pyaqcv.SHA256___call__(self, *args)

    def add(self, buffer, num_bytes):
        return _pyaqcv.SHA256_add(self, buffer, num_bytes)

    def get_hash(self):
        return _pyaqcv.SHA256_get_hash(self)

    def reset(self):
        return _pyaqcv.SHA256_reset(self)

# Register SHA256 in _pyaqcv:
_pyaqcv.SHA256_swigregister(SHA256)

class SHA3(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    kBits224 = _pyaqcv.SHA3_kBits224
    kBits256 = _pyaqcv.SHA3_kBits256
    kBits384 = _pyaqcv.SHA3_kBits384
    kBits512 = _pyaqcv.SHA3_kBits512

    def __init__(self, *args):
        _pyaqcv.SHA3_swiginit(self, _pyaqcv.new_SHA3(*args))
    __swig_destroy__ = _pyaqcv.delete_SHA3

    def __call__(self, *args):
        return _pyaqcv.SHA3___call__(self, *args)

    def add(self, buffer, num_bytes):
        return _pyaqcv.SHA3_add(self, buffer, num_bytes)

    def get_hash(self):
        return _pyaqcv.SHA3_get_hash(self)

    def reset(self):
        return _pyaqcv.SHA3_reset(self)

# Register SHA3 in _pyaqcv:
_pyaqcv.SHA3_swigregister(SHA3)

kImreadUnchanged = _pyaqcv.kImreadUnchanged
kImreadGrayscale = _pyaqcv.kImreadGrayscale
kImreadColor = _pyaqcv.kImreadColor
kImreadAnyDepth = _pyaqcv.kImreadAnyDepth
kImreadAnyColor = _pyaqcv.kImreadAnyColor
kImreadLoadGdal = _pyaqcv.kImreadLoadGdal
kImreadIgnoreOrientation = _pyaqcv.kImreadIgnoreOrientation
kImwriteJpegQuality = _pyaqcv.kImwriteJpegQuality
kImwriteJpegProgressive = _pyaqcv.kImwriteJpegProgressive
kImwriteJpegOptimize = _pyaqcv.kImwriteJpegOptimize
kImwriteJpegRstInterval = _pyaqcv.kImwriteJpegRstInterval
kImwriteJpegLumaQuality = _pyaqcv.kImwriteJpegLumaQuality
kImwriteJpegChromaQuality = _pyaqcv.kImwriteJpegChromaQuality
kImwritePngCompression = _pyaqcv.kImwritePngCompression
kImwritePngStrategy = _pyaqcv.kImwritePngStrategy
kImwritePngBilevel = _pyaqcv.kImwritePngBilevel
kImwriteTiffResunit = _pyaqcv.kImwriteTiffResunit
kImwriteTiffXdpi = _pyaqcv.kImwriteTiffXdpi
kImwriteTiffYdpi = _pyaqcv.kImwriteTiffYdpi
kImwriteTiffCompression = _pyaqcv.kImwriteTiffCompression
kImwritePngStrategyDefault = _pyaqcv.kImwritePngStrategyDefault
kImwritePngStrategyFiltered = _pyaqcv.kImwritePngStrategyFiltered
kImwritePngStrategyHuffmanOnly = _pyaqcv.kImwritePngStrategyHuffmanOnly
kImwritePngStrategyRle = _pyaqcv.kImwritePngStrategyRle
kImwritePngStrategyFixed = _pyaqcv.kImwritePngStrategyFixed

def imread_ascii(*args):
    return _pyaqcv.imread_ascii(*args)

def imread(*args):
    return _pyaqcv.imread(*args)

def imwrite_ascii(*args):
    return _pyaqcv.imwrite_ascii(*args)

def imwrite(*args):
    return _pyaqcv.imwrite(*args)

def imdecode(*args):
    return _pyaqcv.imdecode(*args)

def imencode(*args):
    return _pyaqcv.imencode(*args)

def have_image_reader(*args):
    return _pyaqcv.have_image_reader(*args)

def have_image_writer(*args):
    return _pyaqcv.have_image_writer(*args)
class ImageViewer(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    kWindowNormal = _pyaqcv.ImageViewer_kWindowNormal
    kWindowAutoSize = _pyaqcv.ImageViewer_kWindowAutoSize

    def __init__(self):
        _pyaqcv.ImageViewer_swiginit(self, _pyaqcv.new_ImageViewer())
    __swig_destroy__ = _pyaqcv.delete_ImageViewer

    def set_win_mode(self, mode):
        return _pyaqcv.ImageViewer_set_win_mode(self, mode)

    def show_single_image(self, win_name, img, during_time=0, destory=False):
        return _pyaqcv.ImageViewer_show_single_image(self, win_name, img, during_time, destory)

    def add_frame(self, frame):
        return _pyaqcv.ImageViewer_add_frame(self, frame)

    def pop_frame(self):
        return _pyaqcv.ImageViewer_pop_frame(self)

    def frame_count(self):
        return _pyaqcv.ImageViewer_frame_count(self)

    def show_frames(self, *args):
        return _pyaqcv.ImageViewer_show_frames(self, *args)

    @staticmethod
    def destory_all_windows():
        return _pyaqcv.ImageViewer_destory_all_windows()

    @staticmethod
    def imshow(*args):
        return _pyaqcv.ImageViewer_imshow(*args)

    @staticmethod
    def wait_key(delay=0):
        return _pyaqcv.ImageViewer_wait_key(delay)

# Register ImageViewer in _pyaqcv:
_pyaqcv.ImageViewer_swigregister(ImageViewer)

def ImageViewer_destory_all_windows():
    return _pyaqcv.ImageViewer_destory_all_windows()

def ImageViewer_imshow(*args):
    return _pyaqcv.ImageViewer_imshow(*args)

def ImageViewer_wait_key(delay=0):
    return _pyaqcv.ImageViewer_wait_key(delay)

kFilterscharr = _pyaqcv.kFilterscharr
kCannyL2Gradient = _pyaqcv.kCannyL2Gradient
kTextAnchorBottomLeft = _pyaqcv.kTextAnchorBottomLeft
kTextAnchorTopLeft = _pyaqcv.kTextAnchorTopLeft

def get_gaussian_kernel(ksize, sigma, ktype=6):
    return _pyaqcv.get_gaussian_kernel(ksize, sigma, ktype)

def get_derivatives_kernels(kx, ky, dx, dy, ksize, normalize=False, ktype=5):
    return _pyaqcv.get_derivatives_kernels(kx, ky, dx, dy, ksize, normalize, ktype)

def get_gabor_kernel(*args):
    return _pyaqcv.get_gabor_kernel(*args)

def median_blur(src, dst, ksize):
    return _pyaqcv.median_blur(src, dst, ksize)

def gaussian_blur(*args):
    return _pyaqcv.gaussian_blur(*args)

def stack_blur(src, dst, ksize):
    return _pyaqcv.stack_blur(src, dst, ksize)

def bilateral_filter(*args):
    return _pyaqcv.bilateral_filter(*args)

def box_filter(*args):
    return _pyaqcv.box_filter(*args)

def sqr_box_filter(*args):
    return _pyaqcv.sqr_box_filter(*args)

def filter2d(*args):
    return _pyaqcv.filter2d(*args)

def separable_filter2d(*args):
    return _pyaqcv.separable_filter2d(*args)

def sobel(*args):
    return _pyaqcv.sobel(*args)

def spatial_gradient(*args):
    return _pyaqcv.spatial_gradient(*args)

def scharr(*args):
    return _pyaqcv.scharr(*args)

def laplacian(*args):
    return _pyaqcv.laplacian(*args)

def canny(image, edges, threshold1, threshold2, ksize=3, L2gradient=False):
    return _pyaqcv.canny(image, edges, threshold1, threshold2, ksize, L2gradient)

def morphology_default_border_value():
    return _pyaqcv.morphology_default_border_value()
kMorphologyErode = _pyaqcv.kMorphologyErode
kMorphologyDilate = _pyaqcv.kMorphologyDilate
kMorphologyOpen = _pyaqcv.kMorphologyOpen
kMorphologyClose = _pyaqcv.kMorphologyClose
kMorphologyGradient = _pyaqcv.kMorphologyGradient
kMorphologyTopHat = _pyaqcv.kMorphologyTopHat
kMorphologyBlackHat = _pyaqcv.kMorphologyBlackHat
kMorphologyHitMiss = _pyaqcv.kMorphologyHitMiss
kMorphologyRect = _pyaqcv.kMorphologyRect
kMorphologyCross = _pyaqcv.kMorphologyCross
kMorphologyCircle = _pyaqcv.kMorphologyCircle
kMorphologyEllipse = _pyaqcv.kMorphologyEllipse

def get_structuring_element(*args):
    return _pyaqcv.get_structuring_element(*args)

def erode(*args):
    return _pyaqcv.erode(*args)

def dilate(*args):
    return _pyaqcv.dilate(*args)

def morphology(*args):
    return _pyaqcv.morphology(*args)

def skeleton(src, dst):
    return _pyaqcv.skeleton(src, dst)
kRotate90Clockwise = _pyaqcv.kRotate90Clockwise
kRotate180 = _pyaqcv.kRotate180
kRotate90CounterClockwise = _pyaqcv.kRotate90CounterClockwise
kShearHorizontal = _pyaqcv.kShearHorizontal
kShearVertical = _pyaqcv.kShearVertical
kInterNearest = _pyaqcv.kInterNearest
kInterLinear = _pyaqcv.kInterLinear
kInterCubic = _pyaqcv.kInterCubic
kInterArea = _pyaqcv.kInterArea
kInterMax = _pyaqcv.kInterMax

def translate(*args):
    return _pyaqcv.translate(*args)

def get_rotation_mat2d(center, angle, scale):
    return _pyaqcv.get_rotation_mat2d(center, angle, scale)

def rotate(*args):
    return _pyaqcv.rotate(*args)

def vertical_rotate(src, dst, flag):
    return _pyaqcv.vertical_rotate(src, dst, flag)

def shear(*args):
    return _pyaqcv.shear(*args)

def get_affine_mat(*args):
    return _pyaqcv.get_affine_mat(*args)

def warp_affine(*args):
    return _pyaqcv.warp_affine(*args)

def get_perspective_mat(src_points, dst_points, trans_matrix):
    return _pyaqcv.get_perspective_mat(src_points, dst_points, trans_matrix)

def warp_perspective(*args):
    return _pyaqcv.warp_perspective(*args)

def remap(*args):
    return _pyaqcv.remap(*args)

def resize(*args):
    return _pyaqcv.resize(*args)

def warp_circle_spread(*args):
    return _pyaqcv.warp_circle_spread(*args)

def warp_circle_spread_inv(*args):
    return _pyaqcv.warp_circle_spread_inv(*args)
kThresholdBinary = _pyaqcv.kThresholdBinary
kThresholdBinaryInverse = _pyaqcv.kThresholdBinaryInverse
kThresholdTruncate = _pyaqcv.kThresholdTruncate
kThresholdToZero = _pyaqcv.kThresholdToZero
kThresholdToZeroInverse = _pyaqcv.kThresholdToZeroInverse
kThresholdMask = _pyaqcv.kThresholdMask
kThresholdOtsu = _pyaqcv.kThresholdOtsu
kThresholdTriangle = _pyaqcv.kThresholdTriangle

def threshold(src, dst, thresh, maxval, type):
    return _pyaqcv.threshold(src, dst, thresh, maxval, type)
kAdaptiveThresholdMeanC = _pyaqcv.kAdaptiveThresholdMeanC
kAdaptiveThresholdGaussianC = _pyaqcv.kAdaptiveThresholdGaussianC
kAdaptiveThresholdForegroundLight = _pyaqcv.kAdaptiveThresholdForegroundLight
kAdaptiveThresholdForegroundDark = _pyaqcv.kAdaptiveThresholdForegroundDark
kAdaptiveThresholdForegroundEqual = _pyaqcv.kAdaptiveThresholdForegroundEqual
kAdaptiveThresholdForegroundNotEqual = _pyaqcv.kAdaptiveThresholdForegroundNotEqual

def adaptive_threshold(*args):
    return _pyaqcv.adaptive_threshold(*args)

def auto_threshold(src, dst, sigma):
    return _pyaqcv.auto_threshold(src, dst, sigma)
class Histogram(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    bin_num = property(_pyaqcv.Histogram_bin_num_get, _pyaqcv.Histogram_bin_num_set)
    hist_min = property(_pyaqcv.Histogram_hist_min_get, _pyaqcv.Histogram_hist_min_set)
    hist_max = property(_pyaqcv.Histogram_hist_max_get, _pyaqcv.Histogram_hist_max_set)
    hist_range = property(_pyaqcv.Histogram_hist_range_get, _pyaqcv.Histogram_hist_range_set)
    mean = property(_pyaqcv.Histogram_mean_get, _pyaqcv.Histogram_mean_set)
    std_dev = property(_pyaqcv.Histogram_std_dev_get, _pyaqcv.Histogram_std_dev_set)
    total = property(_pyaqcv.Histogram_total_get, _pyaqcv.Histogram_total_set)
    bin_min = property(_pyaqcv.Histogram_bin_min_get, _pyaqcv.Histogram_bin_min_set)
    bin_max = property(_pyaqcv.Histogram_bin_max_get, _pyaqcv.Histogram_bin_max_set)
    bin_mid = property(_pyaqcv.Histogram_bin_mid_get, _pyaqcv.Histogram_bin_mid_set)
    bin_count = property(_pyaqcv.Histogram_bin_count_get, _pyaqcv.Histogram_bin_count_set)

    def __init__(self):
        _pyaqcv.Histogram_swiginit(self, _pyaqcv.new_Histogram())

    def init(self, _bins, _hist_min, _hist_max):
        return _pyaqcv.Histogram_init(self, _bins, _hist_min, _hist_max)
    __swig_destroy__ = _pyaqcv.delete_Histogram

# Register Histogram in _pyaqcv:
_pyaqcv.Histogram_swigregister(Histogram)


def histogram(*args):
    return _pyaqcv.histogram(*args)

def histogram_equalization(*args):
    return _pyaqcv.histogram_equalization(*args)

def histogram_specification(*args):
    return _pyaqcv.histogram_specification(*args)

def magic_wand_select(*args):
    return _pyaqcv.magic_wand_select(*args)

def scribble_selection(*args):
    return _pyaqcv.scribble_selection(*args)
kColorBGR2BGRA = _pyaqcv.kColorBGR2BGRA
kColorRGB2RGBA = _pyaqcv.kColorRGB2RGBA
kColorBGRA2BGR = _pyaqcv.kColorBGRA2BGR
kColorRGBA2RGB = _pyaqcv.kColorRGBA2RGB
kColorBGR2RGBA = _pyaqcv.kColorBGR2RGBA
kColorRGB2BGRA = _pyaqcv.kColorRGB2BGRA
kColorRGBA2BGR = _pyaqcv.kColorRGBA2BGR
kColorBGRA2RGB = _pyaqcv.kColorBGRA2RGB
kColorBGR2RGB = _pyaqcv.kColorBGR2RGB
kColorRGB2BGR = _pyaqcv.kColorRGB2BGR
kColorBGRA2RGBA = _pyaqcv.kColorBGRA2RGBA
kColorRGBA2BGRA = _pyaqcv.kColorRGBA2BGRA
kColorBGR2Gray = _pyaqcv.kColorBGR2Gray
kColorRGB2Gray = _pyaqcv.kColorRGB2Gray
kColorGray2BGR = _pyaqcv.kColorGray2BGR
kColorGray2RGB = _pyaqcv.kColorGray2RGB
kColorGray2BGRA = _pyaqcv.kColorGray2BGRA
kColorGray2RGBA = _pyaqcv.kColorGray2RGBA
kColorBGRA2Gray = _pyaqcv.kColorBGRA2Gray
kColorRGBA2Gray = _pyaqcv.kColorRGBA2Gray
kColorBGR2BGR565 = _pyaqcv.kColorBGR2BGR565
kColorRGB2BGR565 = _pyaqcv.kColorRGB2BGR565
kColorBGR5652BGR = _pyaqcv.kColorBGR5652BGR
kColorBGR5652RGB = _pyaqcv.kColorBGR5652RGB
kColorBGRA2BGR565 = _pyaqcv.kColorBGRA2BGR565
kColorRGBA2BGR565 = _pyaqcv.kColorRGBA2BGR565
kColorBGR5652BGRA = _pyaqcv.kColorBGR5652BGRA
kColorBGR5652RGBA = _pyaqcv.kColorBGR5652RGBA
kColorGray2BGR565 = _pyaqcv.kColorGray2BGR565
kColorBGR5652Gray = _pyaqcv.kColorBGR5652Gray
kColorBGR2BGR555 = _pyaqcv.kColorBGR2BGR555
kColorRGB2BGR555 = _pyaqcv.kColorRGB2BGR555
kColorBGR5552BGR = _pyaqcv.kColorBGR5552BGR
kColorBGR5552RGB = _pyaqcv.kColorBGR5552RGB
kColorBGRA2BGR555 = _pyaqcv.kColorBGRA2BGR555
kColorRGBA2BGR555 = _pyaqcv.kColorRGBA2BGR555
kColorBGR5552BGRA = _pyaqcv.kColorBGR5552BGRA
kColorBGR5552RGBA = _pyaqcv.kColorBGR5552RGBA
kColorGray2BGR555 = _pyaqcv.kColorGray2BGR555
kColorBGR5552Gray = _pyaqcv.kColorBGR5552Gray
kColorBGR2XYZ = _pyaqcv.kColorBGR2XYZ
kColorRGB2XYZ = _pyaqcv.kColorRGB2XYZ
kColorXYZ2BGR = _pyaqcv.kColorXYZ2BGR
kColorXYZ2RGB = _pyaqcv.kColorXYZ2RGB
kColorBGR2YCrCb = _pyaqcv.kColorBGR2YCrCb
kColorRGB2YCrCb = _pyaqcv.kColorRGB2YCrCb
kColorYCrCb2BGR = _pyaqcv.kColorYCrCb2BGR
kColorYCrCb2RGB = _pyaqcv.kColorYCrCb2RGB
kColorBGR2HSV = _pyaqcv.kColorBGR2HSV
kColorRGB2HSV = _pyaqcv.kColorRGB2HSV
kColorBGR2Lab = _pyaqcv.kColorBGR2Lab
kColorRGB2Lab = _pyaqcv.kColorRGB2Lab
kColorBGR2Luv = _pyaqcv.kColorBGR2Luv
kColorRGB2Luv = _pyaqcv.kColorRGB2Luv
kColorBGR2HLS = _pyaqcv.kColorBGR2HLS
kColorRGB2HLS = _pyaqcv.kColorRGB2HLS
kColorHSV2BGR = _pyaqcv.kColorHSV2BGR
kColorHSV2RGB = _pyaqcv.kColorHSV2RGB
kColorLab2BGR = _pyaqcv.kColorLab2BGR
kColorLab2RGB = _pyaqcv.kColorLab2RGB
kColorLuv2BGR = _pyaqcv.kColorLuv2BGR
kColorLuv2RGB = _pyaqcv.kColorLuv2RGB
kColorHLS2BGR = _pyaqcv.kColorHLS2BGR
kColorHLS2RGB = _pyaqcv.kColorHLS2RGB
kColorBGR2HSVFull = _pyaqcv.kColorBGR2HSVFull
kColorRGB2HSVFull = _pyaqcv.kColorRGB2HSVFull
kColorBGR2HLSFull = _pyaqcv.kColorBGR2HLSFull
kColorRGB2HLSFull = _pyaqcv.kColorRGB2HLSFull
kColorHSV2BGRFull = _pyaqcv.kColorHSV2BGRFull
kColorHSV2RGBFull = _pyaqcv.kColorHSV2RGBFull
kColorHLS2BGRFull = _pyaqcv.kColorHLS2BGRFull
kColorHLS2RGBFull = _pyaqcv.kColorHLS2RGBFull
kColorLBGR2Lab = _pyaqcv.kColorLBGR2Lab
kColorLRGB2Lab = _pyaqcv.kColorLRGB2Lab
kColorLBGR2Luv = _pyaqcv.kColorLBGR2Luv
kColorLRGB2Luv = _pyaqcv.kColorLRGB2Luv
kColorLab2LBGR = _pyaqcv.kColorLab2LBGR
kColorLab2LRGB = _pyaqcv.kColorLab2LRGB
kColorLuv2LBGR = _pyaqcv.kColorLuv2LBGR
kColorLuv2LRGB = _pyaqcv.kColorLuv2LRGB
kColorBGR2YUV = _pyaqcv.kColorBGR2YUV
kColorRGB2YUV = _pyaqcv.kColorRGB2YUV
kColorYUV2BGR = _pyaqcv.kColorYUV2BGR
kColorYUV2RGB = _pyaqcv.kColorYUV2RGB
kColorYUV2RGB_NV12 = _pyaqcv.kColorYUV2RGB_NV12
kColorYUV2BGR_NV12 = _pyaqcv.kColorYUV2BGR_NV12
kColorYUV2RGB_NV21 = _pyaqcv.kColorYUV2RGB_NV21
kColorYUV2BGR_NV21 = _pyaqcv.kColorYUV2BGR_NV21
kColorYUV420sp2RGB = _pyaqcv.kColorYUV420sp2RGB
kColorYUV420sp2BGR = _pyaqcv.kColorYUV420sp2BGR
kColorYUV2RGBA_NV12 = _pyaqcv.kColorYUV2RGBA_NV12
kColorYUV2BGRA_NV12 = _pyaqcv.kColorYUV2BGRA_NV12
kColorYUV2RGBA_NV21 = _pyaqcv.kColorYUV2RGBA_NV21
kColorYUV2BGRA_NV21 = _pyaqcv.kColorYUV2BGRA_NV21
kColorYUV420sp2RGBA = _pyaqcv.kColorYUV420sp2RGBA
kColorYUV420sp2BGRA = _pyaqcv.kColorYUV420sp2BGRA
kColorYUV2RGB_YV12 = _pyaqcv.kColorYUV2RGB_YV12
kColorYUV2BGR_YV12 = _pyaqcv.kColorYUV2BGR_YV12
kColorYUV2RGB_IYUV = _pyaqcv.kColorYUV2RGB_IYUV
kColorYUV2BGR_IYUV = _pyaqcv.kColorYUV2BGR_IYUV
kColorYUV2RGB_I420 = _pyaqcv.kColorYUV2RGB_I420
kColorYUV2BGR_I420 = _pyaqcv.kColorYUV2BGR_I420
kColorYUV420p2RGB = _pyaqcv.kColorYUV420p2RGB
kColorYUV420p2BGR = _pyaqcv.kColorYUV420p2BGR
kColorYUV2RGBA_YV12 = _pyaqcv.kColorYUV2RGBA_YV12
kColorYUV2BGRA_YV12 = _pyaqcv.kColorYUV2BGRA_YV12
kColorYUV2RGBA_IYUV = _pyaqcv.kColorYUV2RGBA_IYUV
kColorYUV2BGRA_IYUV = _pyaqcv.kColorYUV2BGRA_IYUV
kColorYUV2RGBA_I420 = _pyaqcv.kColorYUV2RGBA_I420
kColorYUV2BGRA_I420 = _pyaqcv.kColorYUV2BGRA_I420
kColorYUV420p2RGBA = _pyaqcv.kColorYUV420p2RGBA
kColorYUV420p2BGRA = _pyaqcv.kColorYUV420p2BGRA
kColorYUV2Gray420 = _pyaqcv.kColorYUV2Gray420
kColorYUV2GrayNV21 = _pyaqcv.kColorYUV2GrayNV21
kColorYUV2GrayNV12 = _pyaqcv.kColorYUV2GrayNV12
kColorYUV2GrayYV12 = _pyaqcv.kColorYUV2GrayYV12
kColorYUV2GrayIYUV = _pyaqcv.kColorYUV2GrayIYUV
kColorYUV2GrayI420 = _pyaqcv.kColorYUV2GrayI420
kColorYUV420sp2Gray = _pyaqcv.kColorYUV420sp2Gray
kColorYUV420p2Gray = _pyaqcv.kColorYUV420p2Gray
kColorYUV2RGB_UYVY = _pyaqcv.kColorYUV2RGB_UYVY
kColorYUV2BGR_UYVY = _pyaqcv.kColorYUV2BGR_UYVY
kColorYUV2RGB_Y422 = _pyaqcv.kColorYUV2RGB_Y422
kColorYUV2BGR_Y422 = _pyaqcv.kColorYUV2BGR_Y422
kColorYUV2RGB_UYNV = _pyaqcv.kColorYUV2RGB_UYNV
kColorYUV2BGR_UYNV = _pyaqcv.kColorYUV2BGR_UYNV
kColorYUV2RGBA_UYVY = _pyaqcv.kColorYUV2RGBA_UYVY
kColorYUV2BGRA_UYVY = _pyaqcv.kColorYUV2BGRA_UYVY
kColorYUV2RGBA_Y422 = _pyaqcv.kColorYUV2RGBA_Y422
kColorYUV2BGRA_Y422 = _pyaqcv.kColorYUV2BGRA_Y422
kColorYUV2RGBA_UYNV = _pyaqcv.kColorYUV2RGBA_UYNV
kColorYUV2BGRA_UYNV = _pyaqcv.kColorYUV2BGRA_UYNV
kColorYUV2RGB_YUY2 = _pyaqcv.kColorYUV2RGB_YUY2
kColorYUV2BGR_YUY2 = _pyaqcv.kColorYUV2BGR_YUY2
kColorYUV2RGB_YVYU = _pyaqcv.kColorYUV2RGB_YVYU
kColorYUV2BGR_YVYU = _pyaqcv.kColorYUV2BGR_YVYU
kColorYUV2RGB_YUYV = _pyaqcv.kColorYUV2RGB_YUYV
kColorYUV2BGR_YUYV = _pyaqcv.kColorYUV2BGR_YUYV
kColorYUV2RGB_YUNV = _pyaqcv.kColorYUV2RGB_YUNV
kColorYUV2BGR_YUNV = _pyaqcv.kColorYUV2BGR_YUNV
kColorYUV2RGBA_YUY2 = _pyaqcv.kColorYUV2RGBA_YUY2
kColorYUV2BGRA_YUY2 = _pyaqcv.kColorYUV2BGRA_YUY2
kColorYUV2RGBA_YVYU = _pyaqcv.kColorYUV2RGBA_YVYU
kColorYUV2BGRA_YVYU = _pyaqcv.kColorYUV2BGRA_YVYU
kColorYUV2RGBA_YUYV = _pyaqcv.kColorYUV2RGBA_YUYV
kColorYUV2BGRA_YUYV = _pyaqcv.kColorYUV2BGRA_YUYV
kColorYUV2RGBA_YUNV = _pyaqcv.kColorYUV2RGBA_YUNV
kColorYUV2BGRA_YUNV = _pyaqcv.kColorYUV2BGRA_YUNV
kColorYUV2GrayUYVY = _pyaqcv.kColorYUV2GrayUYVY
kColorYUV2GrayYUY2 = _pyaqcv.kColorYUV2GrayYUY2
kColorYUV2GrayY422 = _pyaqcv.kColorYUV2GrayY422
kColorYUV2GrayUYNV = _pyaqcv.kColorYUV2GrayUYNV
kColorYUV2GrayYVYU = _pyaqcv.kColorYUV2GrayYVYU
kColorYUV2GrayYUYV = _pyaqcv.kColorYUV2GrayYUYV
kColorYUV2GrayYUNV = _pyaqcv.kColorYUV2GrayYUNV
kColorRGBA2mRGBA = _pyaqcv.kColorRGBA2mRGBA
kColormRGBA2RGBA = _pyaqcv.kColormRGBA2RGBA
kColorRGB2YUV_I420 = _pyaqcv.kColorRGB2YUV_I420
kColorBGR2YUV_I420 = _pyaqcv.kColorBGR2YUV_I420
kColorRGB2YUV_IYUV = _pyaqcv.kColorRGB2YUV_IYUV
kColorBGR2YUV_IYUV = _pyaqcv.kColorBGR2YUV_IYUV
kColorRGBA2YUV_I420 = _pyaqcv.kColorRGBA2YUV_I420
kColorBGRA2YUV_I420 = _pyaqcv.kColorBGRA2YUV_I420
kColorRGBA2YUV_IYUV = _pyaqcv.kColorRGBA2YUV_IYUV
kColorBGRA2YUV_IYUV = _pyaqcv.kColorBGRA2YUV_IYUV
kColorRGB2YUV_YV12 = _pyaqcv.kColorRGB2YUV_YV12
kColorBGR2YUV_YV12 = _pyaqcv.kColorBGR2YUV_YV12
kColorRGBA2YUV_YV12 = _pyaqcv.kColorRGBA2YUV_YV12
kColorBGRA2YUV_YV12 = _pyaqcv.kColorBGRA2YUV_YV12
kColorBayerRG2BGR = _pyaqcv.kColorBayerRG2BGR
kColorBayerGR2BGR = _pyaqcv.kColorBayerGR2BGR
kColorBayerBG2BGR = _pyaqcv.kColorBayerBG2BGR
kColorBayerGB2BGR = _pyaqcv.kColorBayerGB2BGR
kColorBayerBG2RGB = _pyaqcv.kColorBayerBG2RGB
kColorBayerGB2RGB = _pyaqcv.kColorBayerGB2RGB
kColorBayerRG2RGB = _pyaqcv.kColorBayerRG2RGB
kColorBayerGR2RGB = _pyaqcv.kColorBayerGR2RGB
kColorBayerRG2Gray = _pyaqcv.kColorBayerRG2Gray
kColorBayerGR2Gray = _pyaqcv.kColorBayerGR2Gray
kColorBayerBG2Gray = _pyaqcv.kColorBayerBG2Gray
kColorBayerGB2Gray = _pyaqcv.kColorBayerGB2Gray
kColorBayerRG2BGR_VNG = _pyaqcv.kColorBayerRG2BGR_VNG
kColorBayerGR2BGR_VNG = _pyaqcv.kColorBayerGR2BGR_VNG
kColorBayerBG2BGR_VNG = _pyaqcv.kColorBayerBG2BGR_VNG
kColorBayerGB2BGR_VNG = _pyaqcv.kColorBayerGB2BGR_VNG
kColorBayerBG2RGB_VNG = _pyaqcv.kColorBayerBG2RGB_VNG
kColorBayerGB2RGB_VNG = _pyaqcv.kColorBayerGB2RGB_VNG
kColorBayerRG2RGB_VNG = _pyaqcv.kColorBayerRG2RGB_VNG
kColorBayerGR2RGB_VNG = _pyaqcv.kColorBayerGR2RGB_VNG
kColorBayerRG2BGR_EA = _pyaqcv.kColorBayerRG2BGR_EA
kColorBayerGR2BGR_EA = _pyaqcv.kColorBayerGR2BGR_EA
kColorBayerBG2BGR_EA = _pyaqcv.kColorBayerBG2BGR_EA
kColorBayerGB2BGR_EA = _pyaqcv.kColorBayerGB2BGR_EA
kColorBayerBG2RGB_EA = _pyaqcv.kColorBayerBG2RGB_EA
kColorBayerGB2RGB_EA = _pyaqcv.kColorBayerGB2RGB_EA
kColorBayerRG2RGB_EA = _pyaqcv.kColorBayerRG2RGB_EA
kColorBayerGR2RGB_EA = _pyaqcv.kColorBayerGR2RGB_EA
kColorBayerRG2BGRA = _pyaqcv.kColorBayerRG2BGRA
kColorBayerGR2BGRA = _pyaqcv.kColorBayerGR2BGRA
kColorBayerBG2BGRA = _pyaqcv.kColorBayerBG2BGRA
kColorBayerGB2BGRA = _pyaqcv.kColorBayerGB2BGRA
kColorBayerBG2RGBA = _pyaqcv.kColorBayerBG2RGBA
kColorBayerGB2RGBA = _pyaqcv.kColorBayerGB2RGBA
kColorBayerRG2RGBA = _pyaqcv.kColorBayerRG2RGBA
kColorBayerGR2RGBA = _pyaqcv.kColorBayerGR2RGBA
kColorColorCvtMax = _pyaqcv.kColorColorCvtMax

def cvt_color(*args):
    return _pyaqcv.cvt_color(*args)

def corner_sub_pix(*args):
    return _pyaqcv.corner_sub_pix(*args)

def get_rect_sub_pix(image, patch_size, center, patch, patch_type=-1):
    return _pyaqcv.get_rect_sub_pix(image, patch_size, center, patch, patch_type)

def integral(*args):
    return _pyaqcv.integral(*args)
kFloodfillFixedRange = _pyaqcv.kFloodfillFixedRange
kFloodfillMaskOnly = _pyaqcv.kFloodfillMaskOnly

def flood_fill(*args):
    return _pyaqcv.flood_fill(*args)

def demosaicing(src, dst, code, dst_cn=0):
    return _pyaqcv.demosaicing(src, dst, code, dst_cn)
kTMSqDiff = _pyaqcv.kTMSqDiff
kTMSqDiffNormed = _pyaqcv.kTMSqDiffNormed
kTMCCorr = _pyaqcv.kTMCCorr
kTMCCorrNormed = _pyaqcv.kTMCCorrNormed
kTMCCoeff = _pyaqcv.kTMCCoeff
kTMCCoeffNormed = _pyaqcv.kTMCCoeffNormed

def match_template(*args):
    return _pyaqcv.match_template(*args)
kCCStatLeft = _pyaqcv.kCCStatLeft
kCCStatTop = _pyaqcv.kCCStatTop
kCCStatWidth = _pyaqcv.kCCStatWidth
kCCStatHeight = _pyaqcv.kCCStatHeight
kCCStatAera = _pyaqcv.kCCStatAera
kCCStatMax = _pyaqcv.kCCStatMax
kCCLDefault = _pyaqcv.kCCLDefault
kCCLWu = _pyaqcv.kCCLWu
kCCLGrana = _pyaqcv.kCCLGrana
kCCLBolelli = _pyaqcv.kCCLBolelli
kCCLSauf = _pyaqcv.kCCLSauf
kCCLBbdt = _pyaqcv.kCCLBbdt
kCCLSpaghetti = _pyaqcv.kCCLSpaghetti

def connected_components(*args):
    return _pyaqcv.connected_components(*args)

def connected_components_with_stats(*args):
    return _pyaqcv.connected_components_with_stats(*args)
kRetrievalExternal = _pyaqcv.kRetrievalExternal
kRetrievalList = _pyaqcv.kRetrievalList
kRetrievalConnectedComponent = _pyaqcv.kRetrievalConnectedComponent
kRetrievalTree = _pyaqcv.kRetrievalTree
kRetrievalFloodfill = _pyaqcv.kRetrievalFloodfill
kChainApproxNone = _pyaqcv.kChainApproxNone
kChainApproxSimple = _pyaqcv.kChainApproxSimple
kChainApproxTC89L1 = _pyaqcv.kChainApproxTC89L1
kChainApproxTC89Kcos = _pyaqcv.kChainApproxTC89Kcos

def find_contours(*args):
    return _pyaqcv.find_contours(*args)

def approx_poly_dp(*args):
    return _pyaqcv.approx_poly_dp(*args)

def arc_length(*args):
    return _pyaqcv.arc_length(*args)

def bounding_rect(array):
    return _pyaqcv.bounding_rect(array)

def contour_area(contour, oriented=False):
    return _pyaqcv.contour_area(contour, oriented)

def min_enclosing_circle(*args):
    return _pyaqcv.min_enclosing_circle(*args)

def max_inscribed_circle(*args):
    return _pyaqcv.max_inscribed_circle(*args)

def circularity(region):
    return _pyaqcv.circularity(region)

def circularity_geom(geom):
    return _pyaqcv.circularity_geom(geom)

def roundness(region, distance, sigma, round, sides):
    return _pyaqcv.roundness(region, distance, sigma, round, sides)

def convexity(region):
    return _pyaqcv.convexity(region)

def compactness(region):
    return _pyaqcv.compactness(region)

def orientation(region, res):
    return _pyaqcv.orientation(region, res)

def rectangularity(region):
    return _pyaqcv.rectangularity(region)

def points_convex_hull(points, hull, clockwise=False, return_points=True):
    return _pyaqcv.points_convex_hull(points, hull, clockwise, return_points)

def point_polygon_test(contour, pt, measure_dist):
    return _pyaqcv.point_polygon_test(contour, pt, measure_dist)

def moments(*args):
    return _pyaqcv.moments(*args)
kLeastSquare = _pyaqcv.kLeastSquare
kHuber = _pyaqcv.kHuber
kTukey = _pyaqcv.kTukey

def fit_line(*args):
    return _pyaqcv.fit_line(*args)

def fit_circle(*args):
    return _pyaqcv.fit_circle(*args)

def fit_ellipse(*args):
    return _pyaqcv.fit_ellipse(*args)
class LineFitModel(FitModelBase):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pyaqcv.LineFitModel_swiginit(self, _pyaqcv.new_LineFitModel())

    def get_min_sample_num(self):
        return _pyaqcv.LineFitModel_get_min_sample_num(self)

    def set_fit_mode(self, fit_mode):
        return _pyaqcv.LineFitModel_set_fit_mode(self, fit_mode)

    def get_fit_mode(self):
        return _pyaqcv.LineFitModel_get_fit_mode(self)

    def set_clip_factor(self, factor):
        return _pyaqcv.LineFitModel_set_clip_factor(self, factor)

    def get_clip_factor(self):
        return _pyaqcv.LineFitModel_get_clip_factor(self)

    def init_model(self, pts_mat, idxs):
        return _pyaqcv.LineFitModel_init_model(self, pts_mat, idxs)

    def fit(self, *args):
        return _pyaqcv.LineFitModel_fit(self, *args)

    def distance(self, *args):
        return _pyaqcv.LineFitModel_distance(self, *args)

    def get_result(self):
        return _pyaqcv.LineFitModel_get_result(self)

    def get_line_pt(self):
        return _pyaqcv.LineFitModel_get_line_pt(self)

    def get_line_vector(self):
        return _pyaqcv.LineFitModel_get_line_vector(self)

    def get_clipped_segment(self):
        return _pyaqcv.LineFitModel_get_clipped_segment(self)
    __swig_destroy__ = _pyaqcv.delete_LineFitModel

# Register LineFitModel in _pyaqcv:
_pyaqcv.LineFitModel_swigregister(LineFitModel)

class CircleFitModel(FitModelBase):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pyaqcv.CircleFitModel_swiginit(self, _pyaqcv.new_CircleFitModel())

    def get_min_sample_num(self):
        return _pyaqcv.CircleFitModel_get_min_sample_num(self)

    def set_fit_mode(self, fit_mode):
        return _pyaqcv.CircleFitModel_set_fit_mode(self, fit_mode)

    def get_fit_mode(self):
        return _pyaqcv.CircleFitModel_get_fit_mode(self)

    def set_clip_factor(self, factor):
        return _pyaqcv.CircleFitModel_set_clip_factor(self, factor)

    def get_clip_factor(self):
        return _pyaqcv.CircleFitModel_get_clip_factor(self)

    def init_model(self, pts_mat, idxs):
        return _pyaqcv.CircleFitModel_init_model(self, pts_mat, idxs)

    def fit(self, *args):
        return _pyaqcv.CircleFitModel_fit(self, *args)

    def distance(self, *args):
        return _pyaqcv.CircleFitModel_distance(self, *args)

    def get_result(self):
        return _pyaqcv.CircleFitModel_get_result(self)
    __swig_destroy__ = _pyaqcv.delete_CircleFitModel

# Register CircleFitModel in _pyaqcv:
_pyaqcv.CircleFitModel_swigregister(CircleFitModel)

class EllipseFitModel(FitModelBase):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pyaqcv.EllipseFitModel_swiginit(self, _pyaqcv.new_EllipseFitModel())

    def get_min_sample_num(self):
        return _pyaqcv.EllipseFitModel_get_min_sample_num(self)

    def set_fit_mode(self, fit_mode):
        return _pyaqcv.EllipseFitModel_set_fit_mode(self, fit_mode)

    def get_fit_mode(self):
        return _pyaqcv.EllipseFitModel_get_fit_mode(self)

    def set_clip_factor(self, factor):
        return _pyaqcv.EllipseFitModel_set_clip_factor(self, factor)

    def get_clip_factor(self):
        return _pyaqcv.EllipseFitModel_get_clip_factor(self)

    def init_model(self, pts_mat, idxs):
        return _pyaqcv.EllipseFitModel_init_model(self, pts_mat, idxs)

    def fit(self, *args):
        return _pyaqcv.EllipseFitModel_fit(self, *args)

    def distance(self, *args):
        return _pyaqcv.EllipseFitModel_distance(self, *args)

    def get_ellipse(self):
        return _pyaqcv.EllipseFitModel_get_ellipse(self)

    def get_result(self):
        return _pyaqcv.EllipseFitModel_get_result(self)
    __swig_destroy__ = _pyaqcv.delete_EllipseFitModel

# Register EllipseFitModel in _pyaqcv:
_pyaqcv.EllipseFitModel_swigregister(EllipseFitModel)

kFilled = _pyaqcv.kFilled
kLine4 = _pyaqcv.kLine4
kLine8 = _pyaqcv.kLine8
kLineAA = _pyaqcv.kLineAA
kMarkerCircle = _pyaqcv.kMarkerCircle
kMarkerCross = _pyaqcv.kMarkerCross
kMarkerTiltedCross = _pyaqcv.kMarkerTiltedCross
kMarkerStar = _pyaqcv.kMarkerStar
kMarkerDiamond = _pyaqcv.kMarkerDiamond
kMarkerSquare = _pyaqcv.kMarkerSquare
kMarkerTriangleUp = _pyaqcv.kMarkerTriangleUp
kMarkerTriangleDown = _pyaqcv.kMarkerTriangleDown
kFontHersheySimplex = _pyaqcv.kFontHersheySimplex
kFontHersheyPlain = _pyaqcv.kFontHersheyPlain
kFontHersheyDuplex = _pyaqcv.kFontHersheyDuplex
kFontHersheyComplex = _pyaqcv.kFontHersheyComplex
kFontHersheyTriplex = _pyaqcv.kFontHersheyTriplex
kFontHersheyComplexSmall = _pyaqcv.kFontHersheyComplexSmall
kFontHersheyScriptSimplex = _pyaqcv.kFontHersheyScriptSimplex
kFontHersheyScriptComplex = _pyaqcv.kFontHersheyScriptComplex
kFontItalic = _pyaqcv.kFontItalic

def draw(*args):
    return _pyaqcv.draw(*args)

def draw_utf8(*args):
    return _pyaqcv.draw_utf8(*args)

def draw_ellipse(*args):
    return _pyaqcv.draw_ellipse(*args)

def draw_marker(*args):
    return _pyaqcv.draw_marker(*args)
kDistortionGrid = _pyaqcv.kDistortionGrid
kDistortionStretch = _pyaqcv.kDistortionStretch

def get_distortion_grids(*args):
    return _pyaqcv.get_distortion_grids(*args)

def image_distortion(*args):
    return _pyaqcv.image_distortion(*args)

def region_distortion(*args):
    return _pyaqcv.region_distortion(*args)

def polygon_distortion(*args):
    return _pyaqcv.polygon_distortion(*args)

def point_distortion(*args):
    return _pyaqcv.point_distortion(*args)
class ImgEnhancementLEPParam(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    kClipByCDFRate = _pyaqcv.ImgEnhancementLEPParam_kClipByCDFRate
    kClipByFullScaleRate = _pyaqcv.ImgEnhancementLEPParam_kClipByFullScaleRate

    def __init__(self):
        _pyaqcv.ImgEnhancementLEPParam_swiginit(self, _pyaqcv.new_ImgEnhancementLEPParam())

    def set_detail_feat_size(self, val):
        return _pyaqcv.ImgEnhancementLEPParam_set_detail_feat_size(self, val)

    def get_detail_feat_size(self):
        return _pyaqcv.ImgEnhancementLEPParam_get_detail_feat_size(self)

    def set_rough_feat_size(self, val):
        return _pyaqcv.ImgEnhancementLEPParam_set_rough_feat_size(self, val)

    def get_rough_feat_size(self):
        return _pyaqcv.ImgEnhancementLEPParam_get_rough_feat_size(self)

    def set_detail_enhance_scale(self, val):
        return _pyaqcv.ImgEnhancementLEPParam_set_detail_enhance_scale(self, val)

    def get_detail_enhance_scale(self):
        return _pyaqcv.ImgEnhancementLEPParam_get_detail_enhance_scale(self)

    def set_rough_enhance_scale(self, val):
        return _pyaqcv.ImgEnhancementLEPParam_set_rough_enhance_scale(self, val)

    def get_rough_enhance_scale(self):
        return _pyaqcv.ImgEnhancementLEPParam_get_rough_enhance_scale(self)

    def set_base_keep_rate(self, val):
        return _pyaqcv.ImgEnhancementLEPParam_set_base_keep_rate(self, val)

    def get_base_keep_rate(self):
        return _pyaqcv.ImgEnhancementLEPParam_get_base_keep_rate(self)

    def set_clip_type(self, clip_type):
        return _pyaqcv.ImgEnhancementLEPParam_set_clip_type(self, clip_type)

    def get_clip_type(self):
        return _pyaqcv.ImgEnhancementLEPParam_get_clip_type(self)

    def set_cdf_keep_rate(self, lower_bound, upper_bound):
        return _pyaqcv.ImgEnhancementLEPParam_set_cdf_keep_rate(self, lower_bound, upper_bound)

    def get_cdf_keep_rate(self, lower_bound, upper_bound):
        return _pyaqcv.ImgEnhancementLEPParam_get_cdf_keep_rate(self, lower_bound, upper_bound)

    def set_fs_keep_rate(self, lower_bound, upper_bound):
        return _pyaqcv.ImgEnhancementLEPParam_set_fs_keep_rate(self, lower_bound, upper_bound)

    def get_fs_keep_rate(self, lower_bound, upper_bound):
        return _pyaqcv.ImgEnhancementLEPParam_get_fs_keep_rate(self, lower_bound, upper_bound)
    __swig_destroy__ = _pyaqcv.delete_ImgEnhancementLEPParam

# Register ImgEnhancementLEPParam in _pyaqcv:
_pyaqcv.ImgEnhancementLEPParam_swigregister(ImgEnhancementLEPParam)


def img_enhancement_LEP(src, dst, param):
    return _pyaqcv.img_enhancement_LEP(src, dst, param)

def illumination_correction(*args):
    return _pyaqcv.illumination_correction(*args)

def contrast_enhance(src, dst, ratio, threshold):
    return _pyaqcv.contrast_enhance(src, dst, ratio, threshold)

def gamma_transform(src, dst, gamma, alpha, beta):
    return _pyaqcv.gamma_transform(src, dst, gamma, alpha, beta)

def emphasize(src, dst, filter_size, factor):
    return _pyaqcv.emphasize(src, dst, filter_size, factor)

def max_area_inner_rect(*args):
    return _pyaqcv.max_area_inner_rect(*args)

def inter_between_arcs(arc1, arc2, intersect_pts):
    return _pyaqcv.inter_between_arcs(arc1, arc2, intersect_pts)
kTileOrderVertical = _pyaqcv.kTileOrderVertical
kTileOrderHorizontal = _pyaqcv.kTileOrderHorizontal

def tile_images(*args):
    return _pyaqcv.tile_images(*args)

def scale_image(src, dst, alpha, beta):
    return _pyaqcv.scale_image(src, dst, alpha, beta)

def get_text_size(*args):
    return _pyaqcv.get_text_size(*args)

def get_text_size_utf8(*args):
    return _pyaqcv.get_text_size_utf8(*args)

def complement_ring(*args):
    return _pyaqcv.complement_ring(*args)

def convert_to_connected(*args):
    return _pyaqcv.convert_to_connected(*args)

def convert_to_multipolygon(*args):
    return _pyaqcv.convert_to_multipolygon(*args)
kSortGeomMassCenter = _pyaqcv.kSortGeomMassCenter
kSortGeomYminXmin = _pyaqcv.kSortGeomYminXmin
kSortGeomYmaxXmax = _pyaqcv.kSortGeomYmaxXmax
kSortGeomBBoxCenter = _pyaqcv.kSortGeomBBoxCenter
kSortGeomBBoxYminXmin = _pyaqcv.kSortGeomBBoxYminXmin
kSortGeomBBoxYminXmax = _pyaqcv.kSortGeomBBoxYminXmax
kSortGeomBBoxYmaxXmin = _pyaqcv.kSortGeomBBoxYmaxXmin
kSortGeomBBoxYmaxXmax = _pyaqcv.kSortGeomBBoxYmaxXmax

def sort_geometry(*args):
    return _pyaqcv.sort_geometry(*args)

def clip_line_to_segment(*args):
    return _pyaqcv.clip_line_to_segment(*args)

def pose2d_compose(left, right, res):
    return _pyaqcv.pose2d_compose(left, right, res)

def pose2d_invert(src, res):
    return _pyaqcv.pose2d_invert(src, res)

def pose2d_reflect(src, p1, p2, res):
    return _pyaqcv.pose2d_reflect(src, p1, p2, res)

def pose2d_reflect_local(src, p, res):
    return _pyaqcv.pose2d_reflect_local(src, p, res)

def pose2d_rotate(src, center, angle, res):
    return _pyaqcv.pose2d_rotate(src, center, angle, res)

def pose2d_rotate_local(src, angle, res):
    return _pyaqcv.pose2d_rotate_local(src, angle, res)

def pose2d_scale(src, center, sx, sy, res):
    return _pyaqcv.pose2d_scale(src, center, sx, sy, res)

def pose2d_scale_local(src, sx, sy, res):
    return _pyaqcv.pose2d_scale_local(src, sx, sy, res)

def pose2d_slant(src, center, angle_x, angle_y, res):
    return _pyaqcv.pose2d_slant(src, center, angle_x, angle_y, res)

def pose2d_slant_local(src, angle_x, angle_y, res):
    return _pyaqcv.pose2d_slant_local(src, angle_x, angle_y, res)

def pose2d_translate(src, tx, ty, res):
    return _pyaqcv.pose2d_translate(src, tx, ty, res)

def pose2d_translate_local(src, tx, ty, res):
    return _pyaqcv.pose2d_translate_local(src, tx, ty, res)
class Region(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _pyaqcv.delete_Region

    def __init__(self, *args):
        _pyaqcv.Region_swiginit(self, _pyaqcv.new_Region(*args))

    def empty(self):
        return _pyaqcv.Region_empty(self)

    def size(self):
        return _pyaqcv.Region_size(self)

    def get_region(self, index):
        return _pyaqcv.Region_get_region(self, index)

    def concat(self, rhs):
        return _pyaqcv.Region_concat(self, rhs)

    def label(self):
        return _pyaqcv.Region_label(self)

    def get_region_runs(self, row, col_begin, col_end):
        return _pyaqcv.Region_get_region_runs(self, row, col_begin, col_end)

    def to_mat(self, *args):
        return _pyaqcv.Region_to_mat(self, *args)

    def dilation_rectangle(self, ksize):
        return _pyaqcv.Region_dilation_rectangle(self, ksize)

    def dilation_circle(self, radius):
        return _pyaqcv.Region_dilation_circle(self, radius)

    def erosion_rectangle(self, ksize):
        return _pyaqcv.Region_erosion_rectangle(self, ksize)

    def erosion_circle(self, radius):
        return _pyaqcv.Region_erosion_circle(self, radius)

    def opening_rectangle(self, ksize):
        return _pyaqcv.Region_opening_rectangle(self, ksize)

    def opening_circle(self, radius):
        return _pyaqcv.Region_opening_circle(self, radius)

    def closing_rectangle(self, ksize):
        return _pyaqcv.Region_closing_rectangle(self, ksize)

    def closing_circle(self, radius):
        return _pyaqcv.Region_closing_circle(self, radius)
    kRegionMorphErode = _pyaqcv.Region_kRegionMorphErode
    kRegionMorphDilate = _pyaqcv.Region_kRegionMorphDilate
    kRegionMorphOpen = _pyaqcv.Region_kRegionMorphOpen
    kRegionMorphClose = _pyaqcv.Region_kRegionMorphClose
    kMorphRect = _pyaqcv.Region_kMorphRect
    kMorphCircle = _pyaqcv.Region_kMorphCircle

    def morphology(self, *args):
        return _pyaqcv.Region_morphology(self, *args)

    def intersection(self, rhs):
        return _pyaqcv.Region_intersection(self, rhs)

    def union2(self, rhs):
        return _pyaqcv.Region_union2(self, rhs)

    def union_all(self):
        return _pyaqcv.Region_union_all(self)

    def complement(self, *args):
        return _pyaqcv.Region_complement(self, *args)

    def difference(self, rhs):
        return _pyaqcv.Region_difference(self, rhs)

    def symm_difference(self, rhs):
        return _pyaqcv.Region_symm_difference(self, rhs)
    kSingleWholeImageRegion = _pyaqcv.Region_kSingleWholeImageRegion
    kForegroundOnly = _pyaqcv.Region_kForegroundOnly
    kAllRegions = _pyaqcv.Region_kAllRegions
    kRegionAndHole = _pyaqcv.Region_kRegionAndHole

    def connection(self, *args):
        return _pyaqcv.Region_connection(self, *args)

    def fill_up(self, *args):
        return _pyaqcv.Region_fill_up(self, *args)

    def area(self):
        return _pyaqcv.Region_area(self)

    def mass_center(self):
        return _pyaqcv.Region_mass_center(self)

    def geom_center(self):
        return _pyaqcv.Region_geom_center(self)

    def x_second_moment(self):
        return _pyaqcv.Region_x_second_moment(self)

    def y_second_moment(self):
        return _pyaqcv.Region_y_second_moment(self)

    def orientation(self):
        return _pyaqcv.Region_orientation(self)

    def circularity(self):
        return _pyaqcv.Region_circularity(self)

    def roundness(self):
        return _pyaqcv.Region_roundness(self)

    def convexity(self):
        return _pyaqcv.Region_convexity(self)

    def compactness(self):
        return _pyaqcv.Region_compactness(self)

    def rectangularity(self):
        return _pyaqcv.Region_rectangularity(self)

    def cover_point(self, point):
        return _pyaqcv.Region_cover_point(self, point)

    def transform_translate(self, dx, dy):
        return _pyaqcv.Region_transform_translate(self, dx, dy)

    def find_contours(self, include_inners=True, pixel_edge_boundary=False):
        return _pyaqcv.Region_find_contours(self, include_inners, pixel_edge_boundary)

    def bounding_box(self):
        return _pyaqcv.Region_bounding_box(self)

    def min_area_rect(self):
        return _pyaqcv.Region_min_area_rect(self)

    def inner_rectangle(self):
        return _pyaqcv.Region_inner_rectangle(self)

    def bounding_circle(self):
        return _pyaqcv.Region_bounding_circle(self)

    def inner_circle(self):
        return _pyaqcv.Region_inner_circle(self)

    def elliptic_axis(self):
        return _pyaqcv.Region_elliptic_axis(self)

    def convex_hull(self):
        return _pyaqcv.Region_convex_hull(self)
    kMaxArea = _pyaqcv.Region_kMaxArea
    kLabel = _pyaqcv.Region_kLabel
    kArea = _pyaqcv.Region_kArea
    kRow = _pyaqcv.Region_kRow
    kColumn = _pyaqcv.Region_kColumn
    kWidth = _pyaqcv.Region_kWidth
    kHeight = _pyaqcv.Region_kHeight
    kRow1 = _pyaqcv.Region_kRow1
    kColumn1 = _pyaqcv.Region_kColumn1
    kRow2 = _pyaqcv.Region_kRow2
    kColumn2 = _pyaqcv.Region_kColumn2
    kCircularity = _pyaqcv.Region_kCircularity
    kCompactness = _pyaqcv.Region_kCompactness
    kBoundaryLength = _pyaqcv.Region_kBoundaryLength
    kConvexity = _pyaqcv.Region_kConvexity
    kRectangularity = _pyaqcv.Region_kRectangularity
    kOuterRadius = _pyaqcv.Region_kOuterRadius
    kInnerRadius = _pyaqcv.Region_kInnerRadius
    kInnerWidth = _pyaqcv.Region_kInnerWidth
    kInnerHeight = _pyaqcv.Region_kInnerHeight
    kRoundness = _pyaqcv.Region_kRoundness
    kConnectNum = _pyaqcv.Region_kConnectNum
    kHolesNum = _pyaqcv.Region_kHolesNum
    kOrientation = _pyaqcv.Region_kOrientation
    kMassCenterRow = _pyaqcv.Region_kMassCenterRow
    kMassCenterColumn = _pyaqcv.Region_kMassCenterColumn
    kMinAreaRectLongSide = _pyaqcv.Region_kMinAreaRectLongSide
    kMinAreaRectShortSide = _pyaqcv.Region_kMinAreaRectShortSide
    kMinAreaRectCenterRow = _pyaqcv.Region_kMinAreaRectCenterRow
    kMinAreaRectCenterColumn = _pyaqcv.Region_kMinAreaRectCenterColumn
    kMinAreaRectAngle = _pyaqcv.Region_kMinAreaRectAngle
    kMomentX2nd = _pyaqcv.Region_kMomentX2nd
    kMomentY2nd = _pyaqcv.Region_kMomentY2nd

    def region_features(self, type):
        return _pyaqcv.Region_region_features(self, type)
    kAnd = _pyaqcv.Region_kAnd
    kOr = _pyaqcv.Region_kOr

    def select_shape(self, *args):
        return _pyaqcv.Region_select_shape(self, *args)
    kConvex = _pyaqcv.Region_kConvex
    kEllipse = _pyaqcv.Region_kEllipse
    kOuterCircle = _pyaqcv.Region_kOuterCircle
    kInnerCircle = _pyaqcv.Region_kInnerCircle
    kBoundingBox = _pyaqcv.Region_kBoundingBox
    kMinAreaRect = _pyaqcv.Region_kMinAreaRect
    kInnerRectangle = _pyaqcv.Region_kInnerRectangle

    def shape_transform(self, type):
        return _pyaqcv.Region_shape_transform(self, type)
    kFirstPoint = _pyaqcv.Region_kFirstPoint
    kLastPoint = _pyaqcv.Region_kLastPoint
    kLowerLeft = _pyaqcv.Region_kLowerLeft
    kLowerRight = _pyaqcv.Region_kLowerRight
    kUpperLeft = _pyaqcv.Region_kUpperLeft
    kUpperRight = _pyaqcv.Region_kUpperRight
    kCharacter = _pyaqcv.Region_kCharacter

    def sort_region(self, mode, axis=0, reverse=False, overlap=0.15):
        return _pyaqcv.Region_sort_region(self, mode, axis, reverse, overlap)

    def min_max_gray(self, img, min, max):
        return _pyaqcv.Region_min_max_gray(self, img, min, max)

    def mean_gray(self, img, mean):
        return _pyaqcv.Region_mean_gray(self, img, mean)

    def mean_std_dev_gray(self, img, mean, std_dev):
        return _pyaqcv.Region_mean_std_dev_gray(self, img, mean, std_dev)

# Register Region in _pyaqcv:
_pyaqcv.Region_swigregister(Region)

class PhotometricStero(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pyaqcv.PhotometricStero_swiginit(self, _pyaqcv.new_PhotometricStero())
    __swig_destroy__ = _pyaqcv.delete_PhotometricStero
    all_type = _pyaqcv.PhotometricStero_all_type
    albedo_type = _pyaqcv.PhotometricStero_albedo_type
    normal_type = _pyaqcv.PhotometricStero_normal_type
    gradient_type = _pyaqcv.PhotometricStero_gradient_type
    normalized_gradient_type = _pyaqcv.PhotometricStero_normalized_gradient_type
    height_type = _pyaqcv.PhotometricStero_height_type
    mean_shape_type = _pyaqcv.PhotometricStero_mean_shape_type
    gauss_shape_type = _pyaqcv.PhotometricStero_gauss_shape_type

    def photometric_stereo(self, *args):
        return _pyaqcv.PhotometricStero_photometric_stereo(self, *args)

    def get_albedo(self, visual=False):
        return _pyaqcv.PhotometricStero_get_albedo(self, visual)

    def get_normal(self, visual=False):
        return _pyaqcv.PhotometricStero_get_normal(self, visual)

    def get_gradient(self):
        return _pyaqcv.PhotometricStero_get_gradient(self)

    def get_normalized_gradient(self):
        return _pyaqcv.PhotometricStero_get_normalized_gradient(self)

    def get_mean_shape(self, visual=False, sigma=1):
        return _pyaqcv.PhotometricStero_get_mean_shape(self, visual, sigma)

    def get_gauss_shape(self, visual=False, sigma=1):
        return _pyaqcv.PhotometricStero_get_gauss_shape(self, visual, sigma)

    def get_height(self, visual=False):
        return _pyaqcv.PhotometricStero_get_height(self, visual)

    def set_precision(self, precision):
        return _pyaqcv.PhotometricStero_set_precision(self, precision)

    def get_precision(self):
        return _pyaqcv.PhotometricStero_get_precision(self)

# Register PhotometricStero in _pyaqcv:
_pyaqcv.PhotometricStero_swigregister(PhotometricStero)

class PhotometricSteroCalib(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pyaqcv.PhotometricSteroCalib_swiginit(self, _pyaqcv.new_PhotometricSteroCalib())
    __swig_destroy__ = _pyaqcv.delete_PhotometricSteroCalib

    def calibration(self, images, tilts, slants, threshold=170):
        return _pyaqcv.PhotometricSteroCalib_calibration(self, images, tilts, slants, threshold)

    def set_find_sphere_model(self, auto_find, threshold=40):
        return _pyaqcv.PhotometricSteroCalib_set_find_sphere_model(self, auto_find, threshold)

    def get_find_sphere_model(self):
        return _pyaqcv.PhotometricSteroCalib_get_find_sphere_model(self)

    def set_sphere_position(self, center, radius):
        return _pyaqcv.PhotometricSteroCalib_set_sphere_position(self, center, radius)

    def get_sphere_position(self, center, radius):
        return _pyaqcv.PhotometricSteroCalib_get_sphere_position(self, center, radius)

# Register PhotometricSteroCalib in _pyaqcv:
_pyaqcv.PhotometricSteroCalib_swigregister(PhotometricSteroCalib)

class Pose3DBase(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    Pose3DType_kPoseRTMatrix = _pyaqcv.Pose3DBase_Pose3DType_kPoseRTMatrix
    Pose3DType_kPoseAngleAxis = _pyaqcv.Pose3DBase_Pose3DType_kPoseAngleAxis
    Pose3DType_kPoseQuad = _pyaqcv.Pose3DBase_Pose3DType_kPoseQuad
    __swig_destroy__ = _pyaqcv.delete_Pose3DBase

    def get_rt_matrix(self):
        return _pyaqcv.Pose3DBase_get_rt_matrix(self)

# Register Pose3DBase in _pyaqcv:
_pyaqcv.Pose3DBase_swigregister(Pose3DBase)

class Pose3DRT(Pose3DBase):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _pyaqcv.Pose3DRT_swiginit(self, _pyaqcv.new_Pose3DRT(*args))
    __swig_destroy__ = _pyaqcv.delete_Pose3DRT

    def get_rt_matrix(self):
        return _pyaqcv.Pose3DRT_get_rt_matrix(self)

    def get_rotation(self):
        return _pyaqcv.Pose3DRT_get_rotation(self)

    def get_translation(self):
        return _pyaqcv.Pose3DRT_get_translation(self)

    def return_invert(self):
        return _pyaqcv.Pose3DRT_return_invert(self)

    def return_compose_with(self, pose_B):
        return _pyaqcv.Pose3DRT_return_compose_with(self, pose_B)

    def invert(self):
        return _pyaqcv.Pose3DRT_invert(self)

    def set_rotation(self, R):
        return _pyaqcv.Pose3DRT_set_rotation(self, R)

    def set_translation_mat(self, T):
        return _pyaqcv.Pose3DRT_set_translation_mat(self, T)

    def set_translation(self, tx, ty, tz):
        return _pyaqcv.Pose3DRT_set_translation(self, tx, ty, tz)

    def transform(self, pose_B):
        return _pyaqcv.Pose3DRT_transform(self, pose_B)

    def rotate(self, *args):
        return _pyaqcv.Pose3DRT_rotate(self, *args)

    def translate(self, *args):
        return _pyaqcv.Pose3DRT_translate(self, *args)

# Register Pose3DRT in _pyaqcv:
_pyaqcv.Pose3DRT_swigregister(Pose3DRT)

class CameraViewFeatures(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _pyaqcv.CameraViewFeatures_swiginit(self, _pyaqcv.new_CameraViewFeatures(*args))
    __swig_destroy__ = _pyaqcv.delete_CameraViewFeatures

    def is_valid(self):
        return _pyaqcv.CameraViewFeatures_is_valid(self)

    def get_image_pts(self):
        return _pyaqcv.CameraViewFeatures_get_image_pts(self)

    def get_indexs(self):
        return _pyaqcv.CameraViewFeatures_get_indexs(self)

    def get_features(self, img_points, obj_points, idx=None):
        return _pyaqcv.CameraViewFeatures_get_features(self, img_points, obj_points, idx)

    def estimate_pixel_scale(self):
        return _pyaqcv.CameraViewFeatures_estimate_pixel_scale(self)

# Register CameraViewFeatures in _pyaqcv:
_pyaqcv.CameraViewFeatures_swigregister(CameraViewFeatures)

class CalibBoardModel(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    kAQBoardRect = _pyaqcv.CalibBoardModel_kAQBoardRect
    kAQBoardThreeWhite = _pyaqcv.CalibBoardModel_kAQBoardThreeWhite
    kAQBoardThreeBig = _pyaqcv.CalibBoardModel_kAQBoardThreeBig
    kChessBoard = _pyaqcv.CalibBoardModel_kChessBoard
    kChessBoardWithOrigin = _pyaqcv.CalibBoardModel_kChessBoardWithOrigin
    kWhite = _pyaqcv.CalibBoardModel_kWhite
    kBlack = _pyaqcv.CalibBoardModel_kBlack

    def __init__(self, *args):
        _pyaqcv.CalibBoardModel_swiginit(self, _pyaqcv.new_CalibBoardModel(*args))
    __swig_destroy__ = _pyaqcv.delete_CalibBoardModel

    def detect(self, view_img, features):
        return _pyaqcv.CalibBoardModel_detect(self, view_img, features)

# Register CalibBoardModel in _pyaqcv:
_pyaqcv.CalibBoardModel_swigregister(CalibBoardModel)

class CameraIntrinParamNoneLinear(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _pyaqcv.delete_CameraIntrinParamNoneLinear

    def __init__(self, *args):
        _pyaqcv.CameraIntrinParamNoneLinear_swiginit(self, _pyaqcv.new_CameraIntrinParamNoneLinear(*args))

    def get_param(self, *args):
        return _pyaqcv.CameraIntrinParamNoneLinear_get_param(self, *args)

    def get_size(self, width, height):
        return _pyaqcv.CameraIntrinParamNoneLinear_get_size(self, width, height)

    def set_size(self, width, height):
        return _pyaqcv.CameraIntrinParamNoneLinear_set_size(self, width, height)

    def get_intrinsic(self):
        return _pyaqcv.CameraIntrinParamNoneLinear_get_intrinsic(self)

    def set_intrinsic(self, intr):
        return _pyaqcv.CameraIntrinParamNoneLinear_set_intrinsic(self, intr)

    def get_distoration(self):
        return _pyaqcv.CameraIntrinParamNoneLinear_get_distoration(self)

    def set_distoration(self, dist):
        return _pyaqcv.CameraIntrinParamNoneLinear_set_distoration(self, dist)

    def is_valid(self):
        return _pyaqcv.CameraIntrinParamNoneLinear_is_valid(self)

# Register CameraIntrinParamNoneLinear in _pyaqcv:
_pyaqcv.CameraIntrinParamNoneLinear_swigregister(CameraIntrinParamNoneLinear)

class CameraModel(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _pyaqcv.CameraModel_swiginit(self, _pyaqcv.new_CameraModel(*args))
    __swig_destroy__ = _pyaqcv.delete_CameraModel

    def set_camera_param(self, camera_param):
        return _pyaqcv.CameraModel_set_camera_param(self, camera_param)

    def get_camera_param(self, *args):
        return _pyaqcv.CameraModel_get_camera_param(self, *args)

    def set_camera_pose(self, camera_pose):
        return _pyaqcv.CameraModel_set_camera_pose(self, camera_pose)

    def get_camera_pose(self, *args):
        return _pyaqcv.CameraModel_get_camera_pose(self, *args)

    def compute_obj_pose(self, *args):
        return _pyaqcv.CameraModel_compute_obj_pose(self, *args)

    def is_valid(self):
        return _pyaqcv.CameraModel_is_valid(self)

    def image_points_to_world_plane(self, world_plane, img_pts, world_pts):
        return _pyaqcv.CameraModel_image_points_to_world_plane(self, world_plane, img_pts, world_pts)

    def world_plane_points_to_image(self, world_plane, world_pts, img_pts):
        return _pyaqcv.CameraModel_world_plane_points_to_image(self, world_plane, world_pts, img_pts)

    def image_to_world_plane(self, world_plane, img, world_image, scale, out_image_size):
        return _pyaqcv.CameraModel_image_to_world_plane(self, world_plane, img, world_image, scale, out_image_size)

# Register CameraModel in _pyaqcv:
_pyaqcv.CameraModel_swigregister(CameraModel)

class PointPairCameraModel(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    kTranslation = _pyaqcv.PointPairCameraModel_kTranslation
    kTranslationRotationScale = _pyaqcv.PointPairCameraModel_kTranslationRotationScale
    kAffine = _pyaqcv.PointPairCameraModel_kAffine
    kPerspective = _pyaqcv.PointPairCameraModel_kPerspective

    def __init__(self, *args):
        _pyaqcv.PointPairCameraModel_swiginit(self, _pyaqcv.new_PointPairCameraModel(*args))
    __swig_destroy__ = _pyaqcv.delete_PointPairCameraModel

    def set_model(self, matrix_33):
        return _pyaqcv.PointPairCameraModel_set_model(self, matrix_33)

    def set_calib_type(self, type):
        return _pyaqcv.PointPairCameraModel_set_calib_type(self, type)

    def get_calib_type(self):
        return _pyaqcv.PointPairCameraModel_get_calib_type(self)

    def get_model(self):
        return _pyaqcv.PointPairCameraModel_get_model(self)

    def calib(self, img_pts, world_pts, error):
        return _pyaqcv.PointPairCameraModel_calib(self, img_pts, world_pts, error)

    def image_points_to_world_plane(self, img_pts, world_pts):
        return _pyaqcv.PointPairCameraModel_image_points_to_world_plane(self, img_pts, world_pts)

    def world_plane_points_to_image(self, world_pts, img_pts):
        return _pyaqcv.PointPairCameraModel_world_plane_points_to_image(self, world_pts, img_pts)

    def image_to_world_plane(self, img, world_image, scale, out_image_size):
        return _pyaqcv.PointPairCameraModel_image_to_world_plane(self, img, world_image, scale, out_image_size)

# Register PointPairCameraModel in _pyaqcv:
_pyaqcv.PointPairCameraModel_swigregister(PointPairCameraModel)

class SingleCameraCalib(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, camera_model, fix_intrinsic):
        _pyaqcv.SingleCameraCalib_swiginit(self, _pyaqcv.new_SingleCameraCalib(camera_model, fix_intrinsic))
    __swig_destroy__ = _pyaqcv.delete_SingleCameraCalib

    def set_ignore_tangent_dist(self, ignore_tangent_dist):
        return _pyaqcv.SingleCameraCalib_set_ignore_tangent_dist(self, ignore_tangent_dist)

    def get_ignore_tangent_dist(self):
        return _pyaqcv.SingleCameraCalib_get_ignore_tangent_dist(self)

    def add_view_feature(self, view_idx, viewfeature):
        return _pyaqcv.SingleCameraCalib_add_view_feature(self, view_idx, viewfeature)

    def set_calibboard(self, board_info):
        return _pyaqcv.SingleCameraCalib_set_calibboard(self, board_info)

    def add_view_image(self, view_idx, img):
        return _pyaqcv.SingleCameraCalib_add_view_image(self, view_idx, img)

    def calibrate(self):
        return _pyaqcv.SingleCameraCalib_calibrate(self)

    def get_camera_model(self, *args):
        return _pyaqcv.SingleCameraCalib_get_camera_model(self, *args)

    def get_view_feature(self, view_idx, viewfeature):
        return _pyaqcv.SingleCameraCalib_get_view_feature(self, view_idx, viewfeature)

    def get_all_view_feature(self):
        return _pyaqcv.SingleCameraCalib_get_all_view_feature(self)

    def get_view_pose(self, id, pose):
        return _pyaqcv.SingleCameraCalib_get_view_pose(self, id, pose)

    def get_all_view_pose(self):
        return _pyaqcv.SingleCameraCalib_get_all_view_pose(self)

    def get_rms(self):
        return _pyaqcv.SingleCameraCalib_get_rms(self)

    def get_max_err(self):
        return _pyaqcv.SingleCameraCalib_get_max_err(self)

    def get_view_project_pts(self, id, proj_pts):
        return _pyaqcv.SingleCameraCalib_get_view_project_pts(self, id, proj_pts)

    def get_view_rms(self, id, rms_err):
        return _pyaqcv.SingleCameraCalib_get_view_rms(self, id, rms_err)

    def get_all_view_rms(self):
        return _pyaqcv.SingleCameraCalib_get_all_view_rms(self)

    def get_view_max_err(self, id, max_err):
        return _pyaqcv.SingleCameraCalib_get_view_max_err(self, id, max_err)

    def get_all_view_max_err(self):
        return _pyaqcv.SingleCameraCalib_get_all_view_max_err(self)

    def get_world_coordinate(self, id, cam_in_obj):
        return _pyaqcv.SingleCameraCalib_get_world_coordinate(self, id, cam_in_obj)

# Register SingleCameraCalib in _pyaqcv:
_pyaqcv.SingleCameraCalib_swigregister(SingleCameraCalib)

class MultiCamerasCalib(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, cameras, ref_cam_idx):
        _pyaqcv.MultiCamerasCalib_swiginit(self, _pyaqcv.new_MultiCamerasCalib(cameras, ref_cam_idx))
    __swig_destroy__ = _pyaqcv.delete_MultiCamerasCalib

    def set_calibboard(self, board_info):
        return _pyaqcv.MultiCamerasCalib_set_calibboard(self, board_info)

    def add_camera_view(self, *args):
        return _pyaqcv.MultiCamerasCalib_add_camera_view(self, *args)

    def calibrate(self):
        return _pyaqcv.MultiCamerasCalib_calibrate(self)

    def get_camera_model(self, cam_idx, camera_model):
        return _pyaqcv.MultiCamerasCalib_get_camera_model(self, cam_idx, camera_model)

    def get_all_camera_model(self):
        return _pyaqcv.MultiCamerasCalib_get_all_camera_model(self)

    def get_all_view_feature(self):
        return _pyaqcv.MultiCamerasCalib_get_all_view_feature(self)

    def get_pose_in_ref(self):
        return _pyaqcv.MultiCamerasCalib_get_pose_in_ref(self)

    def get_rms(self):
        return _pyaqcv.MultiCamerasCalib_get_rms(self)

    def get_max_err(self):
        return _pyaqcv.MultiCamerasCalib_get_max_err(self)

    def get_view_project_pts(self, id, proj_pts):
        return _pyaqcv.MultiCamerasCalib_get_view_project_pts(self, id, proj_pts)

    def get_view_rms(self, id, rms_err):
        return _pyaqcv.MultiCamerasCalib_get_view_rms(self, id, rms_err)

    def get_all_view_rms(self):
        return _pyaqcv.MultiCamerasCalib_get_all_view_rms(self)

    def get_view_max_err(self, id, max_err):
        return _pyaqcv.MultiCamerasCalib_get_view_max_err(self, id, max_err)

    def get_all_view_max_err(self):
        return _pyaqcv.MultiCamerasCalib_get_all_view_max_err(self)

# Register MultiCamerasCalib in _pyaqcv:
_pyaqcv.MultiCamerasCalib_swigregister(MultiCamerasCalib)

kNoHandEyeType = _pyaqcv.kNoHandEyeType
kIsEyeToHandSixAxisRobot = _pyaqcv.kIsEyeToHandSixAxisRobot
kIsEyeToHandFourAxisRobot = _pyaqcv.kIsEyeToHandFourAxisRobot
kIsEyeInHandSixAxisRobot = _pyaqcv.kIsEyeInHandSixAxisRobot
kIsEyeInHandFourAxisRobot = _pyaqcv.kIsEyeInHandFourAxisRobot
class HandEyeResult(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pyaqcv.HandEyeResult_swiginit(self, _pyaqcv.new_HandEyeResult())
    __swig_destroy__ = _pyaqcv.delete_HandEyeResult

    def is_valid(self):
        return _pyaqcv.HandEyeResult_is_valid(self)

    def get_xxx_in_camera(self):
        return _pyaqcv.HandEyeResult_get_xxx_in_camera(self)

    def get_obj_in_xxx(self):
        return _pyaqcv.HandEyeResult_get_obj_in_xxx(self)

    def get_mean_position_error(self):
        return _pyaqcv.HandEyeResult_get_mean_position_error(self)

    def get_mean_rotation_error(self):
        return _pyaqcv.HandEyeResult_get_mean_rotation_error(self)

    def get_max_position_error(self):
        return _pyaqcv.HandEyeResult_get_max_position_error(self)

    def get_max_rotation_error(self):
        return _pyaqcv.HandEyeResult_get_max_rotation_error(self)

    def get_handeye_type(self):
        return _pyaqcv.HandEyeResult_get_handeye_type(self)

    def get_delta_z(self):
        return _pyaqcv.HandEyeResult_get_delta_z(self)

# Register HandEyeResult in _pyaqcv:
_pyaqcv.HandEyeResult_swigregister(HandEyeResult)

class HandEyeCalib(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, handeye_type):
        _pyaqcv.HandEyeCalib_swiginit(self, _pyaqcv.new_HandEyeCalib(handeye_type))
    __swig_destroy__ = _pyaqcv.delete_HandEyeCalib

    def set_calibboard(self, calib_board):
        return _pyaqcv.HandEyeCalib_set_calibboard(self, calib_board)

    def add_robot_camera_data(self, *args):
        return _pyaqcv.HandEyeCalib_add_robot_camera_data(self, *args)

    def set_scara_fix_ambiguity_data_handtoeye(self, ref_camera_view_pose, ref_robot_pose):
        return _pyaqcv.HandEyeCalib_set_scara_fix_ambiguity_data_handtoeye(self, ref_camera_view_pose, ref_robot_pose)

    def set_scara_fix_ambiguity_data_handineye(self, ref_camera_view_pose, ref_robot_pose, origin_robot_pose):
        return _pyaqcv.HandEyeCalib_set_scara_fix_ambiguity_data_handineye(self, ref_camera_view_pose, ref_robot_pose, origin_robot_pose)

    def set_delta_z(self, delta_z):
        return _pyaqcv.HandEyeCalib_set_delta_z(self, delta_z)

    def calibrate(self):
        return _pyaqcv.HandEyeCalib_calibrate(self)

    def get_camera_view_pose(self, idx, camera_view_pose):
        return _pyaqcv.HandEyeCalib_get_camera_view_pose(self, idx, camera_view_pose)

    def get_all_camera_view_pose(self):
        return _pyaqcv.HandEyeCalib_get_all_camera_view_pose(self)

    def get_camera_model(self):
        return _pyaqcv.HandEyeCalib_get_camera_model(self)

    def get_handeye_result(self):
        return _pyaqcv.HandEyeCalib_get_handeye_result(self)

# Register HandEyeCalib in _pyaqcv:
_pyaqcv.HandEyeCalib_swigregister(HandEyeCalib)

class Blob(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pyaqcv.Blob_swiginit(self, _pyaqcv.new_Blob())
    __swig_destroy__ = _pyaqcv.delete_Blob

    def parent(self):
        return _pyaqcv.Blob_parent(self)

    def prev_sibling(self):
        return _pyaqcv.Blob_prev_sibling(self)

    def next_sibling(self):
        return _pyaqcv.Blob_next_sibling(self)

    def first_child(self):
        return _pyaqcv.Blob_first_child(self)

    def last_child(self):
        return _pyaqcv.Blob_last_child(self)

    def empty(self):
        return _pyaqcv.Blob_empty(self)

    def child_count(self):
        return _pyaqcv.Blob_child_count(self)

    def id(self):
        return _pyaqcv.Blob_id(self)

    def label(self):
        return _pyaqcv.Blob_label(self)

    def filtered(self):
        return _pyaqcv.Blob_filtered(self)

    def clipped(self):
        return _pyaqcv.Blob_clipped(self)

    def area(self):
        return _pyaqcv.Blob_area(self)

    def get_mass_center(self):
        return _pyaqcv.Blob_get_mass_center(self)

    def get_geom_center(self):
        return _pyaqcv.Blob_get_geom_center(self)

    def get_bbox(self):
        return _pyaqcv.Blob_get_bbox(self)

    def get_min_area_bbox(self):
        return _pyaqcv.Blob_get_min_area_bbox(self)

    def get_x_moment(self):
        return _pyaqcv.Blob_get_x_moment(self)

    def get_y_moment(self):
        return _pyaqcv.Blob_get_y_moment(self)

    def get_min_moment(self):
        return _pyaqcv.Blob_get_min_moment(self)

    def get_max_moment(self):
        return _pyaqcv.Blob_get_max_moment(self)

    def get_angle(self):
        return _pyaqcv.Blob_get_angle(self)

    def get_elongation(self):
        return _pyaqcv.Blob_get_elongation(self)

    def get_principal_bbox(self):
        return _pyaqcv.Blob_get_principal_bbox(self)

    def get_min_gray_val(self):
        return _pyaqcv.Blob_get_min_gray_val(self)

    def get_max_gray_val(self):
        return _pyaqcv.Blob_get_max_gray_val(self)

    def get_avg_gray_val(self):
        return _pyaqcv.Blob_get_avg_gray_val(self)

    def get_stddiv_gray_val(self):
        return _pyaqcv.Blob_get_stddiv_gray_val(self)

    def get_boundary_length(self):
        return _pyaqcv.Blob_get_boundary_length(self)

    def get_perimeter(self):
        return _pyaqcv.Blob_get_perimeter(self)

    def get_circularity(self):
        return _pyaqcv.Blob_get_circularity(self)

    def get_roundness(self):
        return _pyaqcv.Blob_get_roundness(self)

    def get_compactness(self):
        return _pyaqcv.Blob_get_compactness(self)

    def get_contour(self):
        return _pyaqcv.Blob_get_contour(self)

    def get_region(self):
        return _pyaqcv.Blob_get_region(self)

    def get_inner_points(self):
        return _pyaqcv.Blob_get_inner_points(self)

# Register Blob in _pyaqcv:
_pyaqcv.Blob_swigregister(Blob)

class BlobHierarchies(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _pyaqcv.delete_BlobHierarchies
    kWholeImageBlob = _pyaqcv.BlobHierarchies_kWholeImageBlob
    kGrayScale = _pyaqcv.BlobHierarchies_kGrayScale

    def connectivity_type(self):
        return _pyaqcv.BlobHierarchies_connectivity_type(self)

    def minimum_blob_area(self):
        return _pyaqcv.BlobHierarchies_minimum_blob_area(self)

    def first_top(self):
        return _pyaqcv.BlobHierarchies_first_top(self)

    def last_top(self):
        return _pyaqcv.BlobHierarchies_last_top(self)

    def get_blob(self, index):
        return _pyaqcv.BlobHierarchies_get_blob(self, index)

    def draw_blob(self, blob_img, index=0):
        return _pyaqcv.BlobHierarchies_draw_blob(self, blob_img, index)

    def blob_count(self):
        return _pyaqcv.BlobHierarchies_blob_count(self)

    def get_all_blobs(self):
        return _pyaqcv.BlobHierarchies_get_all_blobs(self)

    def get_contours(self):
        return _pyaqcv.BlobHierarchies_get_contours(self)

    def to_multipolygon(self, polygons):
        return _pyaqcv.BlobHierarchies_to_multipolygon(self, polygons)
    kLabel = _pyaqcv.BlobHierarchies_kLabel
    kArea = _pyaqcv.BlobHierarchies_kArea
    kChildrenCount = _pyaqcv.BlobHierarchies_kChildrenCount
    kAngle = _pyaqcv.BlobHierarchies_kAngle
    kBBoxCenterX = _pyaqcv.BlobHierarchies_kBBoxCenterX
    kBBoxCenterY = _pyaqcv.BlobHierarchies_kBBoxCenterY
    kBBoxX = _pyaqcv.BlobHierarchies_kBBoxX
    KBBoxY = _pyaqcv.BlobHierarchies_KBBoxY
    kBBoxWidth = _pyaqcv.BlobHierarchies_kBBoxWidth
    kBBoxHeight = _pyaqcv.BlobHierarchies_kBBoxHeight
    kBoundaryLength = _pyaqcv.BlobHierarchies_kBoundaryLength
    kPerimeter = _pyaqcv.BlobHierarchies_kPerimeter

    def set_filter(self, type, low_limit, high_limit):
        return _pyaqcv.BlobHierarchies_set_filter(self, type, low_limit, high_limit)

    def clear_filters(self):
        return _pyaqcv.BlobHierarchies_clear_filters(self)

    def sort(self, type, ascending):
        return _pyaqcv.BlobHierarchies_sort(self, type, ascending)

    def clear_sort(self):
        return _pyaqcv.BlobHierarchies_clear_sort(self)

# Register BlobHierarchies in _pyaqcv:
_pyaqcv.BlobHierarchies_swigregister(BlobHierarchies)

class ExtractBlobs(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pyaqcv.ExtractBlobs_swiginit(self, _pyaqcv.new_ExtractBlobs())
    __swig_destroy__ = _pyaqcv.delete_ExtractBlobs

    def segment_thresh(self, thresh, invert=False):
        return _pyaqcv.ExtractBlobs_segment_thresh(self, thresh, invert)

    def set_mask(self, mask):
        return _pyaqcv.ExtractBlobs_set_mask(self, mask)

    def set_mask_offset(self, offset):
        return _pyaqcv.ExtractBlobs_set_mask_offset(self, offset)

    def clear_mask(self):
        return _pyaqcv.ExtractBlobs_clear_mask(self)
    kDilate3x1 = _pyaqcv.ExtractBlobs_kDilate3x1
    kDilate1x3 = _pyaqcv.ExtractBlobs_kDilate1x3
    kDilate3x3 = _pyaqcv.ExtractBlobs_kDilate3x3
    kErode3x1 = _pyaqcv.ExtractBlobs_kErode3x1
    kErode1x3 = _pyaqcv.ExtractBlobs_kErode1x3
    kErode3x3 = _pyaqcv.ExtractBlobs_kErode3x3
    kOpen3x1 = _pyaqcv.ExtractBlobs_kOpen3x1
    kOpen1x3 = _pyaqcv.ExtractBlobs_kOpen1x3
    kOpen3x3 = _pyaqcv.ExtractBlobs_kOpen3x3
    kClose3x1 = _pyaqcv.ExtractBlobs_kClose3x1
    kClose1x3 = _pyaqcv.ExtractBlobs_kClose1x3
    kClose3x3 = _pyaqcv.ExtractBlobs_kClose3x3
    kDilate = _pyaqcv.ExtractBlobs_kDilate
    kErode = _pyaqcv.ExtractBlobs_kErode
    kOpen = _pyaqcv.ExtractBlobs_kOpen
    kClose = _pyaqcv.ExtractBlobs_kClose

    @staticmethod
    def get_morph_ops_vec(morph_ops, type, kernel_size):
        return _pyaqcv.ExtractBlobs_get_morph_ops_vec(morph_ops, type, kernel_size)

    def morph_ops(self, ops):
        return _pyaqcv.ExtractBlobs_morph_ops(self, ops)

    def connectivity_type(self, connect_type):
        return _pyaqcv.ExtractBlobs_connectivity_type(self, connect_type)

    def set_minimum_area(self, area):
        return _pyaqcv.ExtractBlobs_set_minimum_area(self, area)

    def execute(self, *args):
        return _pyaqcv.ExtractBlobs_execute(self, *args)

    def get_blob_hierarchies(self):
        return _pyaqcv.ExtractBlobs_get_blob_hierarchies(self)

# Register ExtractBlobs in _pyaqcv:
_pyaqcv.ExtractBlobs_swigregister(ExtractBlobs)

def ExtractBlobs_get_morph_ops_vec(morph_ops, type, kernel_size):
    return _pyaqcv.ExtractBlobs_get_morph_ops_vec(morph_ops, type, kernel_size)

kSingleWholeImageBlob = _pyaqcv.kSingleWholeImageBlob
kForegroundOnly = _pyaqcv.kForegroundOnly
kAllBlobs = _pyaqcv.kAllBlobs
kBlobAndHole = _pyaqcv.kBlobAndHole
class BlobExc(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _pyaqcv.delete_BlobExc

    def __init__(self, *args):
        _pyaqcv.BlobExc_swiginit(self, _pyaqcv.new_BlobExc(*args))

    def clone(self):
        return _pyaqcv.BlobExc_clone(self)

    def to_mat(self, *args):
        return _pyaqcv.BlobExc_to_mat(self, *args)

    def empty(self):
        return _pyaqcv.BlobExc_empty(self)

    def parent(self):
        return _pyaqcv.BlobExc_parent(self)

    def prev_sibling(self):
        return _pyaqcv.BlobExc_prev_sibling(self)

    def next_sibling(self):
        return _pyaqcv.BlobExc_next_sibling(self)

    def first_child(self):
        return _pyaqcv.BlobExc_first_child(self)

    def last_child(self):
        return _pyaqcv.BlobExc_last_child(self)

    def all_children(self):
        return _pyaqcv.BlobExc_all_children(self)

    def children_count(self):
        return _pyaqcv.BlobExc_children_count(self)

    def id(self):
        return _pyaqcv.BlobExc_id(self)

    def label(self):
        return _pyaqcv.BlobExc_label(self)

    def filtered(self):
        return _pyaqcv.BlobExc_filtered(self)

    def area(self):
        return _pyaqcv.BlobExc_area(self)

    def get_mass_center(self):
        return _pyaqcv.BlobExc_get_mass_center(self)

    def get_geom_center(self):
        return _pyaqcv.BlobExc_get_geom_center(self)

    def get_x_moment(self):
        return _pyaqcv.BlobExc_get_x_moment(self)

    def get_y_moment(self):
        return _pyaqcv.BlobExc_get_y_moment(self)

    def get_min_moment(self):
        return _pyaqcv.BlobExc_get_min_moment(self)

    def get_max_moment(self):
        return _pyaqcv.BlobExc_get_max_moment(self)

    def get_angle(self):
        return _pyaqcv.BlobExc_get_angle(self)

    def get_elongation(self):
        return _pyaqcv.BlobExc_get_elongation(self)

    def get_circularity(self):
        return _pyaqcv.BlobExc_get_circularity(self)

    def get_roundness(self):
        return _pyaqcv.BlobExc_get_roundness(self)

    def get_convexity(self):
        return _pyaqcv.BlobExc_get_convexity(self)

    def get_compactness(self):
        return _pyaqcv.BlobExc_get_compactness(self)

    def get_rectangularity(self):
        return _pyaqcv.BlobExc_get_rectangularity(self)

    def get_inner_points(self):
        return _pyaqcv.BlobExc_get_inner_points(self)

    def get_contour(self):
        return _pyaqcv.BlobExc_get_contour(self)

    def get_region(self):
        return _pyaqcv.BlobExc_get_region(self)

    def get_all_regions(self):
        return _pyaqcv.BlobExc_get_all_regions(self)

    def get_boundary_length(self):
        return _pyaqcv.BlobExc_get_boundary_length(self)

    def get_perimeter(self):
        return _pyaqcv.BlobExc_get_perimeter(self)

    def get_bbox(self):
        return _pyaqcv.BlobExc_get_bbox(self)

    def get_min_area_rect(self):
        return _pyaqcv.BlobExc_get_min_area_rect(self)

    def get_principal_bbox(self):
        return _pyaqcv.BlobExc_get_principal_bbox(self)

    def get_min_enclosing_circle(self):
        return _pyaqcv.BlobExc_get_min_enclosing_circle(self)

    def get_max_inscribed_circle(self):
        return _pyaqcv.BlobExc_get_max_inscribed_circle(self)

    def get_min_gray_val(self, *args):
        return _pyaqcv.BlobExc_get_min_gray_val(self, *args)

    def get_max_gray_val(self, *args):
        return _pyaqcv.BlobExc_get_max_gray_val(self, *args)

    def get_mean_gray_val(self, *args):
        return _pyaqcv.BlobExc_get_mean_gray_val(self, *args)

    def get_std_dev_gray_val(self, *args):
        return _pyaqcv.BlobExc_get_std_dev_gray_val(self, *args)

    def morphology(self, op, shape, ksize):
        return _pyaqcv.BlobExc_morphology(self, op, shape, ksize)

    def connection(self, *args):
        return _pyaqcv.BlobExc_connection(self, *args)

    def connect_num(self):
        return _pyaqcv.BlobExc_connect_num(self)

    def holes_num(self):
        return _pyaqcv.BlobExc_holes_num(self)

    def cover_point(self, point):
        return _pyaqcv.BlobExc_cover_point(self, point)

    def intersection_with(self, blob):
        return _pyaqcv.BlobExc_intersection_with(self, blob)

    @staticmethod
    def blob_intersection(src, dst):
        return _pyaqcv.BlobExc_blob_intersection(src, dst)

    def union_with(self, blob):
        return _pyaqcv.BlobExc_union_with(self, blob)

    @staticmethod
    def blob_union(src, dst):
        return _pyaqcv.BlobExc_blob_union(src, dst)

    def complement(self, *args):
        return _pyaqcv.BlobExc_complement(self, *args)

    @staticmethod
    def blob_complement(*args):
        return _pyaqcv.BlobExc_blob_complement(*args)

    @staticmethod
    def blob_difference(src1, src2, dst):
        return _pyaqcv.BlobExc_blob_difference(src1, src2, dst)

    @staticmethod
    def blob_symm_difference(src1, src2, dst):
        return _pyaqcv.BlobExc_blob_symm_difference(src1, src2, dst)

    def fill_up(self, *args):
        return _pyaqcv.BlobExc_fill_up(self, *args)

    @staticmethod
    def blob_fill_up(*args):
        return _pyaqcv.BlobExc_blob_fill_up(*args)

# Register BlobExc in _pyaqcv:
_pyaqcv.BlobExc_swigregister(BlobExc)

def BlobExc_blob_intersection(src, dst):
    return _pyaqcv.BlobExc_blob_intersection(src, dst)

def BlobExc_blob_union(src, dst):
    return _pyaqcv.BlobExc_blob_union(src, dst)

def BlobExc_blob_complement(*args):
    return _pyaqcv.BlobExc_blob_complement(*args)

def BlobExc_blob_difference(src1, src2, dst):
    return _pyaqcv.BlobExc_blob_difference(src1, src2, dst)

def BlobExc_blob_symm_difference(src1, src2, dst):
    return _pyaqcv.BlobExc_blob_symm_difference(src1, src2, dst)

def BlobExc_blob_fill_up(*args):
    return _pyaqcv.BlobExc_blob_fill_up(*args)

class ExtractBlobsExc(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pyaqcv.ExtractBlobsExc_swiginit(self, _pyaqcv.new_ExtractBlobsExc())
    __swig_destroy__ = _pyaqcv.delete_ExtractBlobsExc

    def set_segment_thresh(self, thresh, invert=False):
        return _pyaqcv.ExtractBlobsExc_set_segment_thresh(self, thresh, invert)

    def set_segment_thresh_range(self, low, high, invert=False):
        return _pyaqcv.ExtractBlobsExc_set_segment_thresh_range(self, low, high, invert)

    def set_segment_mean_std_dev(self, low_ratio, high_ratio, invert=False):
        return _pyaqcv.ExtractBlobsExc_set_segment_mean_std_dev(self, low_ratio, high_ratio, invert)

    def set_segment_adaptive(self, block_size, c=0.0, invert=False):
        return _pyaqcv.ExtractBlobsExc_set_segment_adaptive(self, block_size, c, invert)

    def add_morph_ops(self, op, shape, ksize):
        return _pyaqcv.ExtractBlobsExc_add_morph_ops(self, op, shape, ksize)

    def clear_morph_ops(self):
        return _pyaqcv.ExtractBlobsExc_clear_morph_ops(self)

    def set_connectivity_type(self, connect_type):
        return _pyaqcv.ExtractBlobsExc_set_connectivity_type(self, connect_type)

    def clear_connectivity_type(self):
        return _pyaqcv.ExtractBlobsExc_clear_connectivity_type(self)

    def set_minimum_area(self, area):
        return _pyaqcv.ExtractBlobsExc_set_minimum_area(self, area)
    kLabel = _pyaqcv.ExtractBlobsExc_kLabel
    kArea = _pyaqcv.ExtractBlobsExc_kArea
    kAngle = _pyaqcv.ExtractBlobsExc_kAngle
    kBBoxCenterX = _pyaqcv.ExtractBlobsExc_kBBoxCenterX
    kBBoxCenterY = _pyaqcv.ExtractBlobsExc_kBBoxCenterY
    kBBoxX = _pyaqcv.ExtractBlobsExc_kBBoxX
    kBBoxY = _pyaqcv.ExtractBlobsExc_kBBoxY
    kBBoxBottomRightX = _pyaqcv.ExtractBlobsExc_kBBoxBottomRightX
    kBBoxBottomRightY = _pyaqcv.ExtractBlobsExc_kBBoxBottomRightY
    kBBoxWidth = _pyaqcv.ExtractBlobsExc_kBBoxWidth
    kBBoxHeight = _pyaqcv.ExtractBlobsExc_kBBoxHeight
    kMassCenterX = _pyaqcv.ExtractBlobsExc_kMassCenterX
    kMassCenterY = _pyaqcv.ExtractBlobsExc_kMassCenterY
    kMinRectLongSide = _pyaqcv.ExtractBlobsExc_kMinRectLongSide
    kMinRectShortSide = _pyaqcv.ExtractBlobsExc_kMinRectShortSide
    kMinRectCenterX = _pyaqcv.ExtractBlobsExc_kMinRectCenterX
    kMinRectCenterY = _pyaqcv.ExtractBlobsExc_kMinRectCenterY
    kMinRectAngle = _pyaqcv.ExtractBlobsExc_kMinRectAngle
    kCircularity = _pyaqcv.ExtractBlobsExc_kCircularity
    kRectangularity = _pyaqcv.ExtractBlobsExc_kRectangularity

    def add_filter(self, type, low_limit, high_limit, invert=False):
        return _pyaqcv.ExtractBlobsExc_add_filter(self, type, low_limit, high_limit, invert)
    kAnd = _pyaqcv.ExtractBlobsExc_kAnd
    kOr = _pyaqcv.ExtractBlobsExc_kOr

    def set_filter_logic(self, logic):
        return _pyaqcv.ExtractBlobsExc_set_filter_logic(self, logic)

    def clear_filters(self):
        return _pyaqcv.ExtractBlobsExc_clear_filters(self)

    def set_sort(self, type, ascending=False):
        return _pyaqcv.ExtractBlobsExc_set_sort(self, type, ascending)

    def clear_sort(self):
        return _pyaqcv.ExtractBlobsExc_clear_sort(self)

    def set_fill_up(self, *args):
        return _pyaqcv.ExtractBlobsExc_set_fill_up(self, *args)

    def set_cal_gray_val(self, cal=False):
        return _pyaqcv.ExtractBlobsExc_set_cal_gray_val(self, cal)

    def execute(self, *args):
        return _pyaqcv.ExtractBlobsExc_execute(self, *args)

    def get_blob(self, index):
        return _pyaqcv.ExtractBlobsExc_get_blob(self, index)

    def get_all_blobs(self):
        return _pyaqcv.ExtractBlobsExc_get_all_blobs(self)

    def draw_blob(self, img, index=-1):
        return _pyaqcv.ExtractBlobsExc_draw_blob(self, img, index)

    def blob_count(self):
        return _pyaqcv.ExtractBlobsExc_blob_count(self)

    def get_contours(self):
        return _pyaqcv.ExtractBlobsExc_get_contours(self)

    def to_multipolygon(self, polygons, include_inners=False):
        return _pyaqcv.ExtractBlobsExc_to_multipolygon(self, polygons, include_inners)

    def cal_blob_hierarchies(self):
        return _pyaqcv.ExtractBlobsExc_cal_blob_hierarchies(self)

# Register ExtractBlobsExc in _pyaqcv:
_pyaqcv.ExtractBlobsExc_swigregister(ExtractBlobsExc)

class VisionSystemCalibResult(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    verticality_x = property(_pyaqcv.VisionSystemCalibResult_verticality_x_get, _pyaqcv.VisionSystemCalibResult_verticality_x_set)
    verticality_y = property(_pyaqcv.VisionSystemCalibResult_verticality_y_get, _pyaqcv.VisionSystemCalibResult_verticality_y_set)
    board_pos = property(_pyaqcv.VisionSystemCalibResult_board_pos_get, _pyaqcv.VisionSystemCalibResult_board_pos_set)
    board_angle = property(_pyaqcv.VisionSystemCalibResult_board_angle_get, _pyaqcv.VisionSystemCalibResult_board_angle_set)
    pixel_equivalent = property(_pyaqcv.VisionSystemCalibResult_pixel_equivalent_get, _pyaqcv.VisionSystemCalibResult_pixel_equivalent_set)
    mtf = property(_pyaqcv.VisionSystemCalibResult_mtf_get, _pyaqcv.VisionSystemCalibResult_mtf_set)
    rgb = property(_pyaqcv.VisionSystemCalibResult_rgb_get, _pyaqcv.VisionSystemCalibResult_rgb_set)

    def __init__(self):
        _pyaqcv.VisionSystemCalibResult_swiginit(self, _pyaqcv.new_VisionSystemCalibResult())
    __swig_destroy__ = _pyaqcv.delete_VisionSystemCalibResult

# Register VisionSystemCalibResult in _pyaqcv:
_pyaqcv.VisionSystemCalibResult_swigregister(VisionSystemCalibResult)

class VisionSystemCalib(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    kAQ_8585V3 = _pyaqcv.VisionSystemCalib_kAQ_8585V3

    def __init__(self, *args):
        _pyaqcv.VisionSystemCalib_swiginit(self, _pyaqcv.new_VisionSystemCalib(*args))
    __swig_destroy__ = _pyaqcv.delete_VisionSystemCalib

    def execute(self, image, result):
        return _pyaqcv.VisionSystemCalib_execute(self, image, result)

# Register VisionSystemCalib in _pyaqcv:
_pyaqcv.VisionSystemCalib_swigregister(VisionSystemCalib)

kTranslationRotationScale = _pyaqcv.kTranslationRotationScale
kAffine = _pyaqcv.kAffine
kPerspective = _pyaqcv.kPerspective
kNoneLinear = _pyaqcv.kNoneLinear
class CameraModelPack(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pyaqcv.CameraModelPack_swiginit(self, _pyaqcv.new_CameraModelPack())
    __swig_destroy__ = _pyaqcv.delete_CameraModelPack

    def get_calib_type(self):
        return _pyaqcv.CameraModelPack_get_calib_type(self)

    def set_pixel_scale(self, pixel_scale):
        return _pyaqcv.CameraModelPack_set_pixel_scale(self, pixel_scale)

    def get_pixel_scale(self):
        return _pyaqcv.CameraModelPack_get_pixel_scale(self)

    def set_camera_size(self, *args):
        return _pyaqcv.CameraModelPack_set_camera_size(self, *args)

    def get_camera_size(self):
        return _pyaqcv.CameraModelPack_get_camera_size(self)

    def get_rectify_size(self):
        return _pyaqcv.CameraModelPack_get_rectify_size(self)

    def is_valid(self):
        return _pyaqcv.CameraModelPack_is_valid(self)

    def init_rectify_map(self):
        return _pyaqcv.CameraModelPack_init_rectify_map(self)

    def rectify(self, src, dst):
        return _pyaqcv.CameraModelPack_rectify(self, src, dst)

    def image_point_to_world_plane(self, img_pt, world_pt):
        return _pyaqcv.CameraModelPack_image_point_to_world_plane(self, img_pt, world_pt)

    def world_plane_point_to_image(self, *args):
        return _pyaqcv.CameraModelPack_world_plane_point_to_image(self, *args)

    def image_points_to_world_plane(self, img_pts, world_pts):
        return _pyaqcv.CameraModelPack_image_points_to_world_plane(self, img_pts, world_pts)

    def world_plane_points_to_image(self, *args):
        return _pyaqcv.CameraModelPack_world_plane_points_to_image(self, *args)

    def get_nonlinear_param(self, *args):
        return _pyaqcv.CameraModelPack_get_nonlinear_param(self, *args)

    def get_linear_param(self, width, height, param):
        return _pyaqcv.CameraModelPack_get_linear_param(self, width, height, param)

# Register CameraModelPack in _pyaqcv:
_pyaqcv.CameraModelPack_swigregister(CameraModelPack)

class CameraCalib(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    kAQBoarRect = _pyaqcv.CameraCalib_kAQBoarRect
    kChessBoard = _pyaqcv.CameraCalib_kChessBoard

    def __init__(self):
        _pyaqcv.CameraCalib_swiginit(self, _pyaqcv.new_CameraCalib())
    __swig_destroy__ = _pyaqcv.delete_CameraCalib

    def set_board_type(self, board_type):
        return _pyaqcv.CameraCalib_set_board_type(self, board_type)

    def get_board_type(self):
        return _pyaqcv.CameraCalib_get_board_type(self)

    def set_grid_size(self, *args):
        return _pyaqcv.CameraCalib_set_grid_size(self, *args)

    def get_grid_size(self):
        return _pyaqcv.CameraCalib_get_grid_size(self)

    def set_grid_scale(self, grid_scale):
        return _pyaqcv.CameraCalib_set_grid_scale(self, grid_scale)

    def get_grid_scale(self):
        return _pyaqcv.CameraCalib_get_grid_scale(self)

    def set_calib_type(self, calib_type):
        return _pyaqcv.CameraCalib_set_calib_type(self, calib_type)

    def get_calib_type(self):
        return _pyaqcv.CameraCalib_get_calib_type(self)

    def add_view_image(self, view_idx, img):
        return _pyaqcv.CameraCalib_add_view_image(self, view_idx, img)

    def add_view_feature(self, view_idx, img_pts, world_pts, img_size):
        return _pyaqcv.CameraCalib_add_view_feature(self, view_idx, img_pts, world_pts, img_size)

    def set_reference_view(self, reference_idx):
        return _pyaqcv.CameraCalib_set_reference_view(self, reference_idx)

    def calibrate(self):
        return _pyaqcv.CameraCalib_calibrate(self)

    def get_view_feature(self, view_idx, viewfeature):
        return _pyaqcv.CameraCalib_get_view_feature(self, view_idx, viewfeature)

    def get_rms(self):
        return _pyaqcv.CameraCalib_get_rms(self)

    def get_camera_model(self, *args):
        return _pyaqcv.CameraCalib_get_camera_model(self, *args)

    def get_view_project_pts(self, id, proj_pts):
        return _pyaqcv.CameraCalib_get_view_project_pts(self, id, proj_pts)

# Register CameraCalib in _pyaqcv:
_pyaqcv.CameraCalib_swigregister(CameraCalib)

class EvaluateImageSharpness(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    kStepDiffer = _pyaqcv.EvaluateImageSharpness_kStepDiffer
    kSelfCorrelation = _pyaqcv.EvaluateImageSharpness_kSelfCorrelation
    kGradientEnergy = _pyaqcv.EvaluateImageSharpness_kGradientEnergy
    kBandPassFilter = _pyaqcv.EvaluateImageSharpness_kBandPassFilter

    def __init__(self):
        _pyaqcv.EvaluateImageSharpness_swiginit(self, _pyaqcv.new_EvaluateImageSharpness())
    __swig_destroy__ = _pyaqcv.delete_EvaluateImageSharpness

    def set_sharpness_method(self, mode):
        return _pyaqcv.EvaluateImageSharpness_set_sharpness_method(self, mode)

    def get_sharpness_method(self):
        return _pyaqcv.EvaluateImageSharpness_get_sharpness_method(self)

    def set_differ_step(self, dx, dy):
        return _pyaqcv.EvaluateImageSharpness_set_differ_step(self, dx, dy)

    def get_differ_step(self, dx, dy):
        return _pyaqcv.EvaluateImageSharpness_get_differ_step(self, dx, dy)

    def set_gradient_smooth_sigma(self, sigma_x, sigma_y):
        return _pyaqcv.EvaluateImageSharpness_set_gradient_smooth_sigma(self, sigma_x, sigma_y)

    def get_gradient_smooth_sigma(self, sigma_x, sigma_y):
        return _pyaqcv.EvaluateImageSharpness_get_gradient_smooth_sigma(self, sigma_x, sigma_y)

    def set_bandpass_filter_range(self, low, high):
        return _pyaqcv.EvaluateImageSharpness_set_bandpass_filter_range(self, low, high)

    def get_bandpass_filter_range(self, low, high):
        return _pyaqcv.EvaluateImageSharpness_get_bandpass_filter_range(self, low, high)

    def execute(self, img, roi):
        return _pyaqcv.EvaluateImageSharpness_execute(self, img, roi)

    def get_result(self):
        return _pyaqcv.EvaluateImageSharpness_get_result(self)

# Register EvaluateImageSharpness in _pyaqcv:
_pyaqcv.EvaluateImageSharpness_swigregister(EvaluateImageSharpness)

class WarpCirclePolar(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _pyaqcv.WarpCirclePolar_swiginit(self, _pyaqcv.new_WarpCirclePolar(*args))
    __swig_destroy__ = _pyaqcv.delete_WarpCirclePolar

    def set_annular(self, center, r_start, r_end, start_angle, span_angle):
        return _pyaqcv.WarpCirclePolar_set_annular(self, center, r_start, r_end, start_angle, span_angle)

    def get_annular(self, center, r_start=None, r_end=None, start_angle=None, span_angle=None):
        return _pyaqcv.WarpCirclePolar_get_annular(self, center, r_start, r_end, start_angle, span_angle)

    def polar_to_cart(self, *args):
        return _pyaqcv.WarpCirclePolar_polar_to_cart(self, *args)

    def cart_to_polar(self, *args):
        return _pyaqcv.WarpCirclePolar_cart_to_polar(self, *args)

    def circle_spread(self, *args):
        return _pyaqcv.WarpCirclePolar_circle_spread(self, *args)

    def circle_spread_inv(self, *args):
        return _pyaqcv.WarpCirclePolar_circle_spread_inv(self, *args)

# Register WarpCirclePolar in _pyaqcv:
_pyaqcv.WarpCirclePolar_swigregister(WarpCirclePolar)

EdgePolarityType_kDarkToLight = _pyaqcv.EdgePolarityType_kDarkToLight
EdgePolarityType_kLightToDark = _pyaqcv.EdgePolarityType_kLightToDark
EdgePolarityType_kBoth = _pyaqcv.EdgePolarityType_kBoth
EdgeOrderType_kBestScore = _pyaqcv.EdgeOrderType_kBestScore
EdgeOrderType_kFirstEdge = _pyaqcv.EdgeOrderType_kFirstEdge
EdgeOrderType_kLastEdge = _pyaqcv.EdgeOrderType_kLastEdge
class CircularAnnulusSection(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    arc = property(_pyaqcv.CircularAnnulusSection_arc_get, _pyaqcv.CircularAnnulusSection_arc_set)
    radial_scale = property(_pyaqcv.CircularAnnulusSection_radial_scale_get, _pyaqcv.CircularAnnulusSection_radial_scale_set)

    def __init__(self):
        _pyaqcv.CircularAnnulusSection_swiginit(self, _pyaqcv.new_CircularAnnulusSection())
    __swig_destroy__ = _pyaqcv.delete_CircularAnnulusSection

# Register CircularAnnulusSection in _pyaqcv:
_pyaqcv.CircularAnnulusSection_swigregister(CircularAnnulusSection)

kFindDirectionLeftToRight = _pyaqcv.kFindDirectionLeftToRight
kFindDirectionRightToLeft = _pyaqcv.kFindDirectionRightToLeft
kFindDirectionCenterOutward = _pyaqcv.kFindDirectionCenterOutward
kFindDirectionOutsideIn = _pyaqcv.kFindDirectionOutsideIn
kEdgeFlawSortBySize = _pyaqcv.kEdgeFlawSortBySize
kEdgeFlawSortByArea = _pyaqcv.kEdgeFlawSortByArea
kEdgeFlawSortByPos = _pyaqcv.kEdgeFlawSortByPos
kEdgeInspectSingleLine = _pyaqcv.kEdgeInspectSingleLine
kEdgeInspectSingleCircle = _pyaqcv.kEdgeInspectSingleCircle
kEdgeFlawNormal = _pyaqcv.kEdgeFlawNormal
kEdgeFlawLeftDefect = _pyaqcv.kEdgeFlawLeftDefect
kEdgeFlawRightDefect = _pyaqcv.kEdgeFlawRightDefect
kEdgeFlawGap = _pyaqcv.kEdgeFlawGap
kDualEdgeMaxScore = _pyaqcv.kDualEdgeMaxScore
kDualEdgeOuter = _pyaqcv.kDualEdgeOuter
kDualEdgeInner = _pyaqcv.kDualEdgeInner
kDualEdgeOuterDiameter = _pyaqcv.kDualEdgeOuterDiameter
kDualEdgeInnerDiameter = _pyaqcv.kDualEdgeInnerDiameter
class EdgeFlaw(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    pos = property(_pyaqcv.EdgeFlaw_pos_get, _pyaqcv.EdgeFlaw_pos_set)
    area = property(_pyaqcv.EdgeFlaw_area_get, _pyaqcv.EdgeFlaw_area_set)
    size = property(_pyaqcv.EdgeFlaw_size_get, _pyaqcv.EdgeFlaw_size_set)
    start_calip_index = property(_pyaqcv.EdgeFlaw_start_calip_index_get, _pyaqcv.EdgeFlaw_start_calip_index_set)
    end_calip_index = property(_pyaqcv.EdgeFlaw_end_calip_index_get, _pyaqcv.EdgeFlaw_end_calip_index_set)
    flaw_type = property(_pyaqcv.EdgeFlaw_flaw_type_get, _pyaqcv.EdgeFlaw_flaw_type_set)

    def __init__(self):
        _pyaqcv.EdgeFlaw_swiginit(self, _pyaqcv.new_EdgeFlaw())
    __swig_destroy__ = _pyaqcv.delete_EdgeFlaw

# Register EdgeFlaw in _pyaqcv:
_pyaqcv.EdgeFlaw_swigregister(EdgeFlaw)

class EdgePositionDefectParams(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _pyaqcv.delete_EdgePositionDefectParams

    def __init__(self, *args):
        _pyaqcv.EdgePositionDefectParams_swiginit(self, _pyaqcv.new_EdgePositionDefectParams(*args))

    def set_defect_max_num(self, max_defects_num):
        return _pyaqcv.EdgePositionDefectParams_set_defect_max_num(self, max_defects_num)

    def get_defect_max_num(self):
        return _pyaqcv.EdgePositionDefectParams_get_defect_max_num(self)

    def set_defect_distance(self, min_distance, max_distance):
        return _pyaqcv.EdgePositionDefectParams_set_defect_distance(self, min_distance, max_distance)

    def get_defect_distance(self, min_distance, max_distance):
        return _pyaqcv.EdgePositionDefectParams_get_defect_distance(self, min_distance, max_distance)

    def enable_defect_size(self, size_enabled):
        return _pyaqcv.EdgePositionDefectParams_enable_defect_size(self, size_enabled)

    def get_defect_size_enabled(self):
        return _pyaqcv.EdgePositionDefectParams_get_defect_size_enabled(self)

    def set_defect_size(self, min_size, max_size):
        return _pyaqcv.EdgePositionDefectParams_set_defect_size(self, min_size, max_size)

    def get_defect_size(self, min_size, max_size):
        return _pyaqcv.EdgePositionDefectParams_get_defect_size(self, min_size, max_size)

    def enable_defect_area(self, area_enabled):
        return _pyaqcv.EdgePositionDefectParams_enable_defect_area(self, area_enabled)

    def get_defect_area_enabled(self):
        return _pyaqcv.EdgePositionDefectParams_get_defect_area_enabled(self)

    def set_defect_area(self, min_area, max_area):
        return _pyaqcv.EdgePositionDefectParams_set_defect_area(self, min_area, max_area)

    def get_defect_area(self, min_area, max_area):
        return _pyaqcv.EdgePositionDefectParams_get_defect_area(self, min_area, max_area)

    def enable_filter_left_defect(self, filter_left_defect):
        return _pyaqcv.EdgePositionDefectParams_enable_filter_left_defect(self, filter_left_defect)

    def get_filter_left_defect_enabled(self):
        return _pyaqcv.EdgePositionDefectParams_get_filter_left_defect_enabled(self)

    def enable_filter_right_defect(self, filter_right_defect):
        return _pyaqcv.EdgePositionDefectParams_enable_filter_right_defect(self, filter_right_defect)

    def get_filter_right_defect_enabled(self):
        return _pyaqcv.EdgePositionDefectParams_get_filter_right_defect_enabled(self)

    def get_filter_defect_enabled(self, filter_left_defect, filter_right_defect):
        return _pyaqcv.EdgePositionDefectParams_get_filter_defect_enabled(self, filter_left_defect, filter_right_defect)

    def set_defects_sort_type(self, st_sort_type):
        return _pyaqcv.EdgePositionDefectParams_set_defects_sort_type(self, st_sort_type)

    def get_defects_sort_type(self):
        return _pyaqcv.EdgePositionDefectParams_get_defects_sort_type(self)

    def is_valid(self):
        return _pyaqcv.EdgePositionDefectParams_is_valid(self)

# Register EdgePositionDefectParams in _pyaqcv:
_pyaqcv.EdgePositionDefectParams_swigregister(EdgePositionDefectParams)

class EdgeGapParams(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _pyaqcv.delete_EdgeGapParams

    def __init__(self, *args):
        _pyaqcv.EdgeGapParams_swiginit(self, _pyaqcv.new_EdgeGapParams(*args))

    def set_gap_maxnum(self, max_gaps_num):
        return _pyaqcv.EdgeGapParams_set_gap_maxnum(self, max_gaps_num)

    def get_gap_maxnum(self):
        return _pyaqcv.EdgeGapParams_get_gap_maxnum(self)

    def enable_gap(self, gap_enabled):
        return _pyaqcv.EdgeGapParams_enable_gap(self, gap_enabled)

    def get_gap_enabled(self):
        return _pyaqcv.EdgeGapParams_get_gap_enabled(self)

    def set_gap_size(self, gap_min, gap_max):
        return _pyaqcv.EdgeGapParams_set_gap_size(self, gap_min, gap_max)

    def get_gap_size(self, gap_min, gap_max):
        return _pyaqcv.EdgeGapParams_get_gap_size(self, gap_min, gap_max)

    def enable_ignore_gap_end(self, ignore_gap_end):
        return _pyaqcv.EdgeGapParams_enable_ignore_gap_end(self, ignore_gap_end)

    def get_ignore_gap_end_enabled(self):
        return _pyaqcv.EdgeGapParams_get_ignore_gap_end_enabled(self)

    def set_gaps_sort_type(self, st_sort_type):
        return _pyaqcv.EdgeGapParams_set_gaps_sort_type(self, st_sort_type)

    def get_gaps_sort_type(self):
        return _pyaqcv.EdgeGapParams_get_gaps_sort_type(self)

    def is_valid(self):
        return _pyaqcv.EdgeGapParams_is_valid(self)

# Register EdgeGapParams in _pyaqcv:
_pyaqcv.EdgeGapParams_swigregister(EdgeGapParams)

class EdgeFitParams(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, filter_outliers_enabled=False, fit_distance_filter=5, rescore_enabled=False, refit_enabled=False):
        _pyaqcv.EdgeFitParams_swiginit(self, _pyaqcv.new_EdgeFitParams(filter_outliers_enabled, fit_distance_filter, rescore_enabled, refit_enabled))
    __swig_destroy__ = _pyaqcv.delete_EdgeFitParams

    def enable_filter_outliers(self, filter_outliers_enabled):
        return _pyaqcv.EdgeFitParams_enable_filter_outliers(self, filter_outliers_enabled)

    def get_filter_outliers_enabled(self):
        return _pyaqcv.EdgeFitParams_get_filter_outliers_enabled(self)

    def set_fit_distance_filter(self, fit_distance_filter):
        return _pyaqcv.EdgeFitParams_set_fit_distance_filter(self, fit_distance_filter)

    def get_fit_distance_filter(self):
        return _pyaqcv.EdgeFitParams_get_fit_distance_filter(self)

    def enable_rescore(self, rescore_enabled):
        return _pyaqcv.EdgeFitParams_enable_rescore(self, rescore_enabled)

    def get_rescore_enabled(self):
        return _pyaqcv.EdgeFitParams_get_rescore_enabled(self)

    def enable_refit(self, refit_enabled):
        return _pyaqcv.EdgeFitParams_enable_refit(self, refit_enabled)

    def get_refit_enabled(self):
        return _pyaqcv.EdgeFitParams_get_refit_enabled(self)

# Register EdgeFitParams in _pyaqcv:
_pyaqcv.EdgeFitParams_swigregister(EdgeFitParams)

class SingleEdgeScoreParams(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, first_edge_enabled=True, strongest_edge_enabled=False, score_threshold=20):
        _pyaqcv.SingleEdgeScoreParams_swiginit(self, _pyaqcv.new_SingleEdgeScoreParams(first_edge_enabled, strongest_edge_enabled, score_threshold))
    __swig_destroy__ = _pyaqcv.delete_SingleEdgeScoreParams

    def enable_first_edge(self, first_edge_enabled):
        return _pyaqcv.SingleEdgeScoreParams_enable_first_edge(self, first_edge_enabled)

    def get_first_edge_enabled(self):
        return _pyaqcv.SingleEdgeScoreParams_get_first_edge_enabled(self)

    def enable_strongest_edge(self, strongest_edge_enabled):
        return _pyaqcv.SingleEdgeScoreParams_enable_strongest_edge(self, strongest_edge_enabled)

    def get_strongest_edge_enabled(self):
        return _pyaqcv.SingleEdgeScoreParams_get_strongest_edge_enabled(self)

    def set_score_threshold(self, score_threshold):
        return _pyaqcv.SingleEdgeScoreParams_set_score_threshold(self, score_threshold)

    def get_score_threshold(self):
        return _pyaqcv.SingleEdgeScoreParams_get_score_threshold(self)

# Register SingleEdgeScoreParams in _pyaqcv:
_pyaqcv.SingleEdgeScoreParams_swigregister(SingleEdgeScoreParams)

class DualEdgeScoreParams(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _pyaqcv.DualEdgeScoreParams_swiginit(self, _pyaqcv.new_DualEdgeScoreParams(*args))
    __swig_destroy__ = _pyaqcv.delete_DualEdgeScoreParams

    def set_single_edge_score_param(self, single_edge_score_param):
        return _pyaqcv.DualEdgeScoreParams_set_single_edge_score_param(self, single_edge_score_param)

    def get_single_edge_score_param(self):
        return _pyaqcv.DualEdgeScoreParams_get_single_edge_score_param(self)

    def enable_pair_size(self, pair_size_enabled):
        return _pyaqcv.DualEdgeScoreParams_enable_pair_size(self, pair_size_enabled)

    def get_pair_size_enabled(self):
        return _pyaqcv.DualEdgeScoreParams_get_pair_size_enabled(self)

    def set_pair_size(self, pair_size):
        return _pyaqcv.DualEdgeScoreParams_set_pair_size(self, pair_size)

    def get_pair_size(self):
        return _pyaqcv.DualEdgeScoreParams_get_pair_size(self)

# Register DualEdgeScoreParams in _pyaqcv:
_pyaqcv.DualEdgeScoreParams_swigregister(DualEdgeScoreParams)

class ProfileCaliperSet(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    kLineSeg = _pyaqcv.ProfileCaliperSet_kLineSeg
    kCircleArc = _pyaqcv.ProfileCaliperSet_kCircleArc
    __swig_destroy__ = _pyaqcv.delete_ProfileCaliperSet

    def set_caliper_height(self, height):
        return _pyaqcv.ProfileCaliperSet_set_caliper_height(self, height)

    def get_caliper_height(self):
        return _pyaqcv.ProfileCaliperSet_get_caliper_height(self)

    def set_caliper_width(self, width):
        return _pyaqcv.ProfileCaliperSet_set_caliper_width(self, width)

    def get_caliper_width(self):
        return _pyaqcv.ProfileCaliperSet_get_caliper_width(self)

    def set_caliper_space(self, space):
        return _pyaqcv.ProfileCaliperSet_set_caliper_space(self, space)

    def get_caliper_space(self):
        return _pyaqcv.ProfileCaliperSet_get_caliper_space(self)

    def get_caliper_rects(self):
        return _pyaqcv.ProfileCaliperSet_get_caliper_rects(self)

    def get_type(self):
        return _pyaqcv.ProfileCaliperSet_get_type(self)

# Register ProfileCaliperSet in _pyaqcv:
_pyaqcv.ProfileCaliperSet_swigregister(ProfileCaliperSet)

class LineProfileCaliperSet(ProfileCaliperSet):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pyaqcv.LineProfileCaliperSet_swiginit(self, _pyaqcv.new_LineProfileCaliperSet())
    __swig_destroy__ = _pyaqcv.delete_LineProfileCaliperSet

    def set_lineseg(self, lineseg_profile):
        return _pyaqcv.LineProfileCaliperSet_set_lineseg(self, lineseg_profile)

    def get_lineseg(self):
        return _pyaqcv.LineProfileCaliperSet_get_lineseg(self)

    def set_roi(self, roi):
        return _pyaqcv.LineProfileCaliperSet_set_roi(self, roi)

    def get_roi(self, roi):
        return _pyaqcv.LineProfileCaliperSet_get_roi(self, roi)

    def get_caliper_rects(self):
        return _pyaqcv.LineProfileCaliperSet_get_caliper_rects(self)

    def get_type(self):
        return _pyaqcv.LineProfileCaliperSet_get_type(self)

# Register LineProfileCaliperSet in _pyaqcv:
_pyaqcv.LineProfileCaliperSet_swigregister(LineProfileCaliperSet)

class CircleProfileCaliperSet(ProfileCaliperSet):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pyaqcv.CircleProfileCaliperSet_swiginit(self, _pyaqcv.new_CircleProfileCaliperSet())
    __swig_destroy__ = _pyaqcv.delete_CircleProfileCaliperSet

    def set_arc(self, circlearc_profile):
        return _pyaqcv.CircleProfileCaliperSet_set_arc(self, circlearc_profile)

    def get_arc(self):
        return _pyaqcv.CircleProfileCaliperSet_get_arc(self)

    def set_roi(self, center, r_start, r_end, angle, angle_span):
        return _pyaqcv.CircleProfileCaliperSet_set_roi(self, center, r_start, r_end, angle, angle_span)

    def get_roi(self, center, r_start, r_end, angle, angle_span):
        return _pyaqcv.CircleProfileCaliperSet_get_roi(self, center, r_start, r_end, angle, angle_span)

    def get_caliper_rects(self):
        return _pyaqcv.CircleProfileCaliperSet_get_caliper_rects(self)

    def get_type(self):
        return _pyaqcv.CircleProfileCaliperSet_get_type(self)

# Register CircleProfileCaliperSet in _pyaqcv:
_pyaqcv.CircleProfileCaliperSet_swigregister(CircleProfileCaliperSet)

class CaliperSingleEdgeResult(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pyaqcv.CaliperSingleEdgeResult_swiginit(self, _pyaqcv.new_CaliperSingleEdgeResult())
    score = property(_pyaqcv.CaliperSingleEdgeResult_score_get, _pyaqcv.CaliperSingleEdgeResult_score_set)
    edge_point = property(_pyaqcv.CaliperSingleEdgeResult_edge_point_get, _pyaqcv.CaliperSingleEdgeResult_edge_point_set)
    offset = property(_pyaqcv.CaliperSingleEdgeResult_offset_get, _pyaqcv.CaliperSingleEdgeResult_offset_set)
    contrast = property(_pyaqcv.CaliperSingleEdgeResult_contrast_get, _pyaqcv.CaliperSingleEdgeResult_contrast_set)
    angle = property(_pyaqcv.CaliperSingleEdgeResult_angle_get, _pyaqcv.CaliperSingleEdgeResult_angle_set)
    sensitivity = property(_pyaqcv.CaliperSingleEdgeResult_sensitivity_get, _pyaqcv.CaliperSingleEdgeResult_sensitivity_set)
    polarity = property(_pyaqcv.CaliperSingleEdgeResult_polarity_get, _pyaqcv.CaliperSingleEdgeResult_polarity_set)
    __swig_destroy__ = _pyaqcv.delete_CaliperSingleEdgeResult

# Register CaliperSingleEdgeResult in _pyaqcv:
_pyaqcv.CaliperSingleEdgeResult_swigregister(CaliperSingleEdgeResult)

class CaliperSingleEdge(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pyaqcv.CaliperSingleEdge_swiginit(self, _pyaqcv.new_CaliperSingleEdge())
    __swig_destroy__ = _pyaqcv.delete_CaliperSingleEdge

    def set_edge_polarity(self, edge_polarity):
        return _pyaqcv.CaliperSingleEdge_set_edge_polarity(self, edge_polarity)

    def get_edge_polarity(self):
        return _pyaqcv.CaliperSingleEdge_get_edge_polarity(self)

    def set_sensitivity_threshold(self, sensitivity_threshold):
        return _pyaqcv.CaliperSingleEdge_set_sensitivity_threshold(self, sensitivity_threshold)

    def get_sensitivity_threshold(self):
        return _pyaqcv.CaliperSingleEdge_get_sensitivity_threshold(self)

    def set_contrast_threshold(self, contrast_threshold):
        return _pyaqcv.CaliperSingleEdge_set_contrast_threshold(self, contrast_threshold)

    def get_contrast_threshold(self):
        return _pyaqcv.CaliperSingleEdge_get_contrast_threshold(self)

    def set_filter_half_size(self, size):
        return _pyaqcv.CaliperSingleEdge_set_filter_half_size(self, size)

    def get_filter_half_size(self):
        return _pyaqcv.CaliperSingleEdge_get_filter_half_size(self)

    def set_max_result_num(self, num):
        return _pyaqcv.CaliperSingleEdge_set_max_result_num(self, num)

    def get_max_result_num(self):
        return _pyaqcv.CaliperSingleEdge_get_max_result_num(self)

    def set_edge_order(self, type):
        return _pyaqcv.CaliperSingleEdge_set_edge_order(self, type)

    def get_edge_order(self):
        return _pyaqcv.CaliperSingleEdge_get_edge_order(self)

    def enable_function_contrast(self, enable):
        return _pyaqcv.CaliperSingleEdge_enable_function_contrast(self, enable)

    def is_function_contrast_enabled(self):
        return _pyaqcv.CaliperSingleEdge_is_function_contrast_enabled(self)

    def set_function_contrast(self, X0, X1, XC, Y0, Y1):
        return _pyaqcv.CaliperSingleEdge_set_function_contrast(self, X0, X1, XC, Y0, Y1)

    def get_function_contrast(self, X0, X1, XC, Y0, Y1):
        return _pyaqcv.CaliperSingleEdge_get_function_contrast(self, X0, X1, XC, Y0, Y1)

    def enable_function_center_distance(self, enable):
        return _pyaqcv.CaliperSingleEdge_enable_function_center_distance(self, enable)

    def is_function_center_distance_enabled(self):
        return _pyaqcv.CaliperSingleEdge_is_function_center_distance_enabled(self)

    def set_function_center_distance(self, X0, X1, XC, Y0, Y1):
        return _pyaqcv.CaliperSingleEdge_set_function_center_distance(self, X0, X1, XC, Y0, Y1)

    def get_function_center_distance(self, X0, X1, XC, Y0, Y1):
        return _pyaqcv.CaliperSingleEdge_get_function_center_distance(self, X0, X1, XC, Y0, Y1)

    def enable_function_center_offset(self, enable):
        return _pyaqcv.CaliperSingleEdge_enable_function_center_offset(self, enable)

    def is_function_center_offset_enabled(self):
        return _pyaqcv.CaliperSingleEdge_is_function_center_offset_enabled(self)

    def set_function_center_offset(self, X0, X1, XC, Y0, Y1):
        return _pyaqcv.CaliperSingleEdge_set_function_center_offset(self, X0, X1, XC, Y0, Y1)

    def get_function_center_offset(self, X0, X1, XC, Y0, Y1):
        return _pyaqcv.CaliperSingleEdge_get_function_center_offset(self, X0, X1, XC, Y0, Y1)

    def enable_function_polarity(self, enable):
        return _pyaqcv.CaliperSingleEdge_enable_function_polarity(self, enable)

    def is_function_polarity_enabled(self):
        return _pyaqcv.CaliperSingleEdge_is_function_polarity_enabled(self)

    def set_function_polarity(self, X0, X1, XC, Y0, Y1):
        return _pyaqcv.CaliperSingleEdge_set_function_polarity(self, X0, X1, XC, Y0, Y1)

    def get_function_polarity(self, X0, X1, XC, Y0, Y1):
        return _pyaqcv.CaliperSingleEdge_get_function_polarity(self, X0, X1, XC, Y0, Y1)

    def enable_function_light_polarity(self, enable):
        return _pyaqcv.CaliperSingleEdge_enable_function_light_polarity(self, enable)

    def is_function_light_polarity_enabled(self):
        return _pyaqcv.CaliperSingleEdge_is_function_light_polarity_enabled(self)

    def set_function_light_polarity(self, X0, X1, XC, Y0, Y1):
        return _pyaqcv.CaliperSingleEdge_set_function_light_polarity(self, X0, X1, XC, Y0, Y1)

    def get_function_light_polarity(self, X0, X1, XC, Y0, Y1):
        return _pyaqcv.CaliperSingleEdge_get_function_light_polarity(self, X0, X1, XC, Y0, Y1)

    def enable_function_dark_polarity(self, enable):
        return _pyaqcv.CaliperSingleEdge_enable_function_dark_polarity(self, enable)

    def is_function_dark_polarity_enabled(self):
        return _pyaqcv.CaliperSingleEdge_is_function_dark_polarity_enabled(self)

    def set_function_dark_polarity(self, X0, X1, XC, Y0, Y1):
        return _pyaqcv.CaliperSingleEdge_set_function_dark_polarity(self, X0, X1, XC, Y0, Y1)

    def get_function_dark_polarity(self, X0, X1, XC, Y0, Y1):
        return _pyaqcv.CaliperSingleEdge_get_function_dark_polarity(self, X0, X1, XC, Y0, Y1)

    def set_mask_region(self, mask_region):
        return _pyaqcv.CaliperSingleEdge_set_mask_region(self, mask_region)

    def get_mask_region(self):
        return _pyaqcv.CaliperSingleEdge_get_mask_region(self)

    def execute(self, image, roi):
        return _pyaqcv.CaliperSingleEdge_execute(self, image, roi)

    def get_result_num(self):
        return _pyaqcv.CaliperSingleEdge_get_result_num(self)

    def get_caliper_result(self, index, res):
        return _pyaqcv.CaliperSingleEdge_get_caliper_result(self, index, res)

    def get_project_image(self):
        return _pyaqcv.CaliperSingleEdge_get_project_image(self)

    def get_contrast_image(self):
        return _pyaqcv.CaliperSingleEdge_get_contrast_image(self)

    def clear_result(self):
        return _pyaqcv.CaliperSingleEdge_clear_result(self)

# Register CaliperSingleEdge in _pyaqcv:
_pyaqcv.CaliperSingleEdge_swigregister(CaliperSingleEdge)

class CaliperDualEdgeResult(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pyaqcv.CaliperDualEdgeResult_swiginit(self, _pyaqcv.new_CaliperDualEdgeResult())
    score = property(_pyaqcv.CaliperDualEdgeResult_score_get, _pyaqcv.CaliperDualEdgeResult_score_set)
    center_point = property(_pyaqcv.CaliperDualEdgeResult_center_point_get, _pyaqcv.CaliperDualEdgeResult_center_point_set)
    center_offset = property(_pyaqcv.CaliperDualEdgeResult_center_offset_get, _pyaqcv.CaliperDualEdgeResult_center_offset_set)
    two_edge_width = property(_pyaqcv.CaliperDualEdgeResult_two_edge_width_get, _pyaqcv.CaliperDualEdgeResult_two_edge_width_set)
    edge1_point = property(_pyaqcv.CaliperDualEdgeResult_edge1_point_get, _pyaqcv.CaliperDualEdgeResult_edge1_point_set)
    edge1_point_offset = property(_pyaqcv.CaliperDualEdgeResult_edge1_point_offset_get, _pyaqcv.CaliperDualEdgeResult_edge1_point_offset_set)
    edge1_point_contrast = property(_pyaqcv.CaliperDualEdgeResult_edge1_point_contrast_get, _pyaqcv.CaliperDualEdgeResult_edge1_point_contrast_set)
    edge2_point = property(_pyaqcv.CaliperDualEdgeResult_edge2_point_get, _pyaqcv.CaliperDualEdgeResult_edge2_point_set)
    edge2_point_offset = property(_pyaqcv.CaliperDualEdgeResult_edge2_point_offset_get, _pyaqcv.CaliperDualEdgeResult_edge2_point_offset_set)
    edge2_point_contrast = property(_pyaqcv.CaliperDualEdgeResult_edge2_point_contrast_get, _pyaqcv.CaliperDualEdgeResult_edge2_point_contrast_set)
    __swig_destroy__ = _pyaqcv.delete_CaliperDualEdgeResult

# Register CaliperDualEdgeResult in _pyaqcv:
_pyaqcv.CaliperDualEdgeResult_swigregister(CaliperDualEdgeResult)

class CaliperDualEdge(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pyaqcv.CaliperDualEdge_swiginit(self, _pyaqcv.new_CaliperDualEdge())
    __swig_destroy__ = _pyaqcv.delete_CaliperDualEdge

    def set_edge_polarity(self, edge1_polarity, edge2_polarity):
        return _pyaqcv.CaliperDualEdge_set_edge_polarity(self, edge1_polarity, edge2_polarity)

    def get_edge1_polarity(self):
        return _pyaqcv.CaliperDualEdge_get_edge1_polarity(self)

    def get_edge2_polarity(self):
        return _pyaqcv.CaliperDualEdge_get_edge2_polarity(self)

    def set_edge_pair_width(self, edge_pair_width):
        return _pyaqcv.CaliperDualEdge_set_edge_pair_width(self, edge_pair_width)

    def get_edge_pair_width(self):
        return _pyaqcv.CaliperDualEdge_get_edge_pair_width(self)

    def set_contrast_threshold(self, contrast_threshold):
        return _pyaqcv.CaliperDualEdge_set_contrast_threshold(self, contrast_threshold)

    def get_contrast_threshold(self):
        return _pyaqcv.CaliperDualEdge_get_contrast_threshold(self)

    def set_filter_half_size(self, size):
        return _pyaqcv.CaliperDualEdge_set_filter_half_size(self, size)

    def get_filter_half_size(self):
        return _pyaqcv.CaliperDualEdge_get_filter_half_size(self)

    def set_max_result_num(self, num):
        return _pyaqcv.CaliperDualEdge_set_max_result_num(self, num)

    def get_max_result_num(self):
        return _pyaqcv.CaliperDualEdge_get_max_result_num(self)

    def enable_function_contrast(self, enable):
        return _pyaqcv.CaliperDualEdge_enable_function_contrast(self, enable)

    def is_function_contrast_enabled(self):
        return _pyaqcv.CaliperDualEdge_is_function_contrast_enabled(self)

    def set_function_contrast(self, X0, X1, XC, Y0, Y1):
        return _pyaqcv.CaliperDualEdge_set_function_contrast(self, X0, X1, XC, Y0, Y1)

    def get_function_contrast(self, X0, X1, XC, Y0, Y1):
        return _pyaqcv.CaliperDualEdge_get_function_contrast(self, X0, X1, XC, Y0, Y1)

    def enable_function_center_distance(self, enable):
        return _pyaqcv.CaliperDualEdge_enable_function_center_distance(self, enable)

    def is_function_center_distance_enabled(self):
        return _pyaqcv.CaliperDualEdge_is_function_center_distance_enabled(self)

    def set_function_center_distance(self, X0, X1, XC, Y0, Y1):
        return _pyaqcv.CaliperDualEdge_set_function_center_distance(self, X0, X1, XC, Y0, Y1)

    def get_function_center_distance(self, X0, X1, XC, Y0, Y1):
        return _pyaqcv.CaliperDualEdge_get_function_center_distance(self, X0, X1, XC, Y0, Y1)

    def enable_function_center_offset(self, enable):
        return _pyaqcv.CaliperDualEdge_enable_function_center_offset(self, enable)

    def is_function_center_offset_enabled(self):
        return _pyaqcv.CaliperDualEdge_is_function_center_offset_enabled(self)

    def set_function_center_offset(self, X0, X1, XC, Y0, Y1):
        return _pyaqcv.CaliperDualEdge_set_function_center_offset(self, X0, X1, XC, Y0, Y1)

    def get_function_center_offset(self, X0, X1, XC, Y0, Y1):
        return _pyaqcv.CaliperDualEdge_get_function_center_offset(self, X0, X1, XC, Y0, Y1)

    def enable_function_center_distance_norm(self, enable):
        return _pyaqcv.CaliperDualEdge_enable_function_center_distance_norm(self, enable)

    def is_function_center_distance_norm_enabled(self):
        return _pyaqcv.CaliperDualEdge_is_function_center_distance_norm_enabled(self)

    def set_function_center_distance_norm(self, X0, X1, XC, Y0, Y1):
        return _pyaqcv.CaliperDualEdge_set_function_center_distance_norm(self, X0, X1, XC, Y0, Y1)

    def get_function_center_distance_norm(self, X0, X1, XC, Y0, Y1):
        return _pyaqcv.CaliperDualEdge_get_function_center_distance_norm(self, X0, X1, XC, Y0, Y1)

    def enable_function_center_offset_norm(self, enable):
        return _pyaqcv.CaliperDualEdge_enable_function_center_offset_norm(self, enable)

    def is_function_center_offset_norm_enabled(self):
        return _pyaqcv.CaliperDualEdge_is_function_center_offset_norm_enabled(self)

    def set_function_center_offset_norm(self, X0, X1, XC, Y0, Y1):
        return _pyaqcv.CaliperDualEdge_set_function_center_offset_norm(self, X0, X1, XC, Y0, Y1)

    def get_function_center_offset_norm(self, X0, X1, XC, Y0, Y1):
        return _pyaqcv.CaliperDualEdge_get_function_center_offset_norm(self, X0, X1, XC, Y0, Y1)

    def enable_function_width_norm(self, enable):
        return _pyaqcv.CaliperDualEdge_enable_function_width_norm(self, enable)

    def is_function_width_norm_enabled(self):
        return _pyaqcv.CaliperDualEdge_is_function_width_norm_enabled(self)

    def set_function_width_norm(self, X0, X1, XC, Y0, Y1):
        return _pyaqcv.CaliperDualEdge_set_function_width_norm(self, X0, X1, XC, Y0, Y1)

    def get_function_width_norm(self, X0, X1, XC, Y0, Y1):
        return _pyaqcv.CaliperDualEdge_get_function_width_norm(self, X0, X1, XC, Y0, Y1)

    def enable_function_width_diff_norm(self, enable):
        return _pyaqcv.CaliperDualEdge_enable_function_width_diff_norm(self, enable)

    def is_function_width_diff_norm_enabled(self):
        return _pyaqcv.CaliperDualEdge_is_function_width_diff_norm_enabled(self)

    def set_function_width_diff_norm(self, X0, X1, XC, Y0, Y1, X0H, X1H, XCH, Y0H, Y1H):
        return _pyaqcv.CaliperDualEdge_set_function_width_diff_norm(self, X0, X1, XC, Y0, Y1, X0H, X1H, XCH, Y0H, Y1H)

    def get_function_width_diff_norm(self, X0, X1, XC, Y0, Y1, X0H, X1H, XCH, Y0H, Y1H):
        return _pyaqcv.CaliperDualEdge_get_function_width_diff_norm(self, X0, X1, XC, Y0, Y1, X0H, X1H, XCH, Y0H, Y1H)

    def enable_function_width_diff_norm_abs(self, enable):
        return _pyaqcv.CaliperDualEdge_enable_function_width_diff_norm_abs(self, enable)

    def is_function_width_diff_norm_abs_enabled(self):
        return _pyaqcv.CaliperDualEdge_is_function_width_diff_norm_abs_enabled(self)

    def set_function_width_diff_norm_abs(self, X0, X1, XC, Y0, Y1):
        return _pyaqcv.CaliperDualEdge_set_function_width_diff_norm_abs(self, X0, X1, XC, Y0, Y1)

    def get_function_width_diff_norm_abs(self, X0, X1, XC, Y0, Y1):
        return _pyaqcv.CaliperDualEdge_get_function_width_diff_norm_abs(self, X0, X1, XC, Y0, Y1)

    def enable_function_straddle(self, enable):
        return _pyaqcv.CaliperDualEdge_enable_function_straddle(self, enable)

    def is_function_straddle_enabled(self):
        return _pyaqcv.CaliperDualEdge_is_function_straddle_enabled(self)

    def enable_function_average_gray(self, enable):
        return _pyaqcv.CaliperDualEdge_enable_function_average_gray(self, enable)

    def is_function_average_gray_enabled(self):
        return _pyaqcv.CaliperDualEdge_is_function_average_gray_enabled(self)

    def set_function_average_gray(self, X0, X1, XC, Y0, Y1):
        return _pyaqcv.CaliperDualEdge_set_function_average_gray(self, X0, X1, XC, Y0, Y1)

    def get_function_average_gray(self, X0, X1, XC, Y0, Y1):
        return _pyaqcv.CaliperDualEdge_get_function_average_gray(self, X0, X1, XC, Y0, Y1)

    def set_mask_region(self, mask_region):
        return _pyaqcv.CaliperDualEdge_set_mask_region(self, mask_region)

    def get_mask_region(self):
        return _pyaqcv.CaliperDualEdge_get_mask_region(self)

    def execute(self, image, roi):
        return _pyaqcv.CaliperDualEdge_execute(self, image, roi)

    def get_result_num(self):
        return _pyaqcv.CaliperDualEdge_get_result_num(self)

    def get_caliper_result(self, index, res):
        return _pyaqcv.CaliperDualEdge_get_caliper_result(self, index, res)

    def get_project_image(self):
        return _pyaqcv.CaliperDualEdge_get_project_image(self)

    def get_contrast_image(self):
        return _pyaqcv.CaliperDualEdge_get_contrast_image(self)

    def clear_result(self):
        return _pyaqcv.CaliperDualEdge_clear_result(self)

# Register CaliperDualEdge in _pyaqcv:
_pyaqcv.CaliperDualEdge_swigregister(CaliperDualEdge)

kCaliperEdgeSortByScore = _pyaqcv.kCaliperEdgeSortByScore
kCaliperEdgeSortByDirection = _pyaqcv.kCaliperEdgeSortByDirection
class AnnularCaliper(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pyaqcv.AnnularCaliper_swiginit(self, _pyaqcv.new_AnnularCaliper())
    __swig_destroy__ = _pyaqcv.delete_AnnularCaliper

    def set_edge_polarity(self, edge_polarity):
        return _pyaqcv.AnnularCaliper_set_edge_polarity(self, edge_polarity)

    def get_edge_polarity(self):
        return _pyaqcv.AnnularCaliper_get_edge_polarity(self)

    def set_sensitivity_threshold(self, sensitivity_threshold):
        return _pyaqcv.AnnularCaliper_set_sensitivity_threshold(self, sensitivity_threshold)

    def get_sensitivity_threshold(self):
        return _pyaqcv.AnnularCaliper_get_sensitivity_threshold(self)

    def set_contrast_threshold(self, contrast_threshold):
        return _pyaqcv.AnnularCaliper_set_contrast_threshold(self, contrast_threshold)

    def get_contrast_threshold(self):
        return _pyaqcv.AnnularCaliper_get_contrast_threshold(self)

    def set_filter_half_size(self, size):
        return _pyaqcv.AnnularCaliper_set_filter_half_size(self, size)

    def get_filter_half_size(self):
        return _pyaqcv.AnnularCaliper_get_filter_half_size(self)

    def set_max_result_num(self, num):
        return _pyaqcv.AnnularCaliper_set_max_result_num(self, num)

    def get_max_result_num(self):
        return _pyaqcv.AnnularCaliper_get_max_result_num(self)

    def enable_angle_normalization(self, enable):
        return _pyaqcv.AnnularCaliper_enable_angle_normalization(self, enable)

    def is_angle_normalization(self):
        return _pyaqcv.AnnularCaliper_is_angle_normalization(self)

    def set_edge_sort_type(self, sort_type):
        return _pyaqcv.AnnularCaliper_set_edge_sort_type(self, sort_type)

    def get_edge_sort_type(self):
        return _pyaqcv.AnnularCaliper_get_edge_sort_type(self)

    def execute(self, image, roi, radius_end):
        return _pyaqcv.AnnularCaliper_execute(self, image, roi, radius_end)

    def get_result_num(self):
        return _pyaqcv.AnnularCaliper_get_result_num(self)

    def get_caliper_result(self, index, caliper_result):
        return _pyaqcv.AnnularCaliper_get_caliper_result(self, index, caliper_result)

    def get_caliper_results(self):
        return _pyaqcv.AnnularCaliper_get_caliper_results(self)

# Register AnnularCaliper in _pyaqcv:
_pyaqcv.AnnularCaliper_swigregister(AnnularCaliper)

class FindLine(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pyaqcv.FindLine_swiginit(self, _pyaqcv.new_FindLine())
    __swig_destroy__ = _pyaqcv.delete_FindLine

    def set_roi(self, roi):
        return _pyaqcv.FindLine_set_roi(self, roi)

    def get_roi(self, roi):
        return _pyaqcv.FindLine_get_roi(self, roi)

    def set_edge_polarity(self, polarity):
        return _pyaqcv.FindLine_set_edge_polarity(self, polarity)

    def get_edge_polarity(self):
        return _pyaqcv.FindLine_get_edge_polarity(self)

    def set_edge_threshold(self, thresh):
        return _pyaqcv.FindLine_set_edge_threshold(self, thresh)

    def get_edge_threshold(self):
        return _pyaqcv.FindLine_get_edge_threshold(self)

    def set_edge_order(self, type):
        return _pyaqcv.FindLine_set_edge_order(self, type)

    def get_edge_order(self):
        return _pyaqcv.FindLine_get_edge_order(self)

    def set_edge_width(self, edge_width):
        return _pyaqcv.FindLine_set_edge_width(self, edge_width)

    def get_edge_width(self):
        return _pyaqcv.FindLine_get_edge_width(self)

    def set_caliper_auto(self, enable=True):
        return _pyaqcv.FindLine_set_caliper_auto(self, enable)

    def is_caliper_auto(self):
        return _pyaqcv.FindLine_is_caliper_auto(self)

    def set_caliper_width(self, width):
        return _pyaqcv.FindLine_set_caliper_width(self, width)

    def get_caliper_width(self):
        return _pyaqcv.FindLine_get_caliper_width(self)

    def set_caliper_space(self, space):
        return _pyaqcv.FindLine_set_caliper_space(self, space)

    def get_caliper_space(self):
        return _pyaqcv.FindLine_get_caliper_space(self)

    def set_outliers_ratio(self, ratio=0.3):
        return _pyaqcv.FindLine_set_outliers_ratio(self, ratio)

    def get_outliers_ratio(self):
        return _pyaqcv.FindLine_get_outliers_ratio(self)

    def set_mask_region(self, mask_region):
        return _pyaqcv.FindLine_set_mask_region(self, mask_region)

    def get_mask_region(self):
        return _pyaqcv.FindLine_get_mask_region(self)

    def execute(self, img, res, rms=None):
        return _pyaqcv.FindLine_execute(self, img, res, rms)

    def get_edge_points(self, edge_points, inner_mask=None):
        return _pyaqcv.FindLine_get_edge_points(self, edge_points, inner_mask)

    def get_caliper_rects(self):
        return _pyaqcv.FindLine_get_caliper_rects(self)

# Register FindLine in _pyaqcv:
_pyaqcv.FindLine_swigregister(FindLine)

CaliperDirectionType_kInnerToOuter = _pyaqcv.CaliperDirectionType_kInnerToOuter
CaliperDirectionType_kOuterToInner = _pyaqcv.CaliperDirectionType_kOuterToInner
class FindCircle(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pyaqcv.FindCircle_swiginit(self, _pyaqcv.new_FindCircle())
    __swig_destroy__ = _pyaqcv.delete_FindCircle

    def set_roi(self, *args):
        return _pyaqcv.FindCircle_set_roi(self, *args)

    def get_roi(self, *args):
        return _pyaqcv.FindCircle_get_roi(self, *args)

    def set_edge_polarity(self, polarity):
        return _pyaqcv.FindCircle_set_edge_polarity(self, polarity)

    def get_edge_polarity(self):
        return _pyaqcv.FindCircle_get_edge_polarity(self)

    def set_edge_threshold(self, thresh):
        return _pyaqcv.FindCircle_set_edge_threshold(self, thresh)

    def get_edge_threshold(self):
        return _pyaqcv.FindCircle_get_edge_threshold(self)

    def set_edge_order(self, type):
        return _pyaqcv.FindCircle_set_edge_order(self, type)

    def get_edge_order(self):
        return _pyaqcv.FindCircle_get_edge_order(self)

    def set_edge_width(self, edge_width):
        return _pyaqcv.FindCircle_set_edge_width(self, edge_width)

    def get_edge_width(self):
        return _pyaqcv.FindCircle_get_edge_width(self)

    def set_caliper_auto(self, enable=True):
        return _pyaqcv.FindCircle_set_caliper_auto(self, enable)

    def is_caliper_auto(self):
        return _pyaqcv.FindCircle_is_caliper_auto(self)

    def set_caliper_width(self, width):
        return _pyaqcv.FindCircle_set_caliper_width(self, width)

    def get_caliper_width(self):
        return _pyaqcv.FindCircle_get_caliper_width(self)

    def set_caliper_space(self, space):
        return _pyaqcv.FindCircle_set_caliper_space(self, space)

    def get_caliper_space(self):
        return _pyaqcv.FindCircle_get_caliper_space(self)

    def set_outliers_ratio(self, ratio=0.3):
        return _pyaqcv.FindCircle_set_outliers_ratio(self, ratio)

    def get_outliers_ratio(self):
        return _pyaqcv.FindCircle_get_outliers_ratio(self)

    def set_mask_region(self, mask_region):
        return _pyaqcv.FindCircle_set_mask_region(self, mask_region)

    def get_mask_region(self):
        return _pyaqcv.FindCircle_get_mask_region(self)

    def execute(self, img, res, rms=None):
        return _pyaqcv.FindCircle_execute(self, img, res, rms)

    def get_edge_points(self, edge_points, inner_mask=None):
        return _pyaqcv.FindCircle_get_edge_points(self, edge_points, inner_mask)

    def get_caliper_rects(self):
        return _pyaqcv.FindCircle_get_caliper_rects(self)

# Register FindCircle in _pyaqcv:
_pyaqcv.FindCircle_swigregister(FindCircle)

class FindEllipse(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    kLeastSquare = _pyaqcv.FindEllipse_kLeastSquare
    kHuber = _pyaqcv.FindEllipse_kHuber
    kTukey = _pyaqcv.FindEllipse_kTukey
    kExpectedOrientation = _pyaqcv.FindEllipse_kExpectedOrientation

    def __init__(self):
        _pyaqcv.FindEllipse_swiginit(self, _pyaqcv.new_FindEllipse())
    __swig_destroy__ = _pyaqcv.delete_FindEllipse

    def set_roi(self, ellipse, start_angle, angle_span, caliper_height, direct):
        return _pyaqcv.FindEllipse_set_roi(self, ellipse, start_angle, angle_span, caliper_height, direct)

    def get_roi(self, ellipse, start_angle, angle_span, caliper_height, direct):
        return _pyaqcv.FindEllipse_get_roi(self, ellipse, start_angle, angle_span, caliper_height, direct)

    def set_edge_polarity(self, polarity):
        return _pyaqcv.FindEllipse_set_edge_polarity(self, polarity)

    def get_edge_polarity(self):
        return _pyaqcv.FindEllipse_get_edge_polarity(self)

    def set_edge_threshold(self, thresh):
        return _pyaqcv.FindEllipse_set_edge_threshold(self, thresh)

    def get_edge_threshold(self):
        return _pyaqcv.FindEllipse_get_edge_threshold(self)

    def set_edge_order(self, type):
        return _pyaqcv.FindEllipse_set_edge_order(self, type)

    def get_edge_order(self):
        return _pyaqcv.FindEllipse_get_edge_order(self)

    def set_edge_width(self, edge_width):
        return _pyaqcv.FindEllipse_set_edge_width(self, edge_width)

    def get_edge_width(self):
        return _pyaqcv.FindEllipse_get_edge_width(self)

    def set_caliper_auto(self, enable=True):
        return _pyaqcv.FindEllipse_set_caliper_auto(self, enable)

    def is_caliper_auto(self):
        return _pyaqcv.FindEllipse_is_caliper_auto(self)

    def set_caliper_width(self, width):
        return _pyaqcv.FindEllipse_set_caliper_width(self, width)

    def get_caliper_width(self):
        return _pyaqcv.FindEllipse_get_caliper_width(self)

    def set_caliper_space(self, space):
        return _pyaqcv.FindEllipse_set_caliper_space(self, space)

    def get_caliper_space(self):
        return _pyaqcv.FindEllipse_get_caliper_space(self)

    def set_fit_constraint(self, fit_constraint):
        return _pyaqcv.FindEllipse_set_fit_constraint(self, fit_constraint)

    def get_fit_constraint(self):
        return _pyaqcv.FindEllipse_get_fit_constraint(self)

    def set_expected_orientation(self, expected_orientation):
        return _pyaqcv.FindEllipse_set_expected_orientation(self, expected_orientation)

    def get_expected_orientation(self):
        return _pyaqcv.FindEllipse_get_expected_orientation(self)

    def set_mask_region(self, mask_region):
        return _pyaqcv.FindEllipse_set_mask_region(self, mask_region)

    def get_mask_region(self):
        return _pyaqcv.FindEllipse_get_mask_region(self)

    def execute(self, img, res):
        return _pyaqcv.FindEllipse_execute(self, img, res)

    def get_edge_points(self, edge_points):
        return _pyaqcv.FindEllipse_get_edge_points(self, edge_points)

    def get_caliper_rects(self):
        return _pyaqcv.FindEllipse_get_caliper_rects(self)

# Register FindEllipse in _pyaqcv:
_pyaqcv.FindEllipse_swigregister(FindEllipse)

class FindEdgePair(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, profile_caliperset):
        _pyaqcv.FindEdgePair_swiginit(self, _pyaqcv.new_FindEdgePair(profile_caliperset))
    __swig_destroy__ = _pyaqcv.delete_FindEdgePair

    def set_profile_caliperset(self, profile_caliperset):
        return _pyaqcv.FindEdgePair_set_profile_caliperset(self, profile_caliperset)

    def get_profile_caliperset(self, profile_caliperset):
        return _pyaqcv.FindEdgePair_get_profile_caliperset(self, profile_caliperset)

    def enable_pair_size(self, pair_size_enabled):
        return _pyaqcv.FindEdgePair_enable_pair_size(self, pair_size_enabled)

    def get_pair_size_enabled(self):
        return _pyaqcv.FindEdgePair_get_pair_size_enabled(self)

    def set_pair_size(self, pair_size):
        return _pyaqcv.FindEdgePair_set_pair_size(self, pair_size)

    def get_pair_size(self):
        return _pyaqcv.FindEdgePair_get_pair_size(self)

    def set_find_direction(self, find_direction):
        return _pyaqcv.FindEdgePair_set_find_direction(self, find_direction)

    def get_find_direction(self):
        return _pyaqcv.FindEdgePair_get_find_direction(self)

    def set_contrast_percent_threshold(self, contrast_percent_threshold):
        return _pyaqcv.FindEdgePair_set_contrast_percent_threshold(self, contrast_percent_threshold)

    def get_contrast_percent_threshold(self):
        return _pyaqcv.FindEdgePair_get_contrast_percent_threshold(self)

    def set_edge_polarity(self, edge_polarity_edge1, edge_polarity_edge2):
        return _pyaqcv.FindEdgePair_set_edge_polarity(self, edge_polarity_edge1, edge_polarity_edge2)

    def get_edge1_polarity(self):
        return _pyaqcv.FindEdgePair_get_edge1_polarity(self)

    def get_edge2_polarity(self):
        return _pyaqcv.FindEdgePair_get_edge2_polarity(self)

    def set_contrast_threshold(self, contrast_threshold):
        return _pyaqcv.FindEdgePair_set_contrast_threshold(self, contrast_threshold)

    def get_contrast_threshold(self):
        return _pyaqcv.FindEdgePair_get_contrast_threshold(self)

    def set_filter_half_size(self, filter_half_size):
        return _pyaqcv.FindEdgePair_set_filter_half_size(self, filter_half_size)

    def get_filter_half_size(self):
        return _pyaqcv.FindEdgePair_get_filter_half_size(self)

    def set_outlier_ratio(self, max_distance):
        return _pyaqcv.FindEdgePair_set_outlier_ratio(self, max_distance)

    def get_outlier_ratio(self):
        return _pyaqcv.FindEdgePair_get_outlier_ratio(self)

    def set_mask_region(self, mask_region):
        return _pyaqcv.FindEdgePair_set_mask_region(self, mask_region)

    def get_mask_region(self):
        return _pyaqcv.FindEdgePair_get_mask_region(self)

    def execute(self, img):
        return _pyaqcv.FindEdgePair_execute(self, img)

    def get_caliper_rects(self):
        return _pyaqcv.FindEdgePair_get_caliper_rects(self)

    def get_edge1_points(self, edge_points, used_mask):
        return _pyaqcv.FindEdgePair_get_edge1_points(self, edge_points, used_mask)

    def get_edge2_points(self, edge_points, used_mask):
        return _pyaqcv.FindEdgePair_get_edge2_points(self, edge_points, used_mask)

    def get_line_edge_pair(self, seg1, seg2):
        return _pyaqcv.FindEdgePair_get_line_edge_pair(self, seg1, seg2)

    def get_arc_edge_pair(self, arc1, arc2):
        return _pyaqcv.FindEdgePair_get_arc_edge_pair(self, arc1, arc2)

# Register FindEdgePair in _pyaqcv:
_pyaqcv.FindEdgePair_swigregister(FindEdgePair)

class CaliperEdgeSet(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pyaqcv.CaliperEdgeSet_swiginit(self, _pyaqcv.new_CaliperEdgeSet())
    __swig_destroy__ = _pyaqcv.delete_CaliperEdgeSet

    def clear(self):
        return _pyaqcv.CaliperEdgeSet_clear(self)
    caplier_results = property(_pyaqcv.CaliperEdgeSet_caplier_results_get, _pyaqcv.CaliperEdgeSet_caplier_results_set)
    estimate_pts = property(_pyaqcv.CaliperEdgeSet_estimate_pts_get, _pyaqcv.CaliperEdgeSet_estimate_pts_set)
    fit_pts = property(_pyaqcv.CaliperEdgeSet_fit_pts_get, _pyaqcv.CaliperEdgeSet_fit_pts_set)

# Register CaliperEdgeSet in _pyaqcv:
_pyaqcv.CaliperEdgeSet_swigregister(CaliperEdgeSet)

class SingleEdgeInspectResultBase(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pyaqcv.delete_SingleEdgeInspectResultBase

    def clear(self):
        return _pyaqcv.SingleEdgeInspectResultBase_clear(self)
    edges = property(_pyaqcv.SingleEdgeInspectResultBase_edges_get, _pyaqcv.SingleEdgeInspectResultBase_edges_set)
    defects = property(_pyaqcv.SingleEdgeInspectResultBase_defects_get, _pyaqcv.SingleEdgeInspectResultBase_defects_set)
    gaps = property(_pyaqcv.SingleEdgeInspectResultBase_gaps_get, _pyaqcv.SingleEdgeInspectResultBase_gaps_set)

# Register SingleEdgeInspectResultBase in _pyaqcv:
_pyaqcv.SingleEdgeInspectResultBase_swigregister(SingleEdgeInspectResultBase)

class SingleEdgeInspect(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, profile_caliperset):
        _pyaqcv.SingleEdgeInspect_swiginit(self, _pyaqcv.new_SingleEdgeInspect(profile_caliperset))
    __swig_destroy__ = _pyaqcv.delete_SingleEdgeInspect

    def set_profile_caliperset(self, profile_caliperset):
        return _pyaqcv.SingleEdgeInspect_set_profile_caliperset(self, profile_caliperset)

    def get_profile_caliperset(self, profile_caliperset):
        return _pyaqcv.SingleEdgeInspect_get_profile_caliperset(self, profile_caliperset)

    def get_find_direction(self):
        return _pyaqcv.SingleEdgeInspect_get_find_direction(self)

    def set_find_direction(self, find_direction):
        return _pyaqcv.SingleEdgeInspect_set_find_direction(self, find_direction)

    def set_edge_polarity(self, edge_polarity):
        return _pyaqcv.SingleEdgeInspect_set_edge_polarity(self, edge_polarity)

    def get_edge_polarity(self):
        return _pyaqcv.SingleEdgeInspect_get_edge_polarity(self)

    def set_contrast_threshold(self, contrast_threshold):
        return _pyaqcv.SingleEdgeInspect_set_contrast_threshold(self, contrast_threshold)

    def get_contrast_threshold(self):
        return _pyaqcv.SingleEdgeInspect_get_contrast_threshold(self)

    def set_filter_half_size(self, filter_half_size):
        return _pyaqcv.SingleEdgeInspect_set_filter_half_size(self, filter_half_size)

    def get_filter_half_size(self):
        return _pyaqcv.SingleEdgeInspect_get_filter_half_size(self)

    def set_edge_score_param(self, param):
        return _pyaqcv.SingleEdgeInspect_set_edge_score_param(self, param)

    def get_edge_score_param(self):
        return _pyaqcv.SingleEdgeInspect_get_edge_score_param(self)

    def enable_edge_fit(self, enable):
        return _pyaqcv.SingleEdgeInspect_enable_edge_fit(self, enable)

    def get_edge_fit_enabled(self):
        return _pyaqcv.SingleEdgeInspect_get_edge_fit_enabled(self)

    def set_edge_base_model(self, base_model):
        return _pyaqcv.SingleEdgeInspect_set_edge_base_model(self, base_model)

    def get_edge_base_model(self, base_model):
        return _pyaqcv.SingleEdgeInspect_get_edge_base_model(self, base_model)

    def set_edge_fit_param(self, param):
        return _pyaqcv.SingleEdgeInspect_set_edge_fit_param(self, param)

    def get_edge_fit_param(self):
        return _pyaqcv.SingleEdgeInspect_get_edge_fit_param(self)

    def set_defect_params(self, param):
        return _pyaqcv.SingleEdgeInspect_set_defect_params(self, param)

    def get_defect_params(self):
        return _pyaqcv.SingleEdgeInspect_get_defect_params(self)

    def set_gap_params(self, param):
        return _pyaqcv.SingleEdgeInspect_set_gap_params(self, param)

    def get_gap_params(self):
        return _pyaqcv.SingleEdgeInspect_get_gap_params(self)

    def execute(self, img):
        return _pyaqcv.SingleEdgeInspect_execute(self, img)

    def get_inspect_result(self, res):
        return _pyaqcv.SingleEdgeInspect_get_inspect_result(self, res)

# Register SingleEdgeInspect in _pyaqcv:
_pyaqcv.SingleEdgeInspect_swigregister(SingleEdgeInspect)

class CaliperDualEdgeSet(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pyaqcv.CaliperDualEdgeSet_swiginit(self, _pyaqcv.new_CaliperDualEdgeSet())
    __swig_destroy__ = _pyaqcv.delete_CaliperDualEdgeSet

    def clear(self):
        return _pyaqcv.CaliperDualEdgeSet_clear(self)
    caliper_edges = property(_pyaqcv.CaliperDualEdgeSet_caliper_edges_get, _pyaqcv.CaliperDualEdgeSet_caliper_edges_set)
    estimate_pts = property(_pyaqcv.CaliperDualEdgeSet_estimate_pts_get, _pyaqcv.CaliperDualEdgeSet_estimate_pts_set)
    fit_pts_edge1 = property(_pyaqcv.CaliperDualEdgeSet_fit_pts_edge1_get, _pyaqcv.CaliperDualEdgeSet_fit_pts_edge1_set)
    fit_pts_edge2 = property(_pyaqcv.CaliperDualEdgeSet_fit_pts_edge2_get, _pyaqcv.CaliperDualEdgeSet_fit_pts_edge2_set)

# Register CaliperDualEdgeSet in _pyaqcv:
_pyaqcv.CaliperDualEdgeSet_swigregister(CaliperDualEdgeSet)

class DualEdgeInspectResultBase(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pyaqcv.delete_DualEdgeInspectResultBase

    def clear(self):
        return _pyaqcv.DualEdgeInspectResultBase_clear(self)
    edges = property(_pyaqcv.DualEdgeInspectResultBase_edges_get, _pyaqcv.DualEdgeInspectResultBase_edges_set)
    defects_edge1 = property(_pyaqcv.DualEdgeInspectResultBase_defects_edge1_get, _pyaqcv.DualEdgeInspectResultBase_defects_edge1_set)
    defects_edge2 = property(_pyaqcv.DualEdgeInspectResultBase_defects_edge2_get, _pyaqcv.DualEdgeInspectResultBase_defects_edge2_set)
    gaps = property(_pyaqcv.DualEdgeInspectResultBase_gaps_get, _pyaqcv.DualEdgeInspectResultBase_gaps_set)

# Register DualEdgeInspectResultBase in _pyaqcv:
_pyaqcv.DualEdgeInspectResultBase_swigregister(DualEdgeInspectResultBase)

class DualEdgeInspect(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, profile):
        _pyaqcv.DualEdgeInspect_swiginit(self, _pyaqcv.new_DualEdgeInspect(profile))
    __swig_destroy__ = _pyaqcv.delete_DualEdgeInspect

    def set_profile_caliperset(self, profile_caliperset):
        return _pyaqcv.DualEdgeInspect_set_profile_caliperset(self, profile_caliperset)

    def get_profile_caliperset(self, profile_caliperset):
        return _pyaqcv.DualEdgeInspect_get_profile_caliperset(self, profile_caliperset)

    def get_find_direction(self):
        return _pyaqcv.DualEdgeInspect_get_find_direction(self)

    def set_find_direction(self, find_direction):
        return _pyaqcv.DualEdgeInspect_set_find_direction(self, find_direction)

    def set_edge_polarity(self, edge_polarity_edge1, edge_polarity_edge2):
        return _pyaqcv.DualEdgeInspect_set_edge_polarity(self, edge_polarity_edge1, edge_polarity_edge2)

    def get_edge1_polarity(self):
        return _pyaqcv.DualEdgeInspect_get_edge1_polarity(self)

    def get_edge2_polarity(self):
        return _pyaqcv.DualEdgeInspect_get_edge2_polarity(self)

    def set_contrast_threshold(self, contrast_threshold):
        return _pyaqcv.DualEdgeInspect_set_contrast_threshold(self, contrast_threshold)

    def get_contrast_threshold(self):
        return _pyaqcv.DualEdgeInspect_get_contrast_threshold(self)

    def set_filter_half_size(self, filter_half_size):
        return _pyaqcv.DualEdgeInspect_set_filter_half_size(self, filter_half_size)

    def get_filter_half_size(self):
        return _pyaqcv.DualEdgeInspect_get_filter_half_size(self)

    def set_edge_score_param(self, param):
        return _pyaqcv.DualEdgeInspect_set_edge_score_param(self, param)

    def get_edge_score_param(self):
        return _pyaqcv.DualEdgeInspect_get_edge_score_param(self)

    def enable_edge_fit(self, enable):
        return _pyaqcv.DualEdgeInspect_enable_edge_fit(self, enable)

    def get_edge_fit_enabled(self):
        return _pyaqcv.DualEdgeInspect_get_edge_fit_enabled(self)

    def set_edge_base_model(self, base_model_edge1, base_model_edge2):
        return _pyaqcv.DualEdgeInspect_set_edge_base_model(self, base_model_edge1, base_model_edge2)

    def get_edge_base_model(self, base_model_edge1, base_model_edge2):
        return _pyaqcv.DualEdgeInspect_get_edge_base_model(self, base_model_edge1, base_model_edge2)

    def set_edge_fit_param(self, param):
        return _pyaqcv.DualEdgeInspect_set_edge_fit_param(self, param)

    def get_edge_fit_param(self):
        return _pyaqcv.DualEdgeInspect_get_edge_fit_param(self)

    def set_defect_params(self, param):
        return _pyaqcv.DualEdgeInspect_set_defect_params(self, param)

    def get_defect_params(self):
        return _pyaqcv.DualEdgeInspect_get_defect_params(self)

    def set_gap_params(self, param):
        return _pyaqcv.DualEdgeInspect_set_gap_params(self, param)

    def get_gap_params(self):
        return _pyaqcv.DualEdgeInspect_get_gap_params(self)

    def execute(self, img):
        return _pyaqcv.DualEdgeInspect_execute(self, img)

    def get_inspect_result(self, res):
        return _pyaqcv.DualEdgeInspect_get_inspect_result(self, res)

# Register DualEdgeInspect in _pyaqcv:
_pyaqcv.DualEdgeInspect_swigregister(DualEdgeInspect)

class EdgeWidth(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    width_seg = property(_pyaqcv.EdgeWidth_width_seg_get, _pyaqcv.EdgeWidth_width_seg_set)
    width = property(_pyaqcv.EdgeWidth_width_get, _pyaqcv.EdgeWidth_width_set)

    def __init__(self):
        _pyaqcv.EdgeWidth_swiginit(self, _pyaqcv.new_EdgeWidth())
    __swig_destroy__ = _pyaqcv.delete_EdgeWidth

# Register EdgeWidth in _pyaqcv:
_pyaqcv.EdgeWidth_swigregister(EdgeWidth)

class EdgeWidthMeasureResult(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def clear(self):
        return _pyaqcv.EdgeWidthMeasureResult_clear(self)
    edges_points = property(_pyaqcv.EdgeWidthMeasureResult_edges_points_get, _pyaqcv.EdgeWidthMeasureResult_edges_points_set)
    edges_width = property(_pyaqcv.EdgeWidthMeasureResult_edges_width_get, _pyaqcv.EdgeWidthMeasureResult_edges_width_set)
    max_width_id = property(_pyaqcv.EdgeWidthMeasureResult_max_width_id_get, _pyaqcv.EdgeWidthMeasureResult_max_width_id_set)
    min_width_id = property(_pyaqcv.EdgeWidthMeasureResult_min_width_id_get, _pyaqcv.EdgeWidthMeasureResult_min_width_id_set)

    def __init__(self):
        _pyaqcv.EdgeWidthMeasureResult_swiginit(self, _pyaqcv.new_EdgeWidthMeasureResult())
    __swig_destroy__ = _pyaqcv.delete_EdgeWidthMeasureResult

# Register EdgeWidthMeasureResult in _pyaqcv:
_pyaqcv.EdgeWidthMeasureResult_swigregister(EdgeWidthMeasureResult)

class EdgeWidthMeasure(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, profile_caliperset):
        _pyaqcv.EdgeWidthMeasure_swiginit(self, _pyaqcv.new_EdgeWidthMeasure(profile_caliperset))
    __swig_destroy__ = _pyaqcv.delete_EdgeWidthMeasure

    def set_dual_edge_type(self, dual_edge_type):
        return _pyaqcv.EdgeWidthMeasure_set_dual_edge_type(self, dual_edge_type)

    def get_dual_edge_type(self):
        return _pyaqcv.EdgeWidthMeasure_get_dual_edge_type(self)

    def set_profile_caliperset(self, profile_caliperset):
        return _pyaqcv.EdgeWidthMeasure_set_profile_caliperset(self, profile_caliperset)

    def get_profile_caliperset(self, profile_caliperset):
        return _pyaqcv.EdgeWidthMeasure_get_profile_caliperset(self, profile_caliperset)

    def set_find_direction(self, find_direction):
        return _pyaqcv.EdgeWidthMeasure_set_find_direction(self, find_direction)

    def get_find_direction(self):
        return _pyaqcv.EdgeWidthMeasure_get_find_direction(self)

    def set_edge_polarity(self, edge_polarity_edge1, edge_polarity_edge2):
        return _pyaqcv.EdgeWidthMeasure_set_edge_polarity(self, edge_polarity_edge1, edge_polarity_edge2)

    def get_edge1_polarity(self):
        return _pyaqcv.EdgeWidthMeasure_get_edge1_polarity(self)

    def get_edge2_polarity(self):
        return _pyaqcv.EdgeWidthMeasure_get_edge2_polarity(self)

    def set_contrast_threshold(self, contrast_threshold):
        return _pyaqcv.EdgeWidthMeasure_set_contrast_threshold(self, contrast_threshold)

    def get_contrast_threshold(self):
        return _pyaqcv.EdgeWidthMeasure_get_contrast_threshold(self)

    def set_sensitivity_threshold(self, sensitivity_threshold):
        return _pyaqcv.EdgeWidthMeasure_set_sensitivity_threshold(self, sensitivity_threshold)

    def get_sensitivity_threshold(self):
        return _pyaqcv.EdgeWidthMeasure_get_sensitivity_threshold(self)

    def set_filter_half_size(self, filter_half_size):
        return _pyaqcv.EdgeWidthMeasure_set_filter_half_size(self, filter_half_size)

    def get_filter_half_size(self):
        return _pyaqcv.EdgeWidthMeasure_get_filter_half_size(self)

    def set_edge_score_param(self, param):
        return _pyaqcv.EdgeWidthMeasure_set_edge_score_param(self, param)

    def get_edge_score_param(self):
        return _pyaqcv.EdgeWidthMeasure_get_edge_score_param(self)

    def set_edge_width_range(self, min_width, max_width):
        return _pyaqcv.EdgeWidthMeasure_set_edge_width_range(self, min_width, max_width)

    def get_edge_width_range(self, min_width, max_width):
        return _pyaqcv.EdgeWidthMeasure_get_edge_width_range(self, min_width, max_width)

    def execute(self, img):
        return _pyaqcv.EdgeWidthMeasure_execute(self, img)

    def get_measure_result(self, res):
        return _pyaqcv.EdgeWidthMeasure_get_measure_result(self, res)

# Register EdgeWidthMeasure in _pyaqcv:
_pyaqcv.EdgeWidthMeasure_swigregister(EdgeWidthMeasure)

class AnnularEdgeWidthMeasureResult(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    width = property(_pyaqcv.AnnularEdgeWidthMeasureResult_width_get, _pyaqcv.AnnularEdgeWidthMeasureResult_width_set)
    edge_angles = property(_pyaqcv.AnnularEdgeWidthMeasureResult_edge_angles_get, _pyaqcv.AnnularEdgeWidthMeasureResult_edge_angles_set)

    def __init__(self):
        _pyaqcv.AnnularEdgeWidthMeasureResult_swiginit(self, _pyaqcv.new_AnnularEdgeWidthMeasureResult())
    __swig_destroy__ = _pyaqcv.delete_AnnularEdgeWidthMeasureResult

# Register AnnularEdgeWidthMeasureResult in _pyaqcv:
_pyaqcv.AnnularEdgeWidthMeasureResult_swigregister(AnnularEdgeWidthMeasureResult)

class AnnularEdgeWidthMeasure(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pyaqcv.AnnularEdgeWidthMeasure_swiginit(self, _pyaqcv.new_AnnularEdgeWidthMeasure())
    __swig_destroy__ = _pyaqcv.delete_AnnularEdgeWidthMeasure

    def set_edge_polarity(self, edge_polarity):
        return _pyaqcv.AnnularEdgeWidthMeasure_set_edge_polarity(self, edge_polarity)

    def get_edge_polarity(self):
        return _pyaqcv.AnnularEdgeWidthMeasure_get_edge_polarity(self)

    def set_contrast_threshold(self, contrast_threshold):
        return _pyaqcv.AnnularEdgeWidthMeasure_set_contrast_threshold(self, contrast_threshold)

    def get_contrast_threshold(self):
        return _pyaqcv.AnnularEdgeWidthMeasure_get_contrast_threshold(self)

    def set_sensitivity_threshold(self, sensitivity_threshold):
        return _pyaqcv.AnnularEdgeWidthMeasure_set_sensitivity_threshold(self, sensitivity_threshold)

    def get_sensitivity_threshold(self):
        return _pyaqcv.AnnularEdgeWidthMeasure_get_sensitivity_threshold(self)

    def set_filter_half_size(self, filter_half_size):
        return _pyaqcv.AnnularEdgeWidthMeasure_set_filter_half_size(self, filter_half_size)

    def get_filter_half_size(self):
        return _pyaqcv.AnnularEdgeWidthMeasure_get_filter_half_size(self)

    def execute(self, image, roi, radius_end):
        return _pyaqcv.AnnularEdgeWidthMeasure_execute(self, image, roi, radius_end)

    def get_edges_num(self):
        return _pyaqcv.AnnularEdgeWidthMeasure_get_edges_num(self)

    def get_width(self, dual_edge_type, result):
        return _pyaqcv.AnnularEdgeWidthMeasure_get_width(self, dual_edge_type, result)

    def get_specifies_edges_width(self, index1, index2, result):
        return _pyaqcv.AnnularEdgeWidthMeasure_get_specifies_edges_width(self, index1, index2, result)

# Register AnnularEdgeWidthMeasure in _pyaqcv:
_pyaqcv.AnnularEdgeWidthMeasure_swigregister(AnnularEdgeWidthMeasure)

kBarTypeNone = _pyaqcv.kBarTypeNone
kBarTypeCode128 = _pyaqcv.kBarTypeCode128
kBarTypeCode39 = _pyaqcv.kBarTypeCode39
kBarTypeCode93 = _pyaqcv.kBarTypeCode93
kBarTypeEAN13 = _pyaqcv.kBarTypeEAN13
kBarTypeEAN8 = _pyaqcv.kBarTypeEAN8
kBarTypeUPCA = _pyaqcv.kBarTypeUPCA
kBarTypeUPCE = _pyaqcv.kBarTypeUPCE
kBarDecodeModelTypeAdvance = _pyaqcv.kBarDecodeModelTypeAdvance
kBarDecodeModelTypeFast = _pyaqcv.kBarDecodeModelTypeFast
kBarDecodeModelTypeStandard = _pyaqcv.kBarDecodeModelTypeStandard
kBarCheckSumTypeCheckNone = _pyaqcv.kBarCheckSumTypeCheckNone
kBarCheckSumTypeVerify = _pyaqcv.kBarCheckSumTypeVerify
kBarCheckSumTypeVerifyAndTransmit = _pyaqcv.kBarCheckSumTypeVerifyAndTransmit
class BarDecodeParam(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pyaqcv.BarDecodeParam_swiginit(self, _pyaqcv.new_BarDecodeParam())
    __swig_destroy__ = _pyaqcv.delete_BarDecodeParam
    type = property(_pyaqcv.BarDecodeParam_type_get, _pyaqcv.BarDecodeParam_type_set)
    enable_quiet_zone = property(_pyaqcv.BarDecodeParam_enable_quiet_zone_get, _pyaqcv.BarDecodeParam_enable_quiet_zone_set)

# Register BarDecodeParam in _pyaqcv:
_pyaqcv.BarDecodeParam_swigregister(BarDecodeParam)

class BarDecodeParamCode128(BarDecodeParam):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pyaqcv.BarDecodeParamCode128_swiginit(self, _pyaqcv.new_BarDecodeParamCode128())
    __swig_destroy__ = _pyaqcv.delete_BarDecodeParamCode128

# Register BarDecodeParamCode128 in _pyaqcv:
_pyaqcv.BarDecodeParamCode128_swigregister(BarDecodeParamCode128)

class BarDecodeParamCode39(BarDecodeParam):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    check_sum_character = property(_pyaqcv.BarDecodeParamCode39_check_sum_character_get, _pyaqcv.BarDecodeParamCode39_check_sum_character_set)
    full_ascii = property(_pyaqcv.BarDecodeParamCode39_full_ascii_get, _pyaqcv.BarDecodeParamCode39_full_ascii_set)

    def __init__(self):
        _pyaqcv.BarDecodeParamCode39_swiginit(self, _pyaqcv.new_BarDecodeParamCode39())
    __swig_destroy__ = _pyaqcv.delete_BarDecodeParamCode39

# Register BarDecodeParamCode39 in _pyaqcv:
_pyaqcv.BarDecodeParamCode39_swigregister(BarDecodeParamCode39)

class BarDecodeParamCode93(BarDecodeParam):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pyaqcv.BarDecodeParamCode93_swiginit(self, _pyaqcv.new_BarDecodeParamCode93())
    __swig_destroy__ = _pyaqcv.delete_BarDecodeParamCode93

# Register BarDecodeParamCode93 in _pyaqcv:
_pyaqcv.BarDecodeParamCode93_swigregister(BarDecodeParamCode93)

class BarDecodeParamEAN13(BarDecodeParam):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pyaqcv.BarDecodeParamEAN13_swiginit(self, _pyaqcv.new_BarDecodeParamEAN13())
    __swig_destroy__ = _pyaqcv.delete_BarDecodeParamEAN13

# Register BarDecodeParamEAN13 in _pyaqcv:
_pyaqcv.BarDecodeParamEAN13_swigregister(BarDecodeParamEAN13)

class BarDecodeParamEAN8(BarDecodeParam):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pyaqcv.BarDecodeParamEAN8_swiginit(self, _pyaqcv.new_BarDecodeParamEAN8())
    __swig_destroy__ = _pyaqcv.delete_BarDecodeParamEAN8

# Register BarDecodeParamEAN8 in _pyaqcv:
_pyaqcv.BarDecodeParamEAN8_swigregister(BarDecodeParamEAN8)

class BarDecodeParamUPCA(BarDecodeParam):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pyaqcv.BarDecodeParamUPCA_swiginit(self, _pyaqcv.new_BarDecodeParamUPCA())
    __swig_destroy__ = _pyaqcv.delete_BarDecodeParamUPCA

# Register BarDecodeParamUPCA in _pyaqcv:
_pyaqcv.BarDecodeParamUPCA_swigregister(BarDecodeParamUPCA)

class BarDecodeParamUPCE(BarDecodeParam):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pyaqcv.BarDecodeParamUPCE_swiginit(self, _pyaqcv.new_BarDecodeParamUPCE())
    __swig_destroy__ = _pyaqcv.delete_BarDecodeParamUPCE

# Register BarDecodeParamUPCE in _pyaqcv:
_pyaqcv.BarDecodeParamUPCE_swigregister(BarDecodeParamUPCE)

class BarcodeResult(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pyaqcv.BarcodeResult_swiginit(self, _pyaqcv.new_BarcodeResult())
    score = property(_pyaqcv.BarcodeResult_score_get, _pyaqcv.BarcodeResult_score_set)
    code_string = property(_pyaqcv.BarcodeResult_code_string_get, _pyaqcv.BarcodeResult_code_string_set)
    error_msg = property(_pyaqcv.BarcodeResult_error_msg_get, _pyaqcv.BarcodeResult_error_msg_set)
    barcode_type = property(_pyaqcv.BarcodeResult_barcode_type_get, _pyaqcv.BarcodeResult_barcode_type_set)
    region = property(_pyaqcv.BarcodeResult_region_get, _pyaqcv.BarcodeResult_region_set)
    __swig_destroy__ = _pyaqcv.delete_BarcodeResult

# Register BarcodeResult in _pyaqcv:
_pyaqcv.BarcodeResult_swigregister(BarcodeResult)

class BarcodeReader(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pyaqcv.BarcodeReader_swiginit(self, _pyaqcv.new_BarcodeReader())

    def set_barcode_types(self, barcode_types):
        return _pyaqcv.BarcodeReader_set_barcode_types(self, barcode_types)

    def get_barcode_types(self):
        return _pyaqcv.BarcodeReader_get_barcode_types(self)

    def set_decode_param(self, decode_param):
        return _pyaqcv.BarcodeReader_set_decode_param(self, decode_param)

    def get_decode_param(self, barcode_type):
        return _pyaqcv.BarcodeReader_get_decode_param(self, barcode_type)

    def set_decode_model_type(self, decode_model_type):
        return _pyaqcv.BarcodeReader_set_decode_model_type(self, decode_model_type)

    def get_decode_model_type(self):
        return _pyaqcv.BarcodeReader_get_decode_model_type(self)

    def set_num_scanlines(self, num_scanning):
        return _pyaqcv.BarcodeReader_set_num_scanlines(self, num_scanning)

    def get_num_scanlines(self):
        return _pyaqcv.BarcodeReader_get_num_scanlines(self)

    def detect(self, image, regions):
        return _pyaqcv.BarcodeReader_detect(self, image, regions)

    def decode(self, image, region, result):
        return _pyaqcv.BarcodeReader_decode(self, image, region, result)

    def detect_and_decode(self, image, results, keep_all_detections):
        return _pyaqcv.BarcodeReader_detect_and_decode(self, image, results, keep_all_detections)
    __swig_destroy__ = _pyaqcv.delete_BarcodeReader

# Register BarcodeReader in _pyaqcv:
_pyaqcv.BarcodeReader_swigregister(BarcodeReader)

Code2DModelType_kAnyType = _pyaqcv.Code2DModelType_kAnyType
Code2DModelType_kDMECC200 = _pyaqcv.Code2DModelType_kDMECC200
Code2DModelType_kQR = _pyaqcv.Code2DModelType_kQR
Code2DModelType_kQRM1 = _pyaqcv.Code2DModelType_kQRM1
Code2DModelType_kQRM2 = _pyaqcv.Code2DModelType_kQRM2
Code2DModelType_kMicroQR = _pyaqcv.Code2DModelType_kMicroQR
Code2DPolarity_kAnyPolarity = _pyaqcv.Code2DPolarity_kAnyPolarity
Code2DPolarity_kLightInDark = _pyaqcv.Code2DPolarity_kLightInDark
Code2DPolarity_kDarkInLight = _pyaqcv.Code2DPolarity_kDarkInLight
Code2DPreProcessControlBit_kOnlyBinary = _pyaqcv.Code2DPreProcessControlBit_kOnlyBinary
Code2DPreProcessControlBit_kWhole = _pyaqcv.Code2DPreProcessControlBit_kWhole
Code2DPreProcessControlBit_kbyDeepNet = _pyaqcv.Code2DPreProcessControlBit_kbyDeepNet
Code2DTrainInfos_kImageInvaild = _pyaqcv.Code2DTrainInfos_kImageInvaild
Code2DTrainInfos_kTimeout = _pyaqcv.Code2DTrainInfos_kTimeout
Code2DTrainInfos_kNotTraining = _pyaqcv.Code2DTrainInfos_kNotTraining
Code2DTrainInfos_kSuccess = _pyaqcv.Code2DTrainInfos_kSuccess
Code2DTrainInfos_kFailureToEnhance = _pyaqcv.Code2DTrainInfos_kFailureToEnhance
Code2DTrainInfos_kFailureToBinary = _pyaqcv.Code2DTrainInfos_kFailureToBinary
Code2DTrainInfos_kFailureToCorrection = _pyaqcv.Code2DTrainInfos_kFailureToCorrection
Code2DTrainInfos_kFailureToFindVersion = _pyaqcv.Code2DTrainInfos_kFailureToFindVersion
Code2DTrainInfos_kFailureToReconstruct = _pyaqcv.Code2DTrainInfos_kFailureToReconstruct
Code2DTrainInfos_kFailureToDecode = _pyaqcv.Code2DTrainInfos_kFailureToDecode
Code2DErrorCorrrectLevel_kGradeUnkown = _pyaqcv.Code2DErrorCorrrectLevel_kGradeUnkown
Code2DErrorCorrrectLevel_kGradeL = _pyaqcv.Code2DErrorCorrrectLevel_kGradeL
Code2DErrorCorrrectLevel_kGradeM = _pyaqcv.Code2DErrorCorrrectLevel_kGradeM
Code2DErrorCorrrectLevel_kGradeQ = _pyaqcv.Code2DErrorCorrrectLevel_kGradeQ
Code2DErrorCorrrectLevel_kGradeH = _pyaqcv.Code2DErrorCorrrectLevel_kGradeH
class ECB(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    number_total_codewords = property(_pyaqcv.ECB_number_total_codewords_get, _pyaqcv.ECB_number_total_codewords_set)
    number_data_codewords = property(_pyaqcv.ECB_number_data_codewords_get, _pyaqcv.ECB_number_data_codewords_set)
    capacity_correctable_error = property(_pyaqcv.ECB_capacity_correctable_error_get, _pyaqcv.ECB_capacity_correctable_error_set)
    p_value = property(_pyaqcv.ECB_p_value_get, _pyaqcv.ECB_p_value_set)

    def __init__(self, *args):
        _pyaqcv.ECB_swiginit(self, _pyaqcv.new_ECB(*args))
    __swig_destroy__ = _pyaqcv.delete_ECB

# Register ECB in _pyaqcv:
_pyaqcv.ECB_swigregister(ECB)

class Code2DDecoderParameter(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    same_class_count = property(_pyaqcv.Code2DDecoderParameter_same_class_count_get, _pyaqcv.Code2DDecoderParameter_same_class_count_set)
    version = property(_pyaqcv.Code2DDecoderParameter_version_get, _pyaqcv.Code2DDecoderParameter_version_set)
    polarity = property(_pyaqcv.Code2DDecoderParameter_polarity_get, _pyaqcv.Code2DDecoderParameter_polarity_set)
    module_width_range = property(_pyaqcv.Code2DDecoderParameter_module_width_range_get, _pyaqcv.Code2DDecoderParameter_module_width_range_set)
    control_bit = property(_pyaqcv.Code2DDecoderParameter_control_bit_get, _pyaqcv.Code2DDecoderParameter_control_bit_set)
    increment = property(_pyaqcv.Code2DDecoderParameter_increment_get, _pyaqcv.Code2DDecoderParameter_increment_set)
    mirrory = property(_pyaqcv.Code2DDecoderParameter_mirrory_get, _pyaqcv.Code2DDecoderParameter_mirrory_set)
    amplification = property(_pyaqcv.Code2DDecoderParameter_amplification_get, _pyaqcv.Code2DDecoderParameter_amplification_set)
    reduction = property(_pyaqcv.Code2DDecoderParameter_reduction_get, _pyaqcv.Code2DDecoderParameter_reduction_set)

    def __init__(self):
        _pyaqcv.Code2DDecoderParameter_swiginit(self, _pyaqcv.new_Code2DDecoderParameter())
    __swig_destroy__ = _pyaqcv.delete_Code2DDecoderParameter

# Register Code2DDecoderParameter in _pyaqcv:
_pyaqcv.Code2DDecoderParameter_swigregister(Code2DDecoderParameter)

class Code2DResult(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    valid = property(_pyaqcv.Code2DResult_valid_get, _pyaqcv.Code2DResult_valid_set)
    code_string = property(_pyaqcv.Code2DResult_code_string_get, _pyaqcv.Code2DResult_code_string_set)
    raw_result = property(_pyaqcv.Code2DResult_raw_result_get, _pyaqcv.Code2DResult_raw_result_set)
    boundary = property(_pyaqcv.Code2DResult_boundary_get, _pyaqcv.Code2DResult_boundary_set)

    def __init__(self, *args):
        _pyaqcv.Code2DResult_swiginit(self, _pyaqcv.new_Code2DResult(*args))
    __swig_destroy__ = _pyaqcv.delete_Code2DResult

# Register Code2DResult in _pyaqcv:
_pyaqcv.Code2DResult_swigregister(Code2DResult)

class Code2DDecoderBase(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pyaqcv.delete_Code2DDecoderBase

    def set_module_width_range(self, min_val, max_val):
        return _pyaqcv.Code2DDecoderBase_set_module_width_range(self, min_val, max_val)

    def get_module_width_range(self, min_val, max_val):
        return _pyaqcv.Code2DDecoderBase_get_module_width_range(self, min_val, max_val)

    def set_polarity(self, polarity):
        return _pyaqcv.Code2DDecoderBase_set_polarity(self, polarity)

    def get_polarity(self):
        return _pyaqcv.Code2DDecoderBase_get_polarity(self)

    def set_time_limit(self, time_limit_millisecond):
        return _pyaqcv.Code2DDecoderBase_set_time_limit(self, time_limit_millisecond)

    def get_time_limit(self):
        return _pyaqcv.Code2DDecoderBase_get_time_limit(self)

    def train(self, datasets_img, datasets_regions, training_infos):
        return _pyaqcv.Code2DDecoderBase_train(self, datasets_img, datasets_regions, training_infos)

    def reset_trained_params(self):
        return _pyaqcv.Code2DDecoderBase_reset_trained_params(self)

    def execute(self, img, regions, results):
        return _pyaqcv.Code2DDecoderBase_execute(self, img, regions, results)

# Register Code2DDecoderBase in _pyaqcv:
_pyaqcv.Code2DDecoderBase_swigregister(Code2DDecoderBase)

class DMCodeDecoder(Code2DDecoderBase):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pyaqcv.DMCodeDecoder_swiginit(self, _pyaqcv.new_DMCodeDecoder())
    __swig_destroy__ = _pyaqcv.delete_DMCodeDecoder

# Register DMCodeDecoder in _pyaqcv:
_pyaqcv.DMCodeDecoder_swigregister(DMCodeDecoder)

class QRCodeDecoder(Code2DDecoderBase):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pyaqcv.QRCodeDecoder_swiginit(self, _pyaqcv.new_QRCodeDecoder())
    __swig_destroy__ = _pyaqcv.delete_QRCodeDecoder

    def set_model_type(self, mode_type):
        return _pyaqcv.QRCodeDecoder_set_model_type(self, mode_type)

# Register QRCodeDecoder in _pyaqcv:
_pyaqcv.QRCodeDecoder_swigregister(QRCodeDecoder)

class ROIArray(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def gen_rrect_array(self, roi_range, row, col, width, height, angle, res):
        return _pyaqcv.ROIArray_gen_rrect_array(self, roi_range, row, col, width, height, angle, res)

    def crop_image(self, rects, src, imgs, straight):
        return _pyaqcv.ROIArray_crop_image(self, rects, src, imgs, straight)

    def __init__(self):
        _pyaqcv.ROIArray_swiginit(self, _pyaqcv.new_ROIArray())
    __swig_destroy__ = _pyaqcv.delete_ROIArray

# Register ROIArray in _pyaqcv:
_pyaqcv.ROIArray_swigregister(ROIArray)

class RegionLogicOperation(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pyaqcv.RegionLogicOperation_swiginit(self, _pyaqcv.new_RegionLogicOperation())
    __swig_destroy__ = _pyaqcv.delete_RegionLogicOperation
    kUnion = _pyaqcv.RegionLogicOperation_kUnion
    kIntersection = _pyaqcv.RegionLogicOperation_kIntersection
    kDifference = _pyaqcv.RegionLogicOperation_kDifference
    kSymmetricDifference = _pyaqcv.RegionLogicOperation_kSymmetricDifference

    def set_region1(self, *args):
        return _pyaqcv.RegionLogicOperation_set_region1(self, *args)

    def set_region2(self, *args):
        return _pyaqcv.RegionLogicOperation_set_region2(self, *args)

    def set_operation(self, op):
        return _pyaqcv.RegionLogicOperation_set_operation(self, op)

    def set_crop_image(self, crop=True):
        return _pyaqcv.RegionLogicOperation_set_crop_image(self, crop)

    def set_keep_image_size(self, keep=True):
        return _pyaqcv.RegionLogicOperation_set_keep_image_size(self, keep)

    def set_fill_color(self, color):
        return _pyaqcv.RegionLogicOperation_set_fill_color(self, color)

    def execute(self, src, dst, region, affine):
        return _pyaqcv.RegionLogicOperation_execute(self, src, dst, region, affine)

# Register RegionLogicOperation in _pyaqcv:
_pyaqcv.RegionLogicOperation_swigregister(RegionLogicOperation)

class AqvBarcodeReader(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pyaqcv.AqvBarcodeReader_swiginit(self, _pyaqcv.new_AqvBarcodeReader())
    __swig_destroy__ = _pyaqcv.delete_AqvBarcodeReader

    def set_barcode_type(self, bar_type):
        return _pyaqcv.AqvBarcodeReader_set_barcode_type(self, bar_type)

    def get_barcode_type(self):
        return _pyaqcv.AqvBarcodeReader_get_barcode_type(self)

    def set_enable_quiet_zone(self, enable):
        return _pyaqcv.AqvBarcodeReader_set_enable_quiet_zone(self, enable)

    def get_enable_quiet_zone(self):
        return _pyaqcv.AqvBarcodeReader_get_enable_quiet_zone(self)

    def decode(self, image, region, result):
        return _pyaqcv.AqvBarcodeReader_decode(self, image, region, result)

# Register AqvBarcodeReader in _pyaqcv:
_pyaqcv.AqvBarcodeReader_swigregister(AqvBarcodeReader)

class AqvCode2DDecoder(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pyaqcv.AqvCode2DDecoder_swiginit(self, _pyaqcv.new_AqvCode2DDecoder())
    __swig_destroy__ = _pyaqcv.delete_AqvCode2DDecoder

    def set_module_width_range(self, min_val, max_val):
        return _pyaqcv.AqvCode2DDecoder_set_module_width_range(self, min_val, max_val)

    def get_module_width_range(self, min_val, max_val):
        return _pyaqcv.AqvCode2DDecoder_get_module_width_range(self, min_val, max_val)

    def set_polarity(self, polarity):
        return _pyaqcv.AqvCode2DDecoder_set_polarity(self, polarity)

    def get_polarity(self):
        return _pyaqcv.AqvCode2DDecoder_get_polarity(self)

    def train(self, datasets_img, datasets_regions, training_infos):
        return _pyaqcv.AqvCode2DDecoder_train(self, datasets_img, datasets_regions, training_infos)

    def reset_trained_params(self):
        return _pyaqcv.AqvCode2DDecoder_reset_trained_params(self)

    def set_time_limit(self, time_limit_millisecond):
        return _pyaqcv.AqvCode2DDecoder_set_time_limit(self, time_limit_millisecond)

    def get_time_limit(self):
        return _pyaqcv.AqvCode2DDecoder_get_time_limit(self)

    def execute(self, img, regions, results):
        return _pyaqcv.AqvCode2DDecoder_execute(self, img, regions, results)

# Register AqvCode2DDecoder in _pyaqcv:
_pyaqcv.AqvCode2DDecoder_swigregister(AqvCode2DDecoder)


def crop_roi(img, roi, cropped_img, affine_mat, invert=False, keep_size=False, straight=False, fill_up_border=False):
    return _pyaqcv.crop_roi(img, roi, cropped_img, affine_mat, invert, keep_size, straight, fill_up_border)
class CaliperMeasurePairsResults(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    edge1_pts = property(_pyaqcv.CaliperMeasurePairsResults_edge1_pts_get, _pyaqcv.CaliperMeasurePairsResults_edge1_pts_set)
    edge1_contrasts = property(_pyaqcv.CaliperMeasurePairsResults_edge1_contrasts_get, _pyaqcv.CaliperMeasurePairsResults_edge1_contrasts_set)
    edge1_polarities = property(_pyaqcv.CaliperMeasurePairsResults_edge1_polarities_get, _pyaqcv.CaliperMeasurePairsResults_edge1_polarities_set)
    edge2_pts = property(_pyaqcv.CaliperMeasurePairsResults_edge2_pts_get, _pyaqcv.CaliperMeasurePairsResults_edge2_pts_set)
    edge2_contrasts = property(_pyaqcv.CaliperMeasurePairsResults_edge2_contrasts_get, _pyaqcv.CaliperMeasurePairsResults_edge2_contrasts_set)
    edge2_polarities = property(_pyaqcv.CaliperMeasurePairsResults_edge2_polarities_get, _pyaqcv.CaliperMeasurePairsResults_edge2_polarities_set)
    inter_distances = property(_pyaqcv.CaliperMeasurePairsResults_inter_distances_get, _pyaqcv.CaliperMeasurePairsResults_inter_distances_set)
    intral_distances = property(_pyaqcv.CaliperMeasurePairsResults_intral_distances_get, _pyaqcv.CaliperMeasurePairsResults_intral_distances_set)

    def __init__(self):
        _pyaqcv.CaliperMeasurePairsResults_swiginit(self, _pyaqcv.new_CaliperMeasurePairsResults())
    __swig_destroy__ = _pyaqcv.delete_CaliperMeasurePairsResults

# Register CaliperMeasurePairsResults in _pyaqcv:
_pyaqcv.CaliperMeasurePairsResults_swigregister(CaliperMeasurePairsResults)

class CaliperMeasurePairs(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    SelectType_kAll = _pyaqcv.CaliperMeasurePairs_SelectType_kAll
    SelectType_kFirstOnly = _pyaqcv.CaliperMeasurePairs_SelectType_kFirstOnly
    SelectType_kLastOnly = _pyaqcv.CaliperMeasurePairs_SelectType_kLastOnly

    def __init__(self):
        _pyaqcv.CaliperMeasurePairs_swiginit(self, _pyaqcv.new_CaliperMeasurePairs())
    __swig_destroy__ = _pyaqcv.delete_CaliperMeasurePairs

    def set_edge_polarity(self, edge1_polarity, edge2_polarity):
        return _pyaqcv.CaliperMeasurePairs_set_edge_polarity(self, edge1_polarity, edge2_polarity)

    def get_edge1_polarity(self):
        return _pyaqcv.CaliperMeasurePairs_get_edge1_polarity(self)

    def get_edge2_polarity(self):
        return _pyaqcv.CaliperMeasurePairs_get_edge2_polarity(self)

    def set_contrast_threshold(self, contrast_threshold):
        return _pyaqcv.CaliperMeasurePairs_set_contrast_threshold(self, contrast_threshold)

    def get_contrast_threshold(self):
        return _pyaqcv.CaliperMeasurePairs_get_contrast_threshold(self)

    def set_filter_half_size(self, size):
        return _pyaqcv.CaliperMeasurePairs_set_filter_half_size(self, size)

    def get_filter_half_size(self):
        return _pyaqcv.CaliperMeasurePairs_get_filter_half_size(self)

    def set_select_type(self, select_type):
        return _pyaqcv.CaliperMeasurePairs_set_select_type(self, select_type)

    def get_select_type(self):
        return _pyaqcv.CaliperMeasurePairs_get_select_type(self)

    def set_mask_region(self, mask_region):
        return _pyaqcv.CaliperMeasurePairs_set_mask_region(self, mask_region)

    def get_mask_region(self):
        return _pyaqcv.CaliperMeasurePairs_get_mask_region(self)

    def execute(self, image, roi, results):
        return _pyaqcv.CaliperMeasurePairs_execute(self, image, roi, results)

# Register CaliperMeasurePairs in _pyaqcv:
_pyaqcv.CaliperMeasurePairs_swigregister(CaliperMeasurePairs)

class Geometry3DBase(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    kUnkown = _pyaqcv.Geometry3DBase_kUnkown
    kPlane3D = _pyaqcv.Geometry3DBase_kPlane3D
    kSphere3D = _pyaqcv.Geometry3DBase_kSphere3D
    kLine3D = _pyaqcv.Geometry3DBase_kLine3D
    kLineSeg3D = _pyaqcv.Geometry3DBase_kLineSeg3D
    kCircle3D = _pyaqcv.Geometry3DBase_kCircle3D
    kAlignedBox3D = _pyaqcv.Geometry3DBase_kAlignedBox3D
    kBox3D = _pyaqcv.Geometry3DBase_kBox3D
    kCylinder3D = _pyaqcv.Geometry3DBase_kCylinder3D

    def __init__(self):
        _pyaqcv.Geometry3DBase_swiginit(self, _pyaqcv.new_Geometry3DBase())
    __swig_destroy__ = _pyaqcv.delete_Geometry3DBase

    def geometry_type(self):
        return _pyaqcv.Geometry3DBase_geometry_type(self)

# Register Geometry3DBase in _pyaqcv:
_pyaqcv.Geometry3DBase_swigregister(Geometry3DBase)

class Plane3D(Geometry3DBase):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _pyaqcv.Plane3D_swiginit(self, _pyaqcv.new_Plane3D(*args))
    __swig_destroy__ = _pyaqcv.delete_Plane3D

    def update(self, pt, normal):
        return _pyaqcv.Plane3D_update(self, pt, normal)

    def valid(self):
        return _pyaqcv.Plane3D_valid(self)

    def distance(self, pt):
        return _pyaqcv.Plane3D_distance(self, pt)

    def axis_aligned_distance(self, pt):
        return _pyaqcv.Plane3D_axis_aligned_distance(self, pt)

    def perpendicular_foot(self, pt):
        return _pyaqcv.Plane3D_perpendicular_foot(self, pt)

    def tilt(self):
        return _pyaqcv.Plane3D_tilt(self)

    def rotation(self):
        return _pyaqcv.Plane3D_rotation(self)

    def offset(self):
        return _pyaqcv.Plane3D_offset(self)

    def norm(self):
        return _pyaqcv.Plane3D_norm(self)

    def reverse_norm(self):
        return _pyaqcv.Plane3D_reverse_norm(self)

    def plane_point(self):
        return _pyaqcv.Plane3D_plane_point(self)

    @staticmethod
    def plane_angle(plane1, plane2):
        return _pyaqcv.Plane3D_plane_angle(plane1, plane2)

# Register Plane3D in _pyaqcv:
_pyaqcv.Plane3D_swigregister(Plane3D)

def Plane3D_plane_angle(plane1, plane2):
    return _pyaqcv.Plane3D_plane_angle(plane1, plane2)

class Sphere3D(Geometry3DBase):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _pyaqcv.Sphere3D_swiginit(self, _pyaqcv.new_Sphere3D(*args))
    __swig_destroy__ = _pyaqcv.delete_Sphere3D

    def radius(self):
        return _pyaqcv.Sphere3D_radius(self)

    def center(self):
        return _pyaqcv.Sphere3D_center(self)

    def update(self, center, radius):
        return _pyaqcv.Sphere3D_update(self, center, radius)

    def valid(self):
        return _pyaqcv.Sphere3D_valid(self)

    def distance(self, pt):
        return _pyaqcv.Sphere3D_distance(self, pt)

    def axis_aligned_distance(self, pt):
        return _pyaqcv.Sphere3D_axis_aligned_distance(self, pt)

# Register Sphere3D in _pyaqcv:
_pyaqcv.Sphere3D_swigregister(Sphere3D)

class Line3D(Geometry3DBase):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _pyaqcv.Line3D_swiginit(self, _pyaqcv.new_Line3D(*args))
    __swig_destroy__ = _pyaqcv.delete_Line3D

    def norm(self):
        return _pyaqcv.Line3D_norm(self)

    def point(self):
        return _pyaqcv.Line3D_point(self)

    def update(self, pt, direction):
        return _pyaqcv.Line3D_update(self, pt, direction)

    def valid(self):
        return _pyaqcv.Line3D_valid(self)

    def distance(self, pt):
        return _pyaqcv.Line3D_distance(self, pt)

    def perpendicular_foot(self, pt):
        return _pyaqcv.Line3D_perpendicular_foot(self, pt)

# Register Line3D in _pyaqcv:
_pyaqcv.Line3D_swigregister(Line3D)

class LineSeg3D(Geometry3DBase):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _pyaqcv.LineSeg3D_swiginit(self, _pyaqcv.new_LineSeg3D(*args))
    __swig_destroy__ = _pyaqcv.delete_LineSeg3D

    def norm(self):
        return _pyaqcv.LineSeg3D_norm(self)

    def point1(self):
        return _pyaqcv.LineSeg3D_point1(self)

    def point2(self):
        return _pyaqcv.LineSeg3D_point2(self)

    def length(self):
        return _pyaqcv.LineSeg3D_length(self)

    def update(self, pt1, pt2):
        return _pyaqcv.LineSeg3D_update(self, pt1, pt2)

    def valid(self):
        return _pyaqcv.LineSeg3D_valid(self)

# Register LineSeg3D in _pyaqcv:
_pyaqcv.LineSeg3D_swigregister(LineSeg3D)

class Circle3D(Geometry3DBase):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _pyaqcv.Circle3D_swiginit(self, _pyaqcv.new_Circle3D(*args))
    __swig_destroy__ = _pyaqcv.delete_Circle3D

    def update(self, center, normal, radius):
        return _pyaqcv.Circle3D_update(self, center, normal, radius)

    def valid(self):
        return _pyaqcv.Circle3D_valid(self)

    def norm(self):
        return _pyaqcv.Circle3D_norm(self)

    def center(self):
        return _pyaqcv.Circle3D_center(self)

    def radius(self):
        return _pyaqcv.Circle3D_radius(self)

# Register Circle3D in _pyaqcv:
_pyaqcv.Circle3D_swigregister(Circle3D)

class AlignedBox3D(Geometry3DBase):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _pyaqcv.AlignedBox3D_swiginit(self, _pyaqcv.new_AlignedBox3D(*args))
    __swig_destroy__ = _pyaqcv.delete_AlignedBox3D

    def update(self, center, size):
        return _pyaqcv.AlignedBox3D_update(self, center, size)

    def valid(self):
        return _pyaqcv.AlignedBox3D_valid(self)

    def center(self):
        return _pyaqcv.AlignedBox3D_center(self)

    def size(self):
        return _pyaqcv.AlignedBox3D_size(self)

# Register AlignedBox3D in _pyaqcv:
_pyaqcv.AlignedBox3D_swigregister(AlignedBox3D)

class Box3D(Geometry3DBase):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _pyaqcv.Box3D_swiginit(self, _pyaqcv.new_Box3D(*args))
    __swig_destroy__ = _pyaqcv.delete_Box3D

    def update(self, pose, size):
        return _pyaqcv.Box3D_update(self, pose, size)

    def valid(self):
        return _pyaqcv.Box3D_valid(self)

    def pose(self):
        return _pyaqcv.Box3D_pose(self)

    def center(self):
        return _pyaqcv.Box3D_center(self)

    def size(self):
        return _pyaqcv.Box3D_size(self)

# Register Box3D in _pyaqcv:
_pyaqcv.Box3D_swigregister(Box3D)

class Cylinder3D(Geometry3DBase):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _pyaqcv.Cylinder3D_swiginit(self, _pyaqcv.new_Cylinder3D(*args))
    __swig_destroy__ = _pyaqcv.delete_Cylinder3D

    def update(self, pose, radius, height):
        return _pyaqcv.Cylinder3D_update(self, pose, radius, height)

    def valid(self):
        return _pyaqcv.Cylinder3D_valid(self)

    def pose(self):
        return _pyaqcv.Cylinder3D_pose(self)

    def center(self):
        return _pyaqcv.Cylinder3D_center(self)

    def height(self):
        return _pyaqcv.Cylinder3D_height(self)

    def radius(self):
        return _pyaqcv.Cylinder3D_radius(self)

# Register Cylinder3D in _pyaqcv:
_pyaqcv.Cylinder3D_swigregister(Cylinder3D)

class RangeImage(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pyaqcv.RangeImage_swiginit(self, _pyaqcv.new_RangeImage())
    __swig_destroy__ = _pyaqcv.delete_RangeImage

    def clone(self):
        return _pyaqcv.RangeImage_clone(self)

    def empty(self):
        return _pyaqcv.RangeImage_empty(self)

    def size(self):
        return _pyaqcv.RangeImage_size(self)

    def set_image_data(self, img, copy=False):
        return _pyaqcv.RangeImage_set_image_data(self, img, copy)

    def get_image_data(self, *args):
        return _pyaqcv.RangeImage_get_image_data(self, *args)

    def set_offset(self, x_offset, y_offset, z_offset):
        return _pyaqcv.RangeImage_set_offset(self, x_offset, y_offset, z_offset)

    def get_offset(self, x_offset, y_offset, z_offset):
        return _pyaqcv.RangeImage_get_offset(self, x_offset, y_offset, z_offset)

    def set_resolution(self, x_resolution, y_resolution, z_resolution):
        return _pyaqcv.RangeImage_set_resolution(self, x_resolution, y_resolution, z_resolution)

    def get_resolution(self, x_resolution, y_resolution, z_resolution):
        return _pyaqcv.RangeImage_get_resolution(self, x_resolution, y_resolution, z_resolution)

# Register RangeImage in _pyaqcv:
_pyaqcv.RangeImage_swigregister(RangeImage)


def distance_3d(*args):
    return _pyaqcv.distance_3d(*args)

def intersection_3d(*args):
    return _pyaqcv.intersection_3d(*args)

def transform_3d(*args):
    return _pyaqcv.transform_3d(*args)

def get_affine_mat_3d(*args):
    return _pyaqcv.get_affine_mat_3d(*args)
class HeightCalculator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    kDisableHeightFilter = _pyaqcv.HeightCalculator_kDisableHeightFilter
    kIncludeValuesInRange = _pyaqcv.HeightCalculator_kIncludeValuesInRange
    kExcludeValuesInRange = _pyaqcv.HeightCalculator_kExcludeValuesInRange

    def __init__(self):
        _pyaqcv.HeightCalculator_swiginit(self, _pyaqcv.new_HeightCalculator())
    __swig_destroy__ = _pyaqcv.delete_HeightCalculator

    def set_mask(self, mask):
        return _pyaqcv.HeightCalculator_set_mask(self, mask)

    def get_mask(self):
        return _pyaqcv.HeightCalculator_get_mask(self)

    def set_mask_offset(self, offset):
        return _pyaqcv.HeightCalculator_set_mask_offset(self, offset)

    def get_mask_offset(self):
        return _pyaqcv.HeightCalculator_get_mask_offset(self)

    def clear_mask(self):
        return _pyaqcv.HeightCalculator_clear_mask(self)

    def need_histogram(self, flag=True):
        return _pyaqcv.HeightCalculator_need_histogram(self, flag)

    def get_need_histogram(self):
        return _pyaqcv.HeightCalculator_get_need_histogram(self)

    def set_tail_frac(self, low_tail_frac, high_tail_frac):
        return _pyaqcv.HeightCalculator_set_tail_frac(self, low_tail_frac, high_tail_frac)

    def get_tail_frac(self, low_tail_frac, high_tail_frac):
        return _pyaqcv.HeightCalculator_get_tail_frac(self, low_tail_frac, high_tail_frac)

    def set_height_range(self, low_height, high_height):
        return _pyaqcv.HeightCalculator_set_height_range(self, low_height, high_height)

    def get_height_range(self, low_height, high_height):
        return _pyaqcv.HeightCalculator_get_height_range(self, low_height, high_height)

    def set_height_filter_type(self, type):
        return _pyaqcv.HeightCalculator_set_height_filter_type(self, type)

    def get_height_filter_type(self):
        return _pyaqcv.HeightCalculator_get_height_filter_type(self)

    def execute(self, range_img, region, plane):
        return _pyaqcv.HeightCalculator_execute(self, range_img, region, plane)

    def get_mean(self):
        return _pyaqcv.HeightCalculator_get_mean(self)

    def get_median(self):
        return _pyaqcv.HeightCalculator_get_median(self)

    def get_minimum(self):
        return _pyaqcv.HeightCalculator_get_minimum(self)

    def get_maximum(self):
        return _pyaqcv.HeightCalculator_get_maximum(self)

    def get_low_tail(self):
        return _pyaqcv.HeightCalculator_get_low_tail(self)

    def get_high_tail(self):
        return _pyaqcv.HeightCalculator_get_high_tail(self)

    def get_sigma(self):
        return _pyaqcv.HeightCalculator_get_sigma(self)

    def get_used_pixel_count(self):
        return _pyaqcv.HeightCalculator_get_used_pixel_count(self)

    def compute_histogram(self, bins, range_min, range_max, hist):
        return _pyaqcv.HeightCalculator_compute_histogram(self, bins, range_min, range_max, hist)

# Register HeightCalculator in _pyaqcv:
_pyaqcv.HeightCalculator_swigregister(HeightCalculator)

class Plane3DEstimator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    kSinglePoint = _pyaqcv.Plane3DEstimator_kSinglePoint
    kNeighborhood = _pyaqcv.Plane3DEstimator_kNeighborhood
    kNeighborhoodMedian = _pyaqcv.Plane3DEstimator_kNeighborhoodMedian

    def __init__(self):
        _pyaqcv.Plane3DEstimator_swiginit(self, _pyaqcv.new_Plane3DEstimator())
    __swig_destroy__ = _pyaqcv.delete_Plane3DEstimator

    def set_keep_fit_points(self, flag=True):
        return _pyaqcv.Plane3DEstimator_set_keep_fit_points(self, flag)

    def keep_fit_points(self):
        return _pyaqcv.Plane3DEstimator_keep_fit_points(self)

    def set_points_sample_type(self, type):
        return _pyaqcv.Plane3DEstimator_set_points_sample_type(self, type)

    def get_points_sample_type(self):
        return _pyaqcv.Plane3DEstimator_get_points_sample_type(self)

    def set_neighbor_window(self, win_size):
        return _pyaqcv.Plane3DEstimator_set_neighbor_window(self, win_size)

    def get_neighbor_window(self):
        return _pyaqcv.Plane3DEstimator_get_neighbor_window(self)

    def set_mask(self, mask):
        return _pyaqcv.Plane3DEstimator_set_mask(self, mask)

    def get_mask(self):
        return _pyaqcv.Plane3DEstimator_get_mask(self)

    def set_mask_offset(self, offset):
        return _pyaqcv.Plane3DEstimator_set_mask_offset(self, offset)

    def get_mask_offset(self):
        return _pyaqcv.Plane3DEstimator_get_mask_offset(self)

    def clear_mask(self):
        return _pyaqcv.Plane3DEstimator_clear_mask(self)

    def execute(self, *args):
        return _pyaqcv.Plane3DEstimator_execute(self, *args)

    def get_rms(self):
        return _pyaqcv.Plane3DEstimator_get_rms(self)

    def get_fitted_points(self):
        return _pyaqcv.Plane3DEstimator_get_fitted_points(self)

# Register Plane3DEstimator in _pyaqcv:
_pyaqcv.Plane3DEstimator_swigregister(Plane3DEstimator)

class RangeImageProcessor(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    kFillZero = _pyaqcv.RangeImageProcessor_kFillZero
    kFillStaturatedTrunc = _pyaqcv.RangeImageProcessor_kFillStaturatedTrunc
    kFillPlaneValues = _pyaqcv.RangeImageProcessor_kFillPlaneValues

    def __init__(self):
        _pyaqcv.RangeImageProcessor_swiginit(self, _pyaqcv.new_RangeImageProcessor())
    __swig_destroy__ = _pyaqcv.delete_RangeImageProcessor

    @staticmethod
    def transform_height(*args):
        return _pyaqcv.RangeImageProcessor_transform_height(*args)

    @staticmethod
    def range_filter(*args):
        return _pyaqcv.RangeImageProcessor_range_filter(*args)

# Register RangeImageProcessor in _pyaqcv:
_pyaqcv.RangeImageProcessor_swigregister(RangeImageProcessor)

def RangeImageProcessor_transform_height(*args):
    return _pyaqcv.RangeImageProcessor_transform_height(*args)

def RangeImageProcessor_range_filter(*args):
    return _pyaqcv.RangeImageProcessor_range_filter(*args)

class PlaneFitModel(FitModelBase):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pyaqcv.PlaneFitModel_swiginit(self, _pyaqcv.new_PlaneFitModel())
    __swig_destroy__ = _pyaqcv.delete_PlaneFitModel

    def get_min_sample_num(self):
        return _pyaqcv.PlaneFitModel_get_min_sample_num(self)

    def init_model(self, pts_mat, idxs):
        return _pyaqcv.PlaneFitModel_init_model(self, pts_mat, idxs)

    def fit(self, *args):
        return _pyaqcv.PlaneFitModel_fit(self, *args)

    def distance(self, *args):
        return _pyaqcv.PlaneFitModel_distance(self, *args)

    def get_result(self):
        return _pyaqcv.PlaneFitModel_get_result(self)

# Register PlaneFitModel in _pyaqcv:
_pyaqcv.PlaneFitModel_swigregister(PlaneFitModel)

class SphereFitModel(FitModelBase):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pyaqcv.SphereFitModel_swiginit(self, _pyaqcv.new_SphereFitModel())
    __swig_destroy__ = _pyaqcv.delete_SphereFitModel

    def get_min_sample_num(self):
        return _pyaqcv.SphereFitModel_get_min_sample_num(self)

    def init_model(self, pts_mat, idxs):
        return _pyaqcv.SphereFitModel_init_model(self, pts_mat, idxs)

    def fit(self, *args):
        return _pyaqcv.SphereFitModel_fit(self, *args)

    def distance(self, *args):
        return _pyaqcv.SphereFitModel_distance(self, *args)

    def get_result(self):
        return _pyaqcv.SphereFitModel_get_result(self)

# Register SphereFitModel in _pyaqcv:
_pyaqcv.SphereFitModel_swigregister(SphereFitModel)

class VolumeCalculator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pyaqcv.VolumeCalculator_swiginit(self, _pyaqcv.new_VolumeCalculator())
    __swig_destroy__ = _pyaqcv.delete_VolumeCalculator

    def set_mask(self, mask):
        return _pyaqcv.VolumeCalculator_set_mask(self, mask)

    def get_mask(self):
        return _pyaqcv.VolumeCalculator_get_mask(self)

    def set_mask_offset(self, offset):
        return _pyaqcv.VolumeCalculator_set_mask_offset(self, offset)

    def get_mask_offset(self):
        return _pyaqcv.VolumeCalculator_get_mask_offset(self)

    def clear_mask(self):
        return _pyaqcv.VolumeCalculator_clear_mask(self)

    def set_minimum_height(self, height_thresh):
        return _pyaqcv.VolumeCalculator_set_minimum_height(self, height_thresh)

    def get_minimum_height(self):
        return _pyaqcv.VolumeCalculator_get_minimum_height(self)

    def execute(self, range_img, region, plane, volume, used_pixel_count=None):
        return _pyaqcv.VolumeCalculator_execute(self, range_img, region, plane, volume, used_pixel_count)

# Register VolumeCalculator in _pyaqcv:
_pyaqcv.VolumeCalculator_swigregister(VolumeCalculator)

class TemplateMatchResult(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pyaqcv.TemplateMatchResult_swiginit(self, _pyaqcv.new_TemplateMatchResult())
    __swig_destroy__ = _pyaqcv.delete_TemplateMatchResult

    def get_size_x(self):
        return _pyaqcv.TemplateMatchResult_get_size_x(self)

    def get_size_y(self):
        return _pyaqcv.TemplateMatchResult_get_size_y(self)

    def get_rotation(self):
        return _pyaqcv.TemplateMatchResult_get_rotation(self)

    def get_aspect(self):
        return _pyaqcv.TemplateMatchResult_get_aspect(self)

    def get_shear_angle(self):
        return _pyaqcv.TemplateMatchResult_get_shear_angle(self)

    def get_score(self):
        return _pyaqcv.TemplateMatchResult_get_score(self)

    def get_contrast(self):
        return _pyaqcv.TemplateMatchResult_get_contrast(self)

    def match_rect(self):
        return _pyaqcv.TemplateMatchResult_match_rect(self)

    def match_region(self):
        return _pyaqcv.TemplateMatchResult_match_region(self)

    def get_weighted_score(self):
        return _pyaqcv.TemplateMatchResult_get_weighted_score(self)

    def get_eval(self):
        return _pyaqcv.TemplateMatchResult_get_eval(self)

    def get_clutter(self):
        return _pyaqcv.TemplateMatchResult_get_clutter(self)

    def get_coverage(self):
        return _pyaqcv.TemplateMatchResult_get_coverage(self)

    def get_fit_error(self):
        return _pyaqcv.TemplateMatchResult_get_fit_error(self)

    def accepted(self):
        return _pyaqcv.TemplateMatchResult_accepted(self)

    def is_fine_stage(self):
        return _pyaqcv.TemplateMatchResult_is_fine_stage(self)

    def get_model_index(self):
        return _pyaqcv.TemplateMatchResult_get_model_index(self)

    def get_dof_index(self):
        return _pyaqcv.TemplateMatchResult_get_dof_index(self)

    def get_transform(self):
        return _pyaqcv.TemplateMatchResult_get_transform(self)

    def get_auxiliary_model_origin1(self):
        return _pyaqcv.TemplateMatchResult_get_auxiliary_model_origin1(self)

    def get_auxiliary_model_origin2(self):
        return _pyaqcv.TemplateMatchResult_get_auxiliary_model_origin2(self)

    def get_feature(self, trainfeature):
        return _pyaqcv.TemplateMatchResult_get_feature(self, trainfeature)

# Register TemplateMatchResult in _pyaqcv:
_pyaqcv.TemplateMatchResult_swigregister(TemplateMatchResult)

class TemplateMatchResultSet(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pyaqcv.TemplateMatchResultSet_swiginit(self, _pyaqcv.new_TemplateMatchResultSet())
    __swig_destroy__ = _pyaqcv.delete_TemplateMatchResultSet

    def reset(self):
        return _pyaqcv.TemplateMatchResultSet_reset(self)

    def get_results_num(self):
        return _pyaqcv.TemplateMatchResultSet_get_results_num(self)

    def get_results(self):
        return _pyaqcv.TemplateMatchResultSet_get_results(self)

    def get_result(self, index):
        return _pyaqcv.TemplateMatchResultSet_get_result(self, index)

# Register TemplateMatchResultSet in _pyaqcv:
_pyaqcv.TemplateMatchResultSet_swigregister(TemplateMatchResultSet)

class TemplateMatchDof(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pyaqcv.TemplateMatchDof_swiginit(self, _pyaqcv.new_TemplateMatchDof())
    __swig_destroy__ = _pyaqcv.delete_TemplateMatchDof

    def set_nominal_rotate(self, rotate=0.0):
        return _pyaqcv.TemplateMatchDof_set_nominal_rotate(self, rotate)

    def set_zone_rotate(self, low=0.0, high=0.0, dup_range=6.283185307179586476925286766559):
        return _pyaqcv.TemplateMatchDof_set_zone_rotate(self, low, high, dup_range)

    def set_nominal_size(self, size=1.0):
        return _pyaqcv.TemplateMatchDof_set_nominal_size(self, size)

    def set_zone_size(self, low=1.0, high=1.0, dup_range=1.4):
        return _pyaqcv.TemplateMatchDof_set_zone_size(self, low, high, dup_range)

    def set_nominal_size_x(self, size_x=1.0):
        return _pyaqcv.TemplateMatchDof_set_nominal_size_x(self, size_x)

    def set_zone_size_x(self, low=1.0, high=1.0, dup_range=1.4):
        return _pyaqcv.TemplateMatchDof_set_zone_size_x(self, low, high, dup_range)

    def set_nominal_size_y(self, size_y=1.0):
        return _pyaqcv.TemplateMatchDof_set_nominal_size_y(self, size_y)

    def set_zone_size_y(self, low=1.0, high=1.0, dup_range=1.4):
        return _pyaqcv.TemplateMatchDof_set_zone_size_y(self, low, high, dup_range)

    def get_rotate(self, low, high, dup_range):
        return _pyaqcv.TemplateMatchDof_get_rotate(self, low, high, dup_range)

    def get_size(self, low, high, dup_range):
        return _pyaqcv.TemplateMatchDof_get_size(self, low, high, dup_range)

    def get_size_x(self, low, high, dup_range):
        return _pyaqcv.TemplateMatchDof_get_size_x(self, low, high, dup_range)

    def get_size_y(self, low, high, dup_range):
        return _pyaqcv.TemplateMatchDof_get_size_y(self, low, high, dup_range)

# Register TemplateMatchDof in _pyaqcv:
_pyaqcv.TemplateMatchDof_swigregister(TemplateMatchDof)

class TemplateMatchModel(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pyaqcv.TemplateMatchModel_swiginit(self, _pyaqcv.new_TemplateMatchModel())
    __swig_destroy__ = _pyaqcv.delete_TemplateMatchModel

    def set_granularity(self, granularity=2.0):
        return _pyaqcv.TemplateMatchModel_set_granularity(self, granularity)

    def get_granularity(self):
        return _pyaqcv.TemplateMatchModel_get_granularity(self)

    def set_granularity_fine(self, granularity_fine=1.0):
        return _pyaqcv.TemplateMatchModel_set_granularity_fine(self, granularity_fine)

    def get_granularity_fine(self):
        return _pyaqcv.TemplateMatchModel_get_granularity_fine(self)

    def set_downsample_ratio(self, dScale=1):
        return _pyaqcv.TemplateMatchModel_set_downsample_ratio(self, dScale)

    def get_downsample_ratio(self):
        return _pyaqcv.TemplateMatchModel_get_downsample_ratio(self)

    def set_dataset_width_height_fixed(self, dataset_img_width, dataset_img_height):
        return _pyaqcv.TemplateMatchModel_set_dataset_width_height_fixed(self, dataset_img_width, dataset_img_height)

    def set_dataset_width_height_unfixed(self):
        return _pyaqcv.TemplateMatchModel_set_dataset_width_height_unfixed(self)

    def set_noise_thre(self, noise_thre=10):
        return _pyaqcv.TemplateMatchModel_set_noise_thre(self, noise_thre)

    def get_noise_thre(self):
        return _pyaqcv.TemplateMatchModel_get_noise_thre(self)

    def set_total_grad_mag_thre(self, total_grad_mag_thre=500):
        return _pyaqcv.TemplateMatchModel_set_total_grad_mag_thre(self, total_grad_mag_thre)

    def get_total_grad_mag_thre(self):
        return _pyaqcv.TemplateMatchModel_get_total_grad_mag_thre(self)

    def set_total_grad_mag_relative_thre(self, total_grad_mag_relative_thre=0.1):
        return _pyaqcv.TemplateMatchModel_set_total_grad_mag_relative_thre(self, total_grad_mag_relative_thre)

    def get_total_grad_mag_relative_thre(self):
        return _pyaqcv.TemplateMatchModel_get_total_grad_mag_relative_thre(self)

    def set_auto_select_granularity(self, Auto=True):
        return _pyaqcv.TemplateMatchModel_set_auto_select_granularity(self, Auto)

    def get_auto_select_granularity(self):
        return _pyaqcv.TemplateMatchModel_get_auto_select_granularity(self)

    def set_auto_select_downsample_ratio(self, Auto=True):
        return _pyaqcv.TemplateMatchModel_set_auto_select_downsample_ratio(self, Auto)

    def get_auto_select_downsample_ratio(self):
        return _pyaqcv.TemplateMatchModel_get_auto_select_downsample_ratio(self)

    def set_auto_select_noiseThre(self, Auto=True):
        return _pyaqcv.TemplateMatchModel_set_auto_select_noiseThre(self, Auto)

    def get_auto_select_noiseThre(self):
        return _pyaqcv.TemplateMatchModel_get_auto_select_noiseThre(self)

    def set_auto_select_total_grad_mag_thre(self, Auto=True):
        return _pyaqcv.TemplateMatchModel_set_auto_select_total_grad_mag_thre(self, Auto)

    def get_auto_select_total_grad_mag_thre(self):
        return _pyaqcv.TemplateMatchModel_get_auto_select_total_grad_mag_thre(self)

    def train(self, *args):
        return _pyaqcv.TemplateMatchModel_train(self, *args)

    def untrain(self):
        return _pyaqcv.TemplateMatchModel_untrain(self)

    def is_trained(self):
        return _pyaqcv.TemplateMatchModel_is_trained(self)

    def get_train_features(self, quick, low, high, pattern_coordinate=True):
        return _pyaqcv.TemplateMatchModel_get_train_features(self, quick, low, high, pattern_coordinate)

    def get_model_origin(self, origin):
        return _pyaqcv.TemplateMatchModel_get_model_origin(self, origin)

    def get_train_src_image(self, img):
        return _pyaqcv.TemplateMatchModel_get_train_src_image(self, img)

    def get_train_result_image(self, img):
        return _pyaqcv.TemplateMatchModel_get_train_result_image(self, img)

    def get_train_model_image(self, img):
        return _pyaqcv.TemplateMatchModel_get_train_model_image(self, img)

    def get_train_mask_image(self, img):
        return _pyaqcv.TemplateMatchModel_get_train_mask_image(self, img)

    def get_train_affine_from_unit_sq(self):
        return _pyaqcv.TemplateMatchModel_get_train_affine_from_unit_sq(self)

    def get_train_info(self):
        return _pyaqcv.TemplateMatchModel_get_train_info(self)

    def get_train_info_ID(self):
        return _pyaqcv.TemplateMatchModel_get_train_info_ID(self)

# Register TemplateMatchModel in _pyaqcv:
_pyaqcv.TemplateMatchModel_swigregister(TemplateMatchModel)

class TemplateMatchRuntime(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pyaqcv.TemplateMatchRuntime_swiginit(self, _pyaqcv.new_TemplateMatchRuntime())
    __swig_destroy__ = _pyaqcv.delete_TemplateMatchRuntime
    kQuick = _pyaqcv.TemplateMatchRuntime_kQuick
    kFine = _pyaqcv.TemplateMatchRuntime_kFine
    kRobustFine = _pyaqcv.TemplateMatchRuntime_kRobustFine

    def set_accept_threshold(self, accept=0.8):
        return _pyaqcv.TemplateMatchRuntime_set_accept_threshold(self, accept)

    def get_accept_threshold(self):
        return _pyaqcv.TemplateMatchRuntime_get_accept_threshold(self)

    def set_num_to_find(self, num=1):
        return _pyaqcv.TemplateMatchRuntime_set_num_to_find(self, num)

    def get_num_to_find(self):
        return _pyaqcv.TemplateMatchRuntime_get_num_to_find(self)

    def set_ignore_polarity(self, ignore=False):
        return _pyaqcv.TemplateMatchRuntime_set_ignore_polarity(self, ignore)

    def get_ignore_polarity(self):
        return _pyaqcv.TemplateMatchRuntime_get_ignore_polarity(self)

    def set_iou_threshold(self, iou_th):
        return _pyaqcv.TemplateMatchRuntime_set_iou_threshold(self, iou_th)

    def get_iou_threshold(self):
        return _pyaqcv.TemplateMatchRuntime_get_iou_threshold(self)

    def set_model(self, model):
        return _pyaqcv.TemplateMatchRuntime_set_model(self, model)

    def set_dof(self, *args):
        return _pyaqcv.TemplateMatchRuntime_set_dof(self, *args)

    def set_search_mode(self, mode):
        return _pyaqcv.TemplateMatchRuntime_set_search_mode(self, mode)

    def get_search_mode(self):
        return _pyaqcv.TemplateMatchRuntime_get_search_mode(self)

    def set_time_limit(self, time_limit_millisecond):
        return _pyaqcv.TemplateMatchRuntime_set_time_limit(self, time_limit_millisecond)

    def get_time_limit(self):
        return _pyaqcv.TemplateMatchRuntime_get_time_limit(self)

    def execute(self, *args):
        return _pyaqcv.TemplateMatchRuntime_execute(self, *args)

    def execute_GPU(self, image, roi):
        return _pyaqcv.TemplateMatchRuntime_execute_GPU(self, image, roi)

    def get_result_set(self):
        return _pyaqcv.TemplateMatchRuntime_get_result_set(self)

# Register TemplateMatchRuntime in _pyaqcv:
_pyaqcv.TemplateMatchRuntime_swigregister(TemplateMatchRuntime)

class RegionSearchResult(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pyaqcv.RegionSearchResult_swiginit(self, _pyaqcv.new_RegionSearchResult())
    __swig_destroy__ = _pyaqcv.delete_RegionSearchResult

    def get_position(self):
        return _pyaqcv.RegionSearchResult_get_position(self)

    def get_rotate(self):
        return _pyaqcv.RegionSearchResult_get_rotate(self)

    def get_size(self):
        return _pyaqcv.RegionSearchResult_get_size(self)

    def get_score(self):
        return _pyaqcv.RegionSearchResult_get_score(self)

    def get_match_region(self):
        return _pyaqcv.RegionSearchResult_get_match_region(self)

    def get_transform(self):
        return _pyaqcv.RegionSearchResult_get_transform(self)

    def is_accepted(self):
        return _pyaqcv.RegionSearchResult_is_accepted(self)

# Register RegionSearchResult in _pyaqcv:
_pyaqcv.RegionSearchResult_swigregister(RegionSearchResult)

class RegionSearchResultSet(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pyaqcv.RegionSearchResultSet_swiginit(self, _pyaqcv.new_RegionSearchResultSet())
    __swig_destroy__ = _pyaqcv.delete_RegionSearchResultSet

    def reset(self):
        return _pyaqcv.RegionSearchResultSet_reset(self)

    def get_results_num(self):
        return _pyaqcv.RegionSearchResultSet_get_results_num(self)

    def get_results(self):
        return _pyaqcv.RegionSearchResultSet_get_results(self)

    def get_result(self, index):
        return _pyaqcv.RegionSearchResultSet_get_result(self, index)

    def order_by_score(self):
        return _pyaqcv.RegionSearchResultSet_order_by_score(self)

    def order_by_positonX(self):
        return _pyaqcv.RegionSearchResultSet_order_by_positonX(self)

    def order_by_positonY(self):
        return _pyaqcv.RegionSearchResultSet_order_by_positonY(self)

    def order_by_angle(self):
        return _pyaqcv.RegionSearchResultSet_order_by_angle(self)

    def order_by_size(self):
        return _pyaqcv.RegionSearchResultSet_order_by_size(self)

# Register RegionSearchResultSet in _pyaqcv:
_pyaqcv.RegionSearchResultSet_swigregister(RegionSearchResultSet)

class RegionSearch(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pyaqcv.RegionSearch_swiginit(self, _pyaqcv.new_RegionSearch())
    __swig_destroy__ = _pyaqcv.delete_RegionSearch
    AccuracyVeryFine = _pyaqcv.RegionSearch_AccuracyVeryFine
    AccuracyFine = _pyaqcv.RegionSearch_AccuracyFine
    AccuracyCoarse = _pyaqcv.RegionSearch_AccuracyCoarse
    AlgorithmLinearSearch = _pyaqcv.RegionSearch_AlgorithmLinearSearch
    AlgorithmLinearCNLPAS = _pyaqcv.RegionSearch_AlgorithmLinearCNLPAS

    def set_algorithm(self, algo):
        return _pyaqcv.RegionSearch_set_algorithm(self, algo)

    def get_algorithm(self):
        return _pyaqcv.RegionSearch_get_algorithm(self)

    def set_accuracy(self, accu):
        return _pyaqcv.RegionSearch_set_accuracy(self, accu)

    def get_accuracy(self):
        return _pyaqcv.RegionSearch_get_accuracy(self)

    def set_pyramid_layers(self, layers):
        return _pyaqcv.RegionSearch_set_pyramid_layers(self, layers)

    def get_pyramid_layers(self):
        return _pyaqcv.RegionSearch_get_pyramid_layers(self)

    def set_auto_pyramid_layers(self, Auto=True):
        return _pyaqcv.RegionSearch_set_auto_pyramid_layers(self, Auto)

    def get_auto_pyramid_layers(self):
        return _pyaqcv.RegionSearch_get_auto_pyramid_layers(self)

    def set_rotate_extent(self, low=0.0, high=0.0):
        return _pyaqcv.RegionSearch_set_rotate_extent(self, low, high)

    def get_rotate_extent(self, low, high):
        return _pyaqcv.RegionSearch_get_rotate_extent(self, low, high)

    def set_rotate_step(self, step):
        return _pyaqcv.RegionSearch_set_rotate_step(self, step)

    def get_rotate_step(self):
        return _pyaqcv.RegionSearch_get_rotate_step(self)

    def set_auto_rotate_step(self, Auto=True):
        return _pyaqcv.RegionSearch_set_auto_rotate_step(self, Auto)

    def get_auto_rotate_step(self):
        return _pyaqcv.RegionSearch_get_auto_rotate_step(self)

    def set_scale_enabled(self, enable=True):
        return _pyaqcv.RegionSearch_set_scale_enabled(self, enable)

    def get_scale_enabled(self):
        return _pyaqcv.RegionSearch_get_scale_enabled(self)

    def set_scale_step(self, step):
        return _pyaqcv.RegionSearch_set_scale_step(self, step)

    def get_scale_step(self):
        return _pyaqcv.RegionSearch_get_scale_step(self)

    def set_auto_scale_step(self, Auto=True):
        return _pyaqcv.RegionSearch_set_auto_scale_step(self, Auto)

    def get_auto_scale_step(self):
        return _pyaqcv.RegionSearch_get_auto_scale_step(self)

    def train(self, *args):
        return _pyaqcv.RegionSearch_train(self, *args)

    def untrain(self):
        return _pyaqcv.RegionSearch_untrain(self)

    def is_trained(self):
        return _pyaqcv.RegionSearch_is_trained(self)

    def get_model_origin(self, origin):
        return _pyaqcv.RegionSearch_get_model_origin(self, origin)

    def get_train_src_image(self, img):
        return _pyaqcv.RegionSearch_get_train_src_image(self, img)

    def get_train_model_image(self, img):
        return _pyaqcv.RegionSearch_get_train_model_image(self, img)

    def get_train_mask_image(self, img):
        return _pyaqcv.RegionSearch_get_train_mask_image(self, img)

    def get_train_rect_region(self, rect):
        return _pyaqcv.RegionSearch_get_train_rect_region(self, rect)

    def set_accept_threshold(self, accept=0.8):
        return _pyaqcv.RegionSearch_set_accept_threshold(self, accept)

    def get_accept_threshold(self):
        return _pyaqcv.RegionSearch_get_accept_threshold(self)

    def set_num_to_find(self, num=1):
        return _pyaqcv.RegionSearch_set_num_to_find(self, num)

    def get_num_to_find(self):
        return _pyaqcv.RegionSearch_get_num_to_find(self)

    def set_confusion_threshold(self, conf_thre=1.0):
        return _pyaqcv.RegionSearch_set_confusion_threshold(self, conf_thre)

    def get_confusion_threshold(self):
        return _pyaqcv.RegionSearch_get_confusion_threshold(self)

    def set_overlap_threshold(self, overlap=0.6):
        return _pyaqcv.RegionSearch_set_overlap_threshold(self, overlap)

    def get_overlap_threshold(self):
        return _pyaqcv.RegionSearch_get_overlap_threshold(self)

    def set_ignore_polarity(self, ignore=True):
        return _pyaqcv.RegionSearch_set_ignore_polarity(self, ignore)

    def get_ignore_polarity(self):
        return _pyaqcv.RegionSearch_get_ignore_polarity(self)

    def enable_full_image(self, enable=True):
        return _pyaqcv.RegionSearch_enable_full_image(self, enable)

    def get_is_full_image(self):
        return _pyaqcv.RegionSearch_get_is_full_image(self)

    def get_search_rect(self):
        return _pyaqcv.RegionSearch_get_search_rect(self)

    def execute(self, img, roi):
        return _pyaqcv.RegionSearch_execute(self, img, roi)

    def get_result_num(self):
        return _pyaqcv.RegionSearch_get_result_num(self)

    def get_result_set(self):
        return _pyaqcv.RegionSearch_get_result_set(self)

# Register RegionSearch in _pyaqcv:
_pyaqcv.RegionSearch_swigregister(RegionSearch)

class KeyPoint(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    point_feat = property(_pyaqcv.KeyPoint_point_feat_get, _pyaqcv.KeyPoint_point_feat_set)
    name = property(_pyaqcv.KeyPoint_name_get, _pyaqcv.KeyPoint_name_set)
    ext_info = property(_pyaqcv.KeyPoint_ext_info_get, _pyaqcv.KeyPoint_ext_info_set)

    def __init__(self):
        _pyaqcv.KeyPoint_swiginit(self, _pyaqcv.new_KeyPoint())
    __swig_destroy__ = _pyaqcv.delete_KeyPoint

# Register KeyPoint in _pyaqcv:
_pyaqcv.KeyPoint_swigregister(KeyPoint)

class LabelRegion(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    polygon = property(_pyaqcv.LabelRegion_polygon_get, _pyaqcv.LabelRegion_polygon_set)
    angle = property(_pyaqcv.LabelRegion_angle_get, _pyaqcv.LabelRegion_angle_set)
    score = property(_pyaqcv.LabelRegion_score_get, _pyaqcv.LabelRegion_score_set)
    key_points = property(_pyaqcv.LabelRegion_key_points_get, _pyaqcv.LabelRegion_key_points_set)
    name = property(_pyaqcv.LabelRegion_name_get, _pyaqcv.LabelRegion_name_set)
    ext_info = property(_pyaqcv.LabelRegion_ext_info_get, _pyaqcv.LabelRegion_ext_info_set)

    def __init__(self):
        _pyaqcv.LabelRegion_swiginit(self, _pyaqcv.new_LabelRegion())
    __swig_destroy__ = _pyaqcv.delete_LabelRegion

# Register LabelRegion in _pyaqcv:
_pyaqcv.LabelRegion_swigregister(LabelRegion)

class Label(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    kUnknown = _pyaqcv.Label_kUnknown
    kSegment = _pyaqcv.Label_kSegment
    kDetection = _pyaqcv.Label_kDetection
    kClassify = _pyaqcv.Label_kClassify
    kLocation = _pyaqcv.Label_kLocation

    def __init__(self):
        _pyaqcv.Label_swiginit(self, _pyaqcv.new_Label())
    __swig_destroy__ = _pyaqcv.delete_Label

    def parse_from_file(self, file_path):
        return _pyaqcv.Label_parse_from_file(self, file_path)

    def parse_from_data(self, *args):
        return _pyaqcv.Label_parse_from_data(self, *args)

    def save_to_file(self, file_path):
        return _pyaqcv.Label_save_to_file(self, file_path)

    def serialize_to_string(self):
        return _pyaqcv.Label_serialize_to_string(self)
    dataset_type = property(_pyaqcv.Label_dataset_type_get, _pyaqcv.Label_dataset_type_set)
    img_size = property(_pyaqcv.Label_img_size_get, _pyaqcv.Label_img_size_set)
    name = property(_pyaqcv.Label_name_get, _pyaqcv.Label_name_set)
    score = property(_pyaqcv.Label_score_get, _pyaqcv.Label_score_set)
    regions = property(_pyaqcv.Label_regions_get, _pyaqcv.Label_regions_set)
    masks = property(_pyaqcv.Label_masks_get, _pyaqcv.Label_masks_set)
    hardcases = property(_pyaqcv.Label_hardcases_get, _pyaqcv.Label_hardcases_set)
    origin_result = property(_pyaqcv.Label_origin_result_get, _pyaqcv.Label_origin_result_set)
    ext_info = property(_pyaqcv.Label_ext_info_get, _pyaqcv.Label_ext_info_set)

# Register Label in _pyaqcv:
_pyaqcv.Label_swigregister(Label)

class AqImage(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pyaqcv.AqImage_swiginit(self, _pyaqcv.new_AqImage())
    __swig_destroy__ = _pyaqcv.delete_AqImage

    def parse_from_file(self, file_path):
        return _pyaqcv.AqImage_parse_from_file(self, file_path)

    def save_to_file(self, file_path):
        return _pyaqcv.AqImage_save_to_file(self, file_path)

    def parse_from_string(self, buffer):
        return _pyaqcv.AqImage_parse_from_string(self, buffer)

    def serialize_to_string(self):
        return _pyaqcv.AqImage_serialize_to_string(self)

    def get_images(self):
        return _pyaqcv.AqImage_get_images(self)

    def set_images(self, images):
        return _pyaqcv.AqImage_set_images(self, images)

    def clone(self):
        return _pyaqcv.AqImage_clone(self)

# Register AqImage in _pyaqcv:
_pyaqcv.AqImage_swigregister(AqImage)

class Buffer(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _pyaqcv.Buffer_swiginit(self, _pyaqcv.new_Buffer(*args))
    __swig_destroy__ = _pyaqcv.delete_Buffer

    def byte_size(self):
        return _pyaqcv.Buffer_byte_size(self)

    def data(self, *args):
        return _pyaqcv.Buffer_data(self, *args)

    def dump_data(self, *args):
        return _pyaqcv.Buffer_dump_data(self, *args)

    def append(self, *args):
        return _pyaqcv.Buffer_append(self, *args)

    def empty(self):
        return _pyaqcv.Buffer_empty(self)

# Register Buffer in _pyaqcv:
_pyaqcv.Buffer_swigregister(Buffer)

class BinaryOutputArchive(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pyaqcv.BinaryOutputArchive_swiginit(self, _pyaqcv.new_BinaryOutputArchive())
    __swig_destroy__ = _pyaqcv.delete_BinaryOutputArchive

    def pop_buffer(self):
        return _pyaqcv.BinaryOutputArchive_pop_buffer(self)

    def __and__(self, *args):
        return _pyaqcv.BinaryOutputArchive___and__(self, *args)

    def write(self, *args):
        return _pyaqcv.BinaryOutputArchive_write(self, *args)

    def clear(self):
        return _pyaqcv.BinaryOutputArchive_clear(self)

# Register BinaryOutputArchive in _pyaqcv:
_pyaqcv.BinaryOutputArchive_swigregister(BinaryOutputArchive)

class BinaryInputArchive(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _pyaqcv.BinaryInputArchive_swiginit(self, _pyaqcv.new_BinaryInputArchive(*args))
    __swig_destroy__ = _pyaqcv.delete_BinaryInputArchive

    def byte_size(self):
        return _pyaqcv.BinaryInputArchive_byte_size(self)

    def __and__(self, *args):
        return _pyaqcv.BinaryInputArchive___and__(self, *args)

    def read(self, *args):
        return _pyaqcv.BinaryInputArchive_read(self, *args)

    def reset_buffer(self, *args):
        return _pyaqcv.BinaryInputArchive_reset_buffer(self, *args)

# Register BinaryInputArchive in _pyaqcv:
_pyaqcv.BinaryInputArchive_swigregister(BinaryInputArchive)

class AqSize(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _pyaqcv.AqSize_swiginit(self, _pyaqcv.new_AqSize(*args))

    def area(self):
        return _pyaqcv.AqSize_area(self)

    def aspect_ratio(self):
        return _pyaqcv.AqSize_aspect_ratio(self)

    def empty(self):
        return _pyaqcv.AqSize_empty(self)
    width = property(_pyaqcv.AqSize_width_get, _pyaqcv.AqSize_width_set)
    height = property(_pyaqcv.AqSize_height_get, _pyaqcv.AqSize_height_set)
    __swig_destroy__ = _pyaqcv.delete_AqSize

# Register AqSize in _pyaqcv:
_pyaqcv.AqSize_swigregister(AqSize)

class AqSize2f(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _pyaqcv.AqSize2f_swiginit(self, _pyaqcv.new_AqSize2f(*args))

    def area(self):
        return _pyaqcv.AqSize2f_area(self)

    def aspect_ratio(self):
        return _pyaqcv.AqSize2f_aspect_ratio(self)

    def empty(self):
        return _pyaqcv.AqSize2f_empty(self)
    width = property(_pyaqcv.AqSize2f_width_get, _pyaqcv.AqSize2f_width_set)
    height = property(_pyaqcv.AqSize2f_height_get, _pyaqcv.AqSize2f_height_set)
    __swig_destroy__ = _pyaqcv.delete_AqSize2f

# Register AqSize2f in _pyaqcv:
_pyaqcv.AqSize2f_swigregister(AqSize2f)

class AqSize2d(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _pyaqcv.AqSize2d_swiginit(self, _pyaqcv.new_AqSize2d(*args))

    def area(self):
        return _pyaqcv.AqSize2d_area(self)

    def aspect_ratio(self):
        return _pyaqcv.AqSize2d_aspect_ratio(self)

    def empty(self):
        return _pyaqcv.AqSize2d_empty(self)
    width = property(_pyaqcv.AqSize2d_width_get, _pyaqcv.AqSize2d_width_set)
    height = property(_pyaqcv.AqSize2d_height_get, _pyaqcv.AqSize2d_height_set)
    __swig_destroy__ = _pyaqcv.delete_AqSize2d

# Register AqSize2d in _pyaqcv:
_pyaqcv.AqSize2d_swigregister(AqSize2d)

class AqRect(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _pyaqcv.AqRect_swiginit(self, _pyaqcv.new_AqRect(*args))

    def tl(self):
        return _pyaqcv.AqRect_tl(self)

    def br(self):
        return _pyaqcv.AqRect_br(self)

    def size(self):
        return _pyaqcv.AqRect_size(self)

    def area(self):
        return _pyaqcv.AqRect_area(self)

    def empty(self):
        return _pyaqcv.AqRect_empty(self)

    def contains(self, pt):
        return _pyaqcv.AqRect_contains(self, pt)
    x = property(_pyaqcv.AqRect_x_get, _pyaqcv.AqRect_x_set)
    y = property(_pyaqcv.AqRect_y_get, _pyaqcv.AqRect_y_set)
    width = property(_pyaqcv.AqRect_width_get, _pyaqcv.AqRect_width_set)
    height = property(_pyaqcv.AqRect_height_get, _pyaqcv.AqRect_height_set)
    __swig_destroy__ = _pyaqcv.delete_AqRect

# Register AqRect in _pyaqcv:
_pyaqcv.AqRect_swigregister(AqRect)

class AqRect2f(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _pyaqcv.AqRect2f_swiginit(self, _pyaqcv.new_AqRect2f(*args))

    def tl(self):
        return _pyaqcv.AqRect2f_tl(self)

    def br(self):
        return _pyaqcv.AqRect2f_br(self)

    def size(self):
        return _pyaqcv.AqRect2f_size(self)

    def area(self):
        return _pyaqcv.AqRect2f_area(self)

    def empty(self):
        return _pyaqcv.AqRect2f_empty(self)

    def contains(self, pt):
        return _pyaqcv.AqRect2f_contains(self, pt)
    x = property(_pyaqcv.AqRect2f_x_get, _pyaqcv.AqRect2f_x_set)
    y = property(_pyaqcv.AqRect2f_y_get, _pyaqcv.AqRect2f_y_set)
    width = property(_pyaqcv.AqRect2f_width_get, _pyaqcv.AqRect2f_width_set)
    height = property(_pyaqcv.AqRect2f_height_get, _pyaqcv.AqRect2f_height_set)
    __swig_destroy__ = _pyaqcv.delete_AqRect2f

# Register AqRect2f in _pyaqcv:
_pyaqcv.AqRect2f_swigregister(AqRect2f)

class AqRect2d(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _pyaqcv.AqRect2d_swiginit(self, _pyaqcv.new_AqRect2d(*args))

    def tl(self):
        return _pyaqcv.AqRect2d_tl(self)

    def br(self):
        return _pyaqcv.AqRect2d_br(self)

    def size(self):
        return _pyaqcv.AqRect2d_size(self)

    def area(self):
        return _pyaqcv.AqRect2d_area(self)

    def empty(self):
        return _pyaqcv.AqRect2d_empty(self)

    def contains(self, pt):
        return _pyaqcv.AqRect2d_contains(self, pt)
    x = property(_pyaqcv.AqRect2d_x_get, _pyaqcv.AqRect2d_x_set)
    y = property(_pyaqcv.AqRect2d_y_get, _pyaqcv.AqRect2d_y_set)
    width = property(_pyaqcv.AqRect2d_width_get, _pyaqcv.AqRect2d_width_set)
    height = property(_pyaqcv.AqRect2d_height_get, _pyaqcv.AqRect2d_height_set)
    __swig_destroy__ = _pyaqcv.delete_AqRect2d

# Register AqRect2d in _pyaqcv:
_pyaqcv.AqRect2d_swigregister(AqRect2d)

class AqPoint(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _pyaqcv.AqPoint_swiginit(self, _pyaqcv.new_AqPoint(*args))

    def dot(self, pt):
        return _pyaqcv.AqPoint_dot(self, pt)

    def ddot(self, pt):
        return _pyaqcv.AqPoint_ddot(self, pt)

    def cross(self, pt):
        return _pyaqcv.AqPoint_cross(self, pt)

    def inside(self, r):
        return _pyaqcv.AqPoint_inside(self, r)
    x = property(_pyaqcv.AqPoint_x_get, _pyaqcv.AqPoint_x_set)
    y = property(_pyaqcv.AqPoint_y_get, _pyaqcv.AqPoint_y_set)
    __swig_destroy__ = _pyaqcv.delete_AqPoint

# Register AqPoint in _pyaqcv:
_pyaqcv.AqPoint_swigregister(AqPoint)

class AqPoint2f(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _pyaqcv.AqPoint2f_swiginit(self, _pyaqcv.new_AqPoint2f(*args))

    def dot(self, pt):
        return _pyaqcv.AqPoint2f_dot(self, pt)

    def ddot(self, pt):
        return _pyaqcv.AqPoint2f_ddot(self, pt)

    def cross(self, pt):
        return _pyaqcv.AqPoint2f_cross(self, pt)

    def inside(self, r):
        return _pyaqcv.AqPoint2f_inside(self, r)
    x = property(_pyaqcv.AqPoint2f_x_get, _pyaqcv.AqPoint2f_x_set)
    y = property(_pyaqcv.AqPoint2f_y_get, _pyaqcv.AqPoint2f_y_set)
    __swig_destroy__ = _pyaqcv.delete_AqPoint2f

# Register AqPoint2f in _pyaqcv:
_pyaqcv.AqPoint2f_swigregister(AqPoint2f)

class AqPoint2d(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _pyaqcv.AqPoint2d_swiginit(self, _pyaqcv.new_AqPoint2d(*args))

    def dot(self, pt):
        return _pyaqcv.AqPoint2d_dot(self, pt)

    def ddot(self, pt):
        return _pyaqcv.AqPoint2d_ddot(self, pt)

    def cross(self, pt):
        return _pyaqcv.AqPoint2d_cross(self, pt)

    def inside(self, r):
        return _pyaqcv.AqPoint2d_inside(self, r)
    x = property(_pyaqcv.AqPoint2d_x_get, _pyaqcv.AqPoint2d_x_set)
    y = property(_pyaqcv.AqPoint2d_y_get, _pyaqcv.AqPoint2d_y_set)
    __swig_destroy__ = _pyaqcv.delete_AqPoint2d

# Register AqPoint2d in _pyaqcv:
_pyaqcv.AqPoint2d_swigregister(AqPoint2d)

class AqPoint3(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _pyaqcv.AqPoint3_swiginit(self, _pyaqcv.new_AqPoint3(*args))

    def dot(self, pt):
        return _pyaqcv.AqPoint3_dot(self, pt)

    def ddot(self, pt):
        return _pyaqcv.AqPoint3_ddot(self, pt)

    def cross(self, pt):
        return _pyaqcv.AqPoint3_cross(self, pt)
    x = property(_pyaqcv.AqPoint3_x_get, _pyaqcv.AqPoint3_x_set)
    y = property(_pyaqcv.AqPoint3_y_get, _pyaqcv.AqPoint3_y_set)
    z = property(_pyaqcv.AqPoint3_z_get, _pyaqcv.AqPoint3_z_set)
    __swig_destroy__ = _pyaqcv.delete_AqPoint3

# Register AqPoint3 in _pyaqcv:
_pyaqcv.AqPoint3_swigregister(AqPoint3)

class AqPoint3f(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _pyaqcv.AqPoint3f_swiginit(self, _pyaqcv.new_AqPoint3f(*args))

    def dot(self, pt):
        return _pyaqcv.AqPoint3f_dot(self, pt)

    def ddot(self, pt):
        return _pyaqcv.AqPoint3f_ddot(self, pt)

    def cross(self, pt):
        return _pyaqcv.AqPoint3f_cross(self, pt)
    x = property(_pyaqcv.AqPoint3f_x_get, _pyaqcv.AqPoint3f_x_set)
    y = property(_pyaqcv.AqPoint3f_y_get, _pyaqcv.AqPoint3f_y_set)
    z = property(_pyaqcv.AqPoint3f_z_get, _pyaqcv.AqPoint3f_z_set)
    __swig_destroy__ = _pyaqcv.delete_AqPoint3f

# Register AqPoint3f in _pyaqcv:
_pyaqcv.AqPoint3f_swigregister(AqPoint3f)

class AqPoint3d(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _pyaqcv.AqPoint3d_swiginit(self, _pyaqcv.new_AqPoint3d(*args))

    def dot(self, pt):
        return _pyaqcv.AqPoint3d_dot(self, pt)

    def ddot(self, pt):
        return _pyaqcv.AqPoint3d_ddot(self, pt)

    def cross(self, pt):
        return _pyaqcv.AqPoint3d_cross(self, pt)
    x = property(_pyaqcv.AqPoint3d_x_get, _pyaqcv.AqPoint3d_x_set)
    y = property(_pyaqcv.AqPoint3d_y_get, _pyaqcv.AqPoint3d_y_set)
    z = property(_pyaqcv.AqPoint3d_z_get, _pyaqcv.AqPoint3d_z_set)
    __swig_destroy__ = _pyaqcv.delete_AqPoint3d

# Register AqPoint3d in _pyaqcv:
_pyaqcv.AqPoint3d_swigregister(AqPoint3d)

class AqMatx11d(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    rows = _pyaqcv.AqMatx11d_rows
    cols = _pyaqcv.AqMatx11d_cols
    channels = _pyaqcv.AqMatx11d_channels
    shortdim = _pyaqcv.AqMatx11d_shortdim

    @staticmethod
    def all(alpha):
        return _pyaqcv.AqMatx11d_all(alpha)

    @staticmethod
    def zeros():
        return _pyaqcv.AqMatx11d_zeros()

    @staticmethod
    def ones():
        return _pyaqcv.AqMatx11d_ones()

    @staticmethod
    def eye():
        return _pyaqcv.AqMatx11d_eye()

    @staticmethod
    def randu(a, b):
        return _pyaqcv.AqMatx11d_randu(a, b)

    @staticmethod
    def randn(a, b):
        return _pyaqcv.AqMatx11d_randn(a, b)

    def dot(self, v):
        return _pyaqcv.AqMatx11d_dot(self, v)

    def ddot(self, v):
        return _pyaqcv.AqMatx11d_ddot(self, v)

    def row(self, i):
        return _pyaqcv.AqMatx11d_row(self, i)

    def col(self, i):
        return _pyaqcv.AqMatx11d_col(self, i)

    def diag(self, *args):
        return _pyaqcv.AqMatx11d_diag(self, *args)

    def t(self):
        return _pyaqcv.AqMatx11d_t(self)

    def inv(self, *args):
        return _pyaqcv.AqMatx11d_inv(self, *args)

    def solve(self, rhs, method):
        return _pyaqcv.AqMatx11d_solve(self, rhs, method)

    def mul(self, a):
        return _pyaqcv.AqMatx11d_mul(self, a)

    def div(self, a):
        return _pyaqcv.AqMatx11d_div(self, a)

    def __call__(self, *args):
        return _pyaqcv.AqMatx11d___call__(self, *args)

    def __init__(self, *args):
        _pyaqcv.AqMatx11d_swiginit(self, _pyaqcv.new_AqMatx11d(*args))
    val = property(_pyaqcv.AqMatx11d_val_get, _pyaqcv.AqMatx11d_val_set)
    __swig_destroy__ = _pyaqcv.delete_AqMatx11d

# Register AqMatx11d in _pyaqcv:
_pyaqcv.AqMatx11d_swigregister(AqMatx11d)

def AqMatx11d_all(alpha):
    return _pyaqcv.AqMatx11d_all(alpha)

def AqMatx11d_zeros():
    return _pyaqcv.AqMatx11d_zeros()

def AqMatx11d_ones():
    return _pyaqcv.AqMatx11d_ones()

def AqMatx11d_eye():
    return _pyaqcv.AqMatx11d_eye()

def AqMatx11d_randu(a, b):
    return _pyaqcv.AqMatx11d_randu(a, b)

def AqMatx11d_randn(a, b):
    return _pyaqcv.AqMatx11d_randn(a, b)

class AqMatx21d(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    rows = _pyaqcv.AqMatx21d_rows
    cols = _pyaqcv.AqMatx21d_cols
    channels = _pyaqcv.AqMatx21d_channels
    shortdim = _pyaqcv.AqMatx21d_shortdim

    @staticmethod
    def all(alpha):
        return _pyaqcv.AqMatx21d_all(alpha)

    @staticmethod
    def zeros():
        return _pyaqcv.AqMatx21d_zeros()

    @staticmethod
    def ones():
        return _pyaqcv.AqMatx21d_ones()

    @staticmethod
    def eye():
        return _pyaqcv.AqMatx21d_eye()

    @staticmethod
    def randu(a, b):
        return _pyaqcv.AqMatx21d_randu(a, b)

    @staticmethod
    def randn(a, b):
        return _pyaqcv.AqMatx21d_randn(a, b)

    def dot(self, v):
        return _pyaqcv.AqMatx21d_dot(self, v)

    def ddot(self, v):
        return _pyaqcv.AqMatx21d_ddot(self, v)

    def row(self, i):
        return _pyaqcv.AqMatx21d_row(self, i)

    def col(self, i):
        return _pyaqcv.AqMatx21d_col(self, i)

    def diag(self, *args):
        return _pyaqcv.AqMatx21d_diag(self, *args)

    def t(self):
        return _pyaqcv.AqMatx21d_t(self)

    def inv(self, *args):
        return _pyaqcv.AqMatx21d_inv(self, *args)

    def solve(self, rhs, method):
        return _pyaqcv.AqMatx21d_solve(self, rhs, method)

    def mul(self, a):
        return _pyaqcv.AqMatx21d_mul(self, a)

    def div(self, a):
        return _pyaqcv.AqMatx21d_div(self, a)

    def __call__(self, *args):
        return _pyaqcv.AqMatx21d___call__(self, *args)

    def __init__(self, *args):
        _pyaqcv.AqMatx21d_swiginit(self, _pyaqcv.new_AqMatx21d(*args))
    val = property(_pyaqcv.AqMatx21d_val_get, _pyaqcv.AqMatx21d_val_set)
    __swig_destroy__ = _pyaqcv.delete_AqMatx21d

# Register AqMatx21d in _pyaqcv:
_pyaqcv.AqMatx21d_swigregister(AqMatx21d)

def AqMatx21d_all(alpha):
    return _pyaqcv.AqMatx21d_all(alpha)

def AqMatx21d_zeros():
    return _pyaqcv.AqMatx21d_zeros()

def AqMatx21d_ones():
    return _pyaqcv.AqMatx21d_ones()

def AqMatx21d_eye():
    return _pyaqcv.AqMatx21d_eye()

def AqMatx21d_randu(a, b):
    return _pyaqcv.AqMatx21d_randu(a, b)

def AqMatx21d_randn(a, b):
    return _pyaqcv.AqMatx21d_randn(a, b)

class AqMatx31d(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    rows = _pyaqcv.AqMatx31d_rows
    cols = _pyaqcv.AqMatx31d_cols
    channels = _pyaqcv.AqMatx31d_channels
    shortdim = _pyaqcv.AqMatx31d_shortdim

    @staticmethod
    def all(alpha):
        return _pyaqcv.AqMatx31d_all(alpha)

    @staticmethod
    def zeros():
        return _pyaqcv.AqMatx31d_zeros()

    @staticmethod
    def ones():
        return _pyaqcv.AqMatx31d_ones()

    @staticmethod
    def eye():
        return _pyaqcv.AqMatx31d_eye()

    @staticmethod
    def randu(a, b):
        return _pyaqcv.AqMatx31d_randu(a, b)

    @staticmethod
    def randn(a, b):
        return _pyaqcv.AqMatx31d_randn(a, b)

    def dot(self, v):
        return _pyaqcv.AqMatx31d_dot(self, v)

    def ddot(self, v):
        return _pyaqcv.AqMatx31d_ddot(self, v)

    def row(self, i):
        return _pyaqcv.AqMatx31d_row(self, i)

    def col(self, i):
        return _pyaqcv.AqMatx31d_col(self, i)

    def diag(self, *args):
        return _pyaqcv.AqMatx31d_diag(self, *args)

    def t(self):
        return _pyaqcv.AqMatx31d_t(self)

    def inv(self, *args):
        return _pyaqcv.AqMatx31d_inv(self, *args)

    def solve(self, rhs, method):
        return _pyaqcv.AqMatx31d_solve(self, rhs, method)

    def mul(self, a):
        return _pyaqcv.AqMatx31d_mul(self, a)

    def div(self, a):
        return _pyaqcv.AqMatx31d_div(self, a)

    def __call__(self, *args):
        return _pyaqcv.AqMatx31d___call__(self, *args)

    def __init__(self, *args):
        _pyaqcv.AqMatx31d_swiginit(self, _pyaqcv.new_AqMatx31d(*args))
    val = property(_pyaqcv.AqMatx31d_val_get, _pyaqcv.AqMatx31d_val_set)
    __swig_destroy__ = _pyaqcv.delete_AqMatx31d

# Register AqMatx31d in _pyaqcv:
_pyaqcv.AqMatx31d_swigregister(AqMatx31d)

def AqMatx31d_all(alpha):
    return _pyaqcv.AqMatx31d_all(alpha)

def AqMatx31d_zeros():
    return _pyaqcv.AqMatx31d_zeros()

def AqMatx31d_ones():
    return _pyaqcv.AqMatx31d_ones()

def AqMatx31d_eye():
    return _pyaqcv.AqMatx31d_eye()

def AqMatx31d_randu(a, b):
    return _pyaqcv.AqMatx31d_randu(a, b)

def AqMatx31d_randn(a, b):
    return _pyaqcv.AqMatx31d_randn(a, b)

class AqMatx41d(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    rows = _pyaqcv.AqMatx41d_rows
    cols = _pyaqcv.AqMatx41d_cols
    channels = _pyaqcv.AqMatx41d_channels
    shortdim = _pyaqcv.AqMatx41d_shortdim

    @staticmethod
    def all(alpha):
        return _pyaqcv.AqMatx41d_all(alpha)

    @staticmethod
    def zeros():
        return _pyaqcv.AqMatx41d_zeros()

    @staticmethod
    def ones():
        return _pyaqcv.AqMatx41d_ones()

    @staticmethod
    def eye():
        return _pyaqcv.AqMatx41d_eye()

    @staticmethod
    def randu(a, b):
        return _pyaqcv.AqMatx41d_randu(a, b)

    @staticmethod
    def randn(a, b):
        return _pyaqcv.AqMatx41d_randn(a, b)

    def diag(self, *args):
        return _pyaqcv.AqMatx41d_diag(self, *args)

    def mul(self, a):
        return _pyaqcv.AqMatx41d_mul(self, a)

    def div(self, a):
        return _pyaqcv.AqMatx41d_div(self, a)

    def __call__(self, *args):
        return _pyaqcv.AqMatx41d___call__(self, *args)

    def __init__(self, *args):
        _pyaqcv.AqMatx41d_swiginit(self, _pyaqcv.new_AqMatx41d(*args))
    val = property(_pyaqcv.AqMatx41d_val_get, _pyaqcv.AqMatx41d_val_set)
    __swig_destroy__ = _pyaqcv.delete_AqMatx41d

# Register AqMatx41d in _pyaqcv:
_pyaqcv.AqMatx41d_swigregister(AqMatx41d)

def AqMatx41d_all(alpha):
    return _pyaqcv.AqMatx41d_all(alpha)

def AqMatx41d_zeros():
    return _pyaqcv.AqMatx41d_zeros()

def AqMatx41d_ones():
    return _pyaqcv.AqMatx41d_ones()

def AqMatx41d_eye():
    return _pyaqcv.AqMatx41d_eye()

def AqMatx41d_randu(a, b):
    return _pyaqcv.AqMatx41d_randu(a, b)

def AqMatx41d_randn(a, b):
    return _pyaqcv.AqMatx41d_randn(a, b)

class AqMatx11f(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    rows = _pyaqcv.AqMatx11f_rows
    cols = _pyaqcv.AqMatx11f_cols
    channels = _pyaqcv.AqMatx11f_channels
    shortdim = _pyaqcv.AqMatx11f_shortdim

    @staticmethod
    def all(alpha):
        return _pyaqcv.AqMatx11f_all(alpha)

    @staticmethod
    def zeros():
        return _pyaqcv.AqMatx11f_zeros()

    @staticmethod
    def ones():
        return _pyaqcv.AqMatx11f_ones()

    @staticmethod
    def eye():
        return _pyaqcv.AqMatx11f_eye()

    @staticmethod
    def randu(a, b):
        return _pyaqcv.AqMatx11f_randu(a, b)

    @staticmethod
    def randn(a, b):
        return _pyaqcv.AqMatx11f_randn(a, b)

    def dot(self, v):
        return _pyaqcv.AqMatx11f_dot(self, v)

    def ddot(self, v):
        return _pyaqcv.AqMatx11f_ddot(self, v)

    def row(self, i):
        return _pyaqcv.AqMatx11f_row(self, i)

    def col(self, i):
        return _pyaqcv.AqMatx11f_col(self, i)

    def diag(self, *args):
        return _pyaqcv.AqMatx11f_diag(self, *args)

    def t(self):
        return _pyaqcv.AqMatx11f_t(self)

    def inv(self, *args):
        return _pyaqcv.AqMatx11f_inv(self, *args)

    def solve(self, rhs, method):
        return _pyaqcv.AqMatx11f_solve(self, rhs, method)

    def mul(self, a):
        return _pyaqcv.AqMatx11f_mul(self, a)

    def div(self, a):
        return _pyaqcv.AqMatx11f_div(self, a)

    def __call__(self, *args):
        return _pyaqcv.AqMatx11f___call__(self, *args)

    def __init__(self, *args):
        _pyaqcv.AqMatx11f_swiginit(self, _pyaqcv.new_AqMatx11f(*args))
    val = property(_pyaqcv.AqMatx11f_val_get, _pyaqcv.AqMatx11f_val_set)
    __swig_destroy__ = _pyaqcv.delete_AqMatx11f

# Register AqMatx11f in _pyaqcv:
_pyaqcv.AqMatx11f_swigregister(AqMatx11f)

def AqMatx11f_all(alpha):
    return _pyaqcv.AqMatx11f_all(alpha)

def AqMatx11f_zeros():
    return _pyaqcv.AqMatx11f_zeros()

def AqMatx11f_ones():
    return _pyaqcv.AqMatx11f_ones()

def AqMatx11f_eye():
    return _pyaqcv.AqMatx11f_eye()

def AqMatx11f_randu(a, b):
    return _pyaqcv.AqMatx11f_randu(a, b)

def AqMatx11f_randn(a, b):
    return _pyaqcv.AqMatx11f_randn(a, b)

class AqMatx21f(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    rows = _pyaqcv.AqMatx21f_rows
    cols = _pyaqcv.AqMatx21f_cols
    channels = _pyaqcv.AqMatx21f_channels
    shortdim = _pyaqcv.AqMatx21f_shortdim

    @staticmethod
    def all(alpha):
        return _pyaqcv.AqMatx21f_all(alpha)

    @staticmethod
    def zeros():
        return _pyaqcv.AqMatx21f_zeros()

    @staticmethod
    def ones():
        return _pyaqcv.AqMatx21f_ones()

    @staticmethod
    def eye():
        return _pyaqcv.AqMatx21f_eye()

    @staticmethod
    def randu(a, b):
        return _pyaqcv.AqMatx21f_randu(a, b)

    @staticmethod
    def randn(a, b):
        return _pyaqcv.AqMatx21f_randn(a, b)

    def dot(self, v):
        return _pyaqcv.AqMatx21f_dot(self, v)

    def ddot(self, v):
        return _pyaqcv.AqMatx21f_ddot(self, v)

    def row(self, i):
        return _pyaqcv.AqMatx21f_row(self, i)

    def col(self, i):
        return _pyaqcv.AqMatx21f_col(self, i)

    def diag(self, *args):
        return _pyaqcv.AqMatx21f_diag(self, *args)

    def t(self):
        return _pyaqcv.AqMatx21f_t(self)

    def inv(self, *args):
        return _pyaqcv.AqMatx21f_inv(self, *args)

    def solve(self, rhs, method):
        return _pyaqcv.AqMatx21f_solve(self, rhs, method)

    def mul(self, a):
        return _pyaqcv.AqMatx21f_mul(self, a)

    def div(self, a):
        return _pyaqcv.AqMatx21f_div(self, a)

    def __call__(self, *args):
        return _pyaqcv.AqMatx21f___call__(self, *args)

    def __init__(self, *args):
        _pyaqcv.AqMatx21f_swiginit(self, _pyaqcv.new_AqMatx21f(*args))
    val = property(_pyaqcv.AqMatx21f_val_get, _pyaqcv.AqMatx21f_val_set)
    __swig_destroy__ = _pyaqcv.delete_AqMatx21f

# Register AqMatx21f in _pyaqcv:
_pyaqcv.AqMatx21f_swigregister(AqMatx21f)

def AqMatx21f_all(alpha):
    return _pyaqcv.AqMatx21f_all(alpha)

def AqMatx21f_zeros():
    return _pyaqcv.AqMatx21f_zeros()

def AqMatx21f_ones():
    return _pyaqcv.AqMatx21f_ones()

def AqMatx21f_eye():
    return _pyaqcv.AqMatx21f_eye()

def AqMatx21f_randu(a, b):
    return _pyaqcv.AqMatx21f_randu(a, b)

def AqMatx21f_randn(a, b):
    return _pyaqcv.AqMatx21f_randn(a, b)

class AqMatx31f(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    rows = _pyaqcv.AqMatx31f_rows
    cols = _pyaqcv.AqMatx31f_cols
    channels = _pyaqcv.AqMatx31f_channels
    shortdim = _pyaqcv.AqMatx31f_shortdim

    @staticmethod
    def all(alpha):
        return _pyaqcv.AqMatx31f_all(alpha)

    @staticmethod
    def zeros():
        return _pyaqcv.AqMatx31f_zeros()

    @staticmethod
    def ones():
        return _pyaqcv.AqMatx31f_ones()

    @staticmethod
    def eye():
        return _pyaqcv.AqMatx31f_eye()

    @staticmethod
    def randu(a, b):
        return _pyaqcv.AqMatx31f_randu(a, b)

    @staticmethod
    def randn(a, b):
        return _pyaqcv.AqMatx31f_randn(a, b)

    def dot(self, v):
        return _pyaqcv.AqMatx31f_dot(self, v)

    def ddot(self, v):
        return _pyaqcv.AqMatx31f_ddot(self, v)

    def row(self, i):
        return _pyaqcv.AqMatx31f_row(self, i)

    def col(self, i):
        return _pyaqcv.AqMatx31f_col(self, i)

    def diag(self, *args):
        return _pyaqcv.AqMatx31f_diag(self, *args)

    def t(self):
        return _pyaqcv.AqMatx31f_t(self)

    def inv(self, *args):
        return _pyaqcv.AqMatx31f_inv(self, *args)

    def solve(self, rhs, method):
        return _pyaqcv.AqMatx31f_solve(self, rhs, method)

    def mul(self, a):
        return _pyaqcv.AqMatx31f_mul(self, a)

    def div(self, a):
        return _pyaqcv.AqMatx31f_div(self, a)

    def __call__(self, *args):
        return _pyaqcv.AqMatx31f___call__(self, *args)

    def __init__(self, *args):
        _pyaqcv.AqMatx31f_swiginit(self, _pyaqcv.new_AqMatx31f(*args))
    val = property(_pyaqcv.AqMatx31f_val_get, _pyaqcv.AqMatx31f_val_set)
    __swig_destroy__ = _pyaqcv.delete_AqMatx31f

# Register AqMatx31f in _pyaqcv:
_pyaqcv.AqMatx31f_swigregister(AqMatx31f)

def AqMatx31f_all(alpha):
    return _pyaqcv.AqMatx31f_all(alpha)

def AqMatx31f_zeros():
    return _pyaqcv.AqMatx31f_zeros()

def AqMatx31f_ones():
    return _pyaqcv.AqMatx31f_ones()

def AqMatx31f_eye():
    return _pyaqcv.AqMatx31f_eye()

def AqMatx31f_randu(a, b):
    return _pyaqcv.AqMatx31f_randu(a, b)

def AqMatx31f_randn(a, b):
    return _pyaqcv.AqMatx31f_randn(a, b)

class AqMatx41f(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    rows = _pyaqcv.AqMatx41f_rows
    cols = _pyaqcv.AqMatx41f_cols
    channels = _pyaqcv.AqMatx41f_channels
    shortdim = _pyaqcv.AqMatx41f_shortdim

    @staticmethod
    def all(alpha):
        return _pyaqcv.AqMatx41f_all(alpha)

    @staticmethod
    def zeros():
        return _pyaqcv.AqMatx41f_zeros()

    @staticmethod
    def ones():
        return _pyaqcv.AqMatx41f_ones()

    @staticmethod
    def eye():
        return _pyaqcv.AqMatx41f_eye()

    @staticmethod
    def randu(a, b):
        return _pyaqcv.AqMatx41f_randu(a, b)

    @staticmethod
    def randn(a, b):
        return _pyaqcv.AqMatx41f_randn(a, b)

    def dot(self, v):
        return _pyaqcv.AqMatx41f_dot(self, v)

    def ddot(self, v):
        return _pyaqcv.AqMatx41f_ddot(self, v)

    def row(self, i):
        return _pyaqcv.AqMatx41f_row(self, i)

    def col(self, i):
        return _pyaqcv.AqMatx41f_col(self, i)

    def diag(self, *args):
        return _pyaqcv.AqMatx41f_diag(self, *args)

    def t(self):
        return _pyaqcv.AqMatx41f_t(self)

    def inv(self, *args):
        return _pyaqcv.AqMatx41f_inv(self, *args)

    def solve(self, rhs, method):
        return _pyaqcv.AqMatx41f_solve(self, rhs, method)

    def mul(self, a):
        return _pyaqcv.AqMatx41f_mul(self, a)

    def div(self, a):
        return _pyaqcv.AqMatx41f_div(self, a)

    def __call__(self, *args):
        return _pyaqcv.AqMatx41f___call__(self, *args)

    def __init__(self, *args):
        _pyaqcv.AqMatx41f_swiginit(self, _pyaqcv.new_AqMatx41f(*args))
    val = property(_pyaqcv.AqMatx41f_val_get, _pyaqcv.AqMatx41f_val_set)
    __swig_destroy__ = _pyaqcv.delete_AqMatx41f

# Register AqMatx41f in _pyaqcv:
_pyaqcv.AqMatx41f_swigregister(AqMatx41f)

def AqMatx41f_all(alpha):
    return _pyaqcv.AqMatx41f_all(alpha)

def AqMatx41f_zeros():
    return _pyaqcv.AqMatx41f_zeros()

def AqMatx41f_ones():
    return _pyaqcv.AqMatx41f_ones()

def AqMatx41f_eye():
    return _pyaqcv.AqMatx41f_eye()

def AqMatx41f_randu(a, b):
    return _pyaqcv.AqMatx41f_randu(a, b)

def AqMatx41f_randn(a, b):
    return _pyaqcv.AqMatx41f_randn(a, b)

class AqVec1b(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    channels = _pyaqcv.AqVec1b_channels
    _dummy_enum_finalizer = _pyaqcv.AqVec1b__dummy_enum_finalizer

    @staticmethod
    def all(alpha):
        return _pyaqcv.AqVec1b_all(alpha)

    def mul(self, v):
        return _pyaqcv.AqVec1b_mul(self, v)

    def conj(self):
        return _pyaqcv.AqVec1b_conj(self)

    def cross(self, v):
        return _pyaqcv.AqVec1b_cross(self, v)

    def __call__(self, *args):
        return _pyaqcv.AqVec1b___call__(self, *args)

    def __getitem__(self, i):
        return _pyaqcv.AqVec1b___getitem__(self, i)

    def __setitem__(self, i, val):
        return _pyaqcv.AqVec1b___setitem__(self, i, val)

    def __init__(self, *args):
        _pyaqcv.AqVec1b_swiginit(self, _pyaqcv.new_AqVec1b(*args))
    __swig_destroy__ = _pyaqcv.delete_AqVec1b

# Register AqVec1b in _pyaqcv:
_pyaqcv.AqVec1b_swigregister(AqVec1b)

def AqVec1b_all(alpha):
    return _pyaqcv.AqVec1b_all(alpha)

class AqVec2b(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    channels = _pyaqcv.AqVec2b_channels
    _dummy_enum_finalizer = _pyaqcv.AqVec2b__dummy_enum_finalizer

    @staticmethod
    def all(alpha):
        return _pyaqcv.AqVec2b_all(alpha)

    def mul(self, v):
        return _pyaqcv.AqVec2b_mul(self, v)

    def conj(self):
        return _pyaqcv.AqVec2b_conj(self)

    def cross(self, v):
        return _pyaqcv.AqVec2b_cross(self, v)

    def __call__(self, *args):
        return _pyaqcv.AqVec2b___call__(self, *args)

    def __getitem__(self, i):
        return _pyaqcv.AqVec2b___getitem__(self, i)

    def __setitem__(self, i, val):
        return _pyaqcv.AqVec2b___setitem__(self, i, val)

    def __init__(self, *args):
        _pyaqcv.AqVec2b_swiginit(self, _pyaqcv.new_AqVec2b(*args))
    __swig_destroy__ = _pyaqcv.delete_AqVec2b

# Register AqVec2b in _pyaqcv:
_pyaqcv.AqVec2b_swigregister(AqVec2b)

def AqVec2b_all(alpha):
    return _pyaqcv.AqVec2b_all(alpha)

class AqVec3b(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    channels = _pyaqcv.AqVec3b_channels
    _dummy_enum_finalizer = _pyaqcv.AqVec3b__dummy_enum_finalizer

    @staticmethod
    def all(alpha):
        return _pyaqcv.AqVec3b_all(alpha)

    def mul(self, v):
        return _pyaqcv.AqVec3b_mul(self, v)

    def conj(self):
        return _pyaqcv.AqVec3b_conj(self)

    def cross(self, v):
        return _pyaqcv.AqVec3b_cross(self, v)

    def __call__(self, *args):
        return _pyaqcv.AqVec3b___call__(self, *args)

    def __getitem__(self, i):
        return _pyaqcv.AqVec3b___getitem__(self, i)

    def __setitem__(self, i, val):
        return _pyaqcv.AqVec3b___setitem__(self, i, val)

    def __init__(self, *args):
        _pyaqcv.AqVec3b_swiginit(self, _pyaqcv.new_AqVec3b(*args))
    __swig_destroy__ = _pyaqcv.delete_AqVec3b

# Register AqVec3b in _pyaqcv:
_pyaqcv.AqVec3b_swigregister(AqVec3b)

def AqVec3b_all(alpha):
    return _pyaqcv.AqVec3b_all(alpha)

class AqVec4b(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    channels = _pyaqcv.AqVec4b_channels
    _dummy_enum_finalizer = _pyaqcv.AqVec4b__dummy_enum_finalizer

    @staticmethod
    def all(alpha):
        return _pyaqcv.AqVec4b_all(alpha)

    def mul(self, v):
        return _pyaqcv.AqVec4b_mul(self, v)

    def conj(self):
        return _pyaqcv.AqVec4b_conj(self)

    def cross(self, v):
        return _pyaqcv.AqVec4b_cross(self, v)

    def __call__(self, *args):
        return _pyaqcv.AqVec4b___call__(self, *args)

    def __getitem__(self, i):
        return _pyaqcv.AqVec4b___getitem__(self, i)

    def __setitem__(self, i, val):
        return _pyaqcv.AqVec4b___setitem__(self, i, val)

    def __init__(self, *args):
        _pyaqcv.AqVec4b_swiginit(self, _pyaqcv.new_AqVec4b(*args))
    __swig_destroy__ = _pyaqcv.delete_AqVec4b

# Register AqVec4b in _pyaqcv:
_pyaqcv.AqVec4b_swigregister(AqVec4b)

def AqVec4b_all(alpha):
    return _pyaqcv.AqVec4b_all(alpha)

class AqVec1c(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    channels = _pyaqcv.AqVec1c_channels
    _dummy_enum_finalizer = _pyaqcv.AqVec1c__dummy_enum_finalizer

    @staticmethod
    def all(alpha):
        return _pyaqcv.AqVec1c_all(alpha)

    def mul(self, v):
        return _pyaqcv.AqVec1c_mul(self, v)

    def conj(self):
        return _pyaqcv.AqVec1c_conj(self)

    def cross(self, v):
        return _pyaqcv.AqVec1c_cross(self, v)

    def __call__(self, *args):
        return _pyaqcv.AqVec1c___call__(self, *args)

    def __getitem__(self, i):
        return _pyaqcv.AqVec1c___getitem__(self, i)

    def __setitem__(self, i, val):
        return _pyaqcv.AqVec1c___setitem__(self, i, val)

    def __init__(self, *args):
        _pyaqcv.AqVec1c_swiginit(self, _pyaqcv.new_AqVec1c(*args))
    __swig_destroy__ = _pyaqcv.delete_AqVec1c

# Register AqVec1c in _pyaqcv:
_pyaqcv.AqVec1c_swigregister(AqVec1c)

def AqVec1c_all(alpha):
    return _pyaqcv.AqVec1c_all(alpha)

class AqVec2c(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    channels = _pyaqcv.AqVec2c_channels
    _dummy_enum_finalizer = _pyaqcv.AqVec2c__dummy_enum_finalizer

    @staticmethod
    def all(alpha):
        return _pyaqcv.AqVec2c_all(alpha)

    def mul(self, v):
        return _pyaqcv.AqVec2c_mul(self, v)

    def conj(self):
        return _pyaqcv.AqVec2c_conj(self)

    def cross(self, v):
        return _pyaqcv.AqVec2c_cross(self, v)

    def __call__(self, *args):
        return _pyaqcv.AqVec2c___call__(self, *args)

    def __getitem__(self, i):
        return _pyaqcv.AqVec2c___getitem__(self, i)

    def __setitem__(self, i, val):
        return _pyaqcv.AqVec2c___setitem__(self, i, val)

    def __init__(self, *args):
        _pyaqcv.AqVec2c_swiginit(self, _pyaqcv.new_AqVec2c(*args))
    __swig_destroy__ = _pyaqcv.delete_AqVec2c

# Register AqVec2c in _pyaqcv:
_pyaqcv.AqVec2c_swigregister(AqVec2c)

def AqVec2c_all(alpha):
    return _pyaqcv.AqVec2c_all(alpha)

class AqVec3c(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    channels = _pyaqcv.AqVec3c_channels
    _dummy_enum_finalizer = _pyaqcv.AqVec3c__dummy_enum_finalizer

    @staticmethod
    def all(alpha):
        return _pyaqcv.AqVec3c_all(alpha)

    def mul(self, v):
        return _pyaqcv.AqVec3c_mul(self, v)

    def conj(self):
        return _pyaqcv.AqVec3c_conj(self)

    def cross(self, v):
        return _pyaqcv.AqVec3c_cross(self, v)

    def __call__(self, *args):
        return _pyaqcv.AqVec3c___call__(self, *args)

    def __getitem__(self, i):
        return _pyaqcv.AqVec3c___getitem__(self, i)

    def __setitem__(self, i, val):
        return _pyaqcv.AqVec3c___setitem__(self, i, val)

    def __init__(self, *args):
        _pyaqcv.AqVec3c_swiginit(self, _pyaqcv.new_AqVec3c(*args))
    __swig_destroy__ = _pyaqcv.delete_AqVec3c

# Register AqVec3c in _pyaqcv:
_pyaqcv.AqVec3c_swigregister(AqVec3c)

def AqVec3c_all(alpha):
    return _pyaqcv.AqVec3c_all(alpha)

class AqVec4c(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    channels = _pyaqcv.AqVec4c_channels
    _dummy_enum_finalizer = _pyaqcv.AqVec4c__dummy_enum_finalizer

    @staticmethod
    def all(alpha):
        return _pyaqcv.AqVec4c_all(alpha)

    def mul(self, v):
        return _pyaqcv.AqVec4c_mul(self, v)

    def conj(self):
        return _pyaqcv.AqVec4c_conj(self)

    def cross(self, v):
        return _pyaqcv.AqVec4c_cross(self, v)

    def __call__(self, *args):
        return _pyaqcv.AqVec4c___call__(self, *args)

    def __getitem__(self, i):
        return _pyaqcv.AqVec4c___getitem__(self, i)

    def __setitem__(self, i, val):
        return _pyaqcv.AqVec4c___setitem__(self, i, val)

    def __init__(self, *args):
        _pyaqcv.AqVec4c_swiginit(self, _pyaqcv.new_AqVec4c(*args))
    __swig_destroy__ = _pyaqcv.delete_AqVec4c

# Register AqVec4c in _pyaqcv:
_pyaqcv.AqVec4c_swigregister(AqVec4c)

def AqVec4c_all(alpha):
    return _pyaqcv.AqVec4c_all(alpha)

class AqVec1s(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    channels = _pyaqcv.AqVec1s_channels
    _dummy_enum_finalizer = _pyaqcv.AqVec1s__dummy_enum_finalizer

    @staticmethod
    def all(alpha):
        return _pyaqcv.AqVec1s_all(alpha)

    def mul(self, v):
        return _pyaqcv.AqVec1s_mul(self, v)

    def conj(self):
        return _pyaqcv.AqVec1s_conj(self)

    def cross(self, v):
        return _pyaqcv.AqVec1s_cross(self, v)

    def __call__(self, *args):
        return _pyaqcv.AqVec1s___call__(self, *args)

    def __getitem__(self, i):
        return _pyaqcv.AqVec1s___getitem__(self, i)

    def __setitem__(self, i, val):
        return _pyaqcv.AqVec1s___setitem__(self, i, val)

    def __init__(self, *args):
        _pyaqcv.AqVec1s_swiginit(self, _pyaqcv.new_AqVec1s(*args))
    __swig_destroy__ = _pyaqcv.delete_AqVec1s

# Register AqVec1s in _pyaqcv:
_pyaqcv.AqVec1s_swigregister(AqVec1s)

def AqVec1s_all(alpha):
    return _pyaqcv.AqVec1s_all(alpha)

class AqVec2s(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    channels = _pyaqcv.AqVec2s_channels
    _dummy_enum_finalizer = _pyaqcv.AqVec2s__dummy_enum_finalizer

    @staticmethod
    def all(alpha):
        return _pyaqcv.AqVec2s_all(alpha)

    def mul(self, v):
        return _pyaqcv.AqVec2s_mul(self, v)

    def conj(self):
        return _pyaqcv.AqVec2s_conj(self)

    def cross(self, v):
        return _pyaqcv.AqVec2s_cross(self, v)

    def __call__(self, *args):
        return _pyaqcv.AqVec2s___call__(self, *args)

    def __getitem__(self, i):
        return _pyaqcv.AqVec2s___getitem__(self, i)

    def __setitem__(self, i, val):
        return _pyaqcv.AqVec2s___setitem__(self, i, val)

    def __init__(self, *args):
        _pyaqcv.AqVec2s_swiginit(self, _pyaqcv.new_AqVec2s(*args))
    __swig_destroy__ = _pyaqcv.delete_AqVec2s

# Register AqVec2s in _pyaqcv:
_pyaqcv.AqVec2s_swigregister(AqVec2s)

def AqVec2s_all(alpha):
    return _pyaqcv.AqVec2s_all(alpha)

class AqVec3s(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    channels = _pyaqcv.AqVec3s_channels
    _dummy_enum_finalizer = _pyaqcv.AqVec3s__dummy_enum_finalizer

    @staticmethod
    def all(alpha):
        return _pyaqcv.AqVec3s_all(alpha)

    def mul(self, v):
        return _pyaqcv.AqVec3s_mul(self, v)

    def conj(self):
        return _pyaqcv.AqVec3s_conj(self)

    def cross(self, v):
        return _pyaqcv.AqVec3s_cross(self, v)

    def __call__(self, *args):
        return _pyaqcv.AqVec3s___call__(self, *args)

    def __getitem__(self, i):
        return _pyaqcv.AqVec3s___getitem__(self, i)

    def __setitem__(self, i, val):
        return _pyaqcv.AqVec3s___setitem__(self, i, val)

    def __init__(self, *args):
        _pyaqcv.AqVec3s_swiginit(self, _pyaqcv.new_AqVec3s(*args))
    __swig_destroy__ = _pyaqcv.delete_AqVec3s

# Register AqVec3s in _pyaqcv:
_pyaqcv.AqVec3s_swigregister(AqVec3s)

def AqVec3s_all(alpha):
    return _pyaqcv.AqVec3s_all(alpha)

class AqVec4s(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    channels = _pyaqcv.AqVec4s_channels
    _dummy_enum_finalizer = _pyaqcv.AqVec4s__dummy_enum_finalizer

    @staticmethod
    def all(alpha):
        return _pyaqcv.AqVec4s_all(alpha)

    def mul(self, v):
        return _pyaqcv.AqVec4s_mul(self, v)

    def conj(self):
        return _pyaqcv.AqVec4s_conj(self)

    def cross(self, v):
        return _pyaqcv.AqVec4s_cross(self, v)

    def __call__(self, *args):
        return _pyaqcv.AqVec4s___call__(self, *args)

    def __getitem__(self, i):
        return _pyaqcv.AqVec4s___getitem__(self, i)

    def __setitem__(self, i, val):
        return _pyaqcv.AqVec4s___setitem__(self, i, val)

    def __init__(self, *args):
        _pyaqcv.AqVec4s_swiginit(self, _pyaqcv.new_AqVec4s(*args))
    __swig_destroy__ = _pyaqcv.delete_AqVec4s

# Register AqVec4s in _pyaqcv:
_pyaqcv.AqVec4s_swigregister(AqVec4s)

def AqVec4s_all(alpha):
    return _pyaqcv.AqVec4s_all(alpha)

class AqVec1w(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    channels = _pyaqcv.AqVec1w_channels
    _dummy_enum_finalizer = _pyaqcv.AqVec1w__dummy_enum_finalizer

    @staticmethod
    def all(alpha):
        return _pyaqcv.AqVec1w_all(alpha)

    def mul(self, v):
        return _pyaqcv.AqVec1w_mul(self, v)

    def conj(self):
        return _pyaqcv.AqVec1w_conj(self)

    def cross(self, v):
        return _pyaqcv.AqVec1w_cross(self, v)

    def __call__(self, *args):
        return _pyaqcv.AqVec1w___call__(self, *args)

    def __getitem__(self, i):
        return _pyaqcv.AqVec1w___getitem__(self, i)

    def __setitem__(self, i, val):
        return _pyaqcv.AqVec1w___setitem__(self, i, val)

    def __init__(self, *args):
        _pyaqcv.AqVec1w_swiginit(self, _pyaqcv.new_AqVec1w(*args))
    __swig_destroy__ = _pyaqcv.delete_AqVec1w

# Register AqVec1w in _pyaqcv:
_pyaqcv.AqVec1w_swigregister(AqVec1w)

def AqVec1w_all(alpha):
    return _pyaqcv.AqVec1w_all(alpha)

class AqVec2w(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    channels = _pyaqcv.AqVec2w_channels
    _dummy_enum_finalizer = _pyaqcv.AqVec2w__dummy_enum_finalizer

    @staticmethod
    def all(alpha):
        return _pyaqcv.AqVec2w_all(alpha)

    def mul(self, v):
        return _pyaqcv.AqVec2w_mul(self, v)

    def conj(self):
        return _pyaqcv.AqVec2w_conj(self)

    def cross(self, v):
        return _pyaqcv.AqVec2w_cross(self, v)

    def __call__(self, *args):
        return _pyaqcv.AqVec2w___call__(self, *args)

    def __getitem__(self, i):
        return _pyaqcv.AqVec2w___getitem__(self, i)

    def __setitem__(self, i, val):
        return _pyaqcv.AqVec2w___setitem__(self, i, val)

    def __init__(self, *args):
        _pyaqcv.AqVec2w_swiginit(self, _pyaqcv.new_AqVec2w(*args))
    __swig_destroy__ = _pyaqcv.delete_AqVec2w

# Register AqVec2w in _pyaqcv:
_pyaqcv.AqVec2w_swigregister(AqVec2w)

def AqVec2w_all(alpha):
    return _pyaqcv.AqVec2w_all(alpha)

class AqVec3w(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    channels = _pyaqcv.AqVec3w_channels
    _dummy_enum_finalizer = _pyaqcv.AqVec3w__dummy_enum_finalizer

    @staticmethod
    def all(alpha):
        return _pyaqcv.AqVec3w_all(alpha)

    def mul(self, v):
        return _pyaqcv.AqVec3w_mul(self, v)

    def conj(self):
        return _pyaqcv.AqVec3w_conj(self)

    def cross(self, v):
        return _pyaqcv.AqVec3w_cross(self, v)

    def __call__(self, *args):
        return _pyaqcv.AqVec3w___call__(self, *args)

    def __getitem__(self, i):
        return _pyaqcv.AqVec3w___getitem__(self, i)

    def __setitem__(self, i, val):
        return _pyaqcv.AqVec3w___setitem__(self, i, val)

    def __init__(self, *args):
        _pyaqcv.AqVec3w_swiginit(self, _pyaqcv.new_AqVec3w(*args))
    __swig_destroy__ = _pyaqcv.delete_AqVec3w

# Register AqVec3w in _pyaqcv:
_pyaqcv.AqVec3w_swigregister(AqVec3w)

def AqVec3w_all(alpha):
    return _pyaqcv.AqVec3w_all(alpha)

class AqVec4w(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    channels = _pyaqcv.AqVec4w_channels
    _dummy_enum_finalizer = _pyaqcv.AqVec4w__dummy_enum_finalizer

    @staticmethod
    def all(alpha):
        return _pyaqcv.AqVec4w_all(alpha)

    def mul(self, v):
        return _pyaqcv.AqVec4w_mul(self, v)

    def conj(self):
        return _pyaqcv.AqVec4w_conj(self)

    def cross(self, v):
        return _pyaqcv.AqVec4w_cross(self, v)

    def __call__(self, *args):
        return _pyaqcv.AqVec4w___call__(self, *args)

    def __getitem__(self, i):
        return _pyaqcv.AqVec4w___getitem__(self, i)

    def __setitem__(self, i, val):
        return _pyaqcv.AqVec4w___setitem__(self, i, val)

    def __init__(self, *args):
        _pyaqcv.AqVec4w_swiginit(self, _pyaqcv.new_AqVec4w(*args))
    __swig_destroy__ = _pyaqcv.delete_AqVec4w

# Register AqVec4w in _pyaqcv:
_pyaqcv.AqVec4w_swigregister(AqVec4w)

def AqVec4w_all(alpha):
    return _pyaqcv.AqVec4w_all(alpha)

class AqVec1i(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    channels = _pyaqcv.AqVec1i_channels
    _dummy_enum_finalizer = _pyaqcv.AqVec1i__dummy_enum_finalizer

    @staticmethod
    def all(alpha):
        return _pyaqcv.AqVec1i_all(alpha)

    def mul(self, v):
        return _pyaqcv.AqVec1i_mul(self, v)

    def conj(self):
        return _pyaqcv.AqVec1i_conj(self)

    def cross(self, v):
        return _pyaqcv.AqVec1i_cross(self, v)

    def __call__(self, *args):
        return _pyaqcv.AqVec1i___call__(self, *args)

    def __getitem__(self, i):
        return _pyaqcv.AqVec1i___getitem__(self, i)

    def __setitem__(self, i, val):
        return _pyaqcv.AqVec1i___setitem__(self, i, val)

    def __init__(self, *args):
        _pyaqcv.AqVec1i_swiginit(self, _pyaqcv.new_AqVec1i(*args))
    __swig_destroy__ = _pyaqcv.delete_AqVec1i

# Register AqVec1i in _pyaqcv:
_pyaqcv.AqVec1i_swigregister(AqVec1i)

def AqVec1i_all(alpha):
    return _pyaqcv.AqVec1i_all(alpha)

class AqVec2i(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    channels = _pyaqcv.AqVec2i_channels
    _dummy_enum_finalizer = _pyaqcv.AqVec2i__dummy_enum_finalizer

    @staticmethod
    def all(alpha):
        return _pyaqcv.AqVec2i_all(alpha)

    def mul(self, v):
        return _pyaqcv.AqVec2i_mul(self, v)

    def conj(self):
        return _pyaqcv.AqVec2i_conj(self)

    def cross(self, v):
        return _pyaqcv.AqVec2i_cross(self, v)

    def __call__(self, *args):
        return _pyaqcv.AqVec2i___call__(self, *args)

    def __getitem__(self, i):
        return _pyaqcv.AqVec2i___getitem__(self, i)

    def __setitem__(self, i, val):
        return _pyaqcv.AqVec2i___setitem__(self, i, val)

    def __init__(self, *args):
        _pyaqcv.AqVec2i_swiginit(self, _pyaqcv.new_AqVec2i(*args))
    __swig_destroy__ = _pyaqcv.delete_AqVec2i

# Register AqVec2i in _pyaqcv:
_pyaqcv.AqVec2i_swigregister(AqVec2i)

def AqVec2i_all(alpha):
    return _pyaqcv.AqVec2i_all(alpha)

class AqVec3i(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    channels = _pyaqcv.AqVec3i_channels
    _dummy_enum_finalizer = _pyaqcv.AqVec3i__dummy_enum_finalizer

    @staticmethod
    def all(alpha):
        return _pyaqcv.AqVec3i_all(alpha)

    def mul(self, v):
        return _pyaqcv.AqVec3i_mul(self, v)

    def conj(self):
        return _pyaqcv.AqVec3i_conj(self)

    def cross(self, v):
        return _pyaqcv.AqVec3i_cross(self, v)

    def __call__(self, *args):
        return _pyaqcv.AqVec3i___call__(self, *args)

    def __getitem__(self, i):
        return _pyaqcv.AqVec3i___getitem__(self, i)

    def __setitem__(self, i, val):
        return _pyaqcv.AqVec3i___setitem__(self, i, val)

    def __init__(self, *args):
        _pyaqcv.AqVec3i_swiginit(self, _pyaqcv.new_AqVec3i(*args))
    __swig_destroy__ = _pyaqcv.delete_AqVec3i

# Register AqVec3i in _pyaqcv:
_pyaqcv.AqVec3i_swigregister(AqVec3i)

def AqVec3i_all(alpha):
    return _pyaqcv.AqVec3i_all(alpha)

class AqVec4i(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    channels = _pyaqcv.AqVec4i_channels
    _dummy_enum_finalizer = _pyaqcv.AqVec4i__dummy_enum_finalizer

    @staticmethod
    def all(alpha):
        return _pyaqcv.AqVec4i_all(alpha)

    def mul(self, v):
        return _pyaqcv.AqVec4i_mul(self, v)

    def conj(self):
        return _pyaqcv.AqVec4i_conj(self)

    def cross(self, v):
        return _pyaqcv.AqVec4i_cross(self, v)

    def __call__(self, *args):
        return _pyaqcv.AqVec4i___call__(self, *args)

    def __getitem__(self, i):
        return _pyaqcv.AqVec4i___getitem__(self, i)

    def __setitem__(self, i, val):
        return _pyaqcv.AqVec4i___setitem__(self, i, val)

    def __init__(self, *args):
        _pyaqcv.AqVec4i_swiginit(self, _pyaqcv.new_AqVec4i(*args))
    __swig_destroy__ = _pyaqcv.delete_AqVec4i

# Register AqVec4i in _pyaqcv:
_pyaqcv.AqVec4i_swigregister(AqVec4i)

def AqVec4i_all(alpha):
    return _pyaqcv.AqVec4i_all(alpha)

class AqVec1f(AqMatx11f):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    channels = _pyaqcv.AqVec1f_channels
    _dummy_enum_finalizer = _pyaqcv.AqVec1f__dummy_enum_finalizer

    @staticmethod
    def all(alpha):
        return _pyaqcv.AqVec1f_all(alpha)

    def mul(self, v):
        return _pyaqcv.AqVec1f_mul(self, v)

    def conj(self):
        return _pyaqcv.AqVec1f_conj(self)

    def cross(self, v):
        return _pyaqcv.AqVec1f_cross(self, v)

    def __call__(self, *args):
        return _pyaqcv.AqVec1f___call__(self, *args)

    def __getitem__(self, i):
        return _pyaqcv.AqVec1f___getitem__(self, i)

    def __setitem__(self, i, val):
        return _pyaqcv.AqVec1f___setitem__(self, i, val)

    def __init__(self, *args):
        _pyaqcv.AqVec1f_swiginit(self, _pyaqcv.new_AqVec1f(*args))
    __swig_destroy__ = _pyaqcv.delete_AqVec1f

# Register AqVec1f in _pyaqcv:
_pyaqcv.AqVec1f_swigregister(AqVec1f)

def AqVec1f_all(alpha):
    return _pyaqcv.AqVec1f_all(alpha)

class AqVec2f(AqMatx21f):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    channels = _pyaqcv.AqVec2f_channels
    _dummy_enum_finalizer = _pyaqcv.AqVec2f__dummy_enum_finalizer

    @staticmethod
    def all(alpha):
        return _pyaqcv.AqVec2f_all(alpha)

    def mul(self, v):
        return _pyaqcv.AqVec2f_mul(self, v)

    def conj(self):
        return _pyaqcv.AqVec2f_conj(self)

    def cross(self, v):
        return _pyaqcv.AqVec2f_cross(self, v)

    def __call__(self, *args):
        return _pyaqcv.AqVec2f___call__(self, *args)

    def __getitem__(self, i):
        return _pyaqcv.AqVec2f___getitem__(self, i)

    def __setitem__(self, i, val):
        return _pyaqcv.AqVec2f___setitem__(self, i, val)

    def __init__(self, *args):
        _pyaqcv.AqVec2f_swiginit(self, _pyaqcv.new_AqVec2f(*args))
    __swig_destroy__ = _pyaqcv.delete_AqVec2f

# Register AqVec2f in _pyaqcv:
_pyaqcv.AqVec2f_swigregister(AqVec2f)

def AqVec2f_all(alpha):
    return _pyaqcv.AqVec2f_all(alpha)

class AqVec3f(AqMatx31f):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    channels = _pyaqcv.AqVec3f_channels
    _dummy_enum_finalizer = _pyaqcv.AqVec3f__dummy_enum_finalizer

    @staticmethod
    def all(alpha):
        return _pyaqcv.AqVec3f_all(alpha)

    def mul(self, v):
        return _pyaqcv.AqVec3f_mul(self, v)

    def conj(self):
        return _pyaqcv.AqVec3f_conj(self)

    def cross(self, v):
        return _pyaqcv.AqVec3f_cross(self, v)

    def __call__(self, *args):
        return _pyaqcv.AqVec3f___call__(self, *args)

    def __getitem__(self, i):
        return _pyaqcv.AqVec3f___getitem__(self, i)

    def __setitem__(self, i, val):
        return _pyaqcv.AqVec3f___setitem__(self, i, val)

    def __init__(self, *args):
        _pyaqcv.AqVec3f_swiginit(self, _pyaqcv.new_AqVec3f(*args))
    __swig_destroy__ = _pyaqcv.delete_AqVec3f

# Register AqVec3f in _pyaqcv:
_pyaqcv.AqVec3f_swigregister(AqVec3f)

def AqVec3f_all(alpha):
    return _pyaqcv.AqVec3f_all(alpha)

class AqVec4f(AqMatx41f):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    channels = _pyaqcv.AqVec4f_channels
    _dummy_enum_finalizer = _pyaqcv.AqVec4f__dummy_enum_finalizer

    @staticmethod
    def all(alpha):
        return _pyaqcv.AqVec4f_all(alpha)

    def mul(self, v):
        return _pyaqcv.AqVec4f_mul(self, v)

    def conj(self):
        return _pyaqcv.AqVec4f_conj(self)

    def cross(self, v):
        return _pyaqcv.AqVec4f_cross(self, v)

    def __call__(self, *args):
        return _pyaqcv.AqVec4f___call__(self, *args)

    def __getitem__(self, i):
        return _pyaqcv.AqVec4f___getitem__(self, i)

    def __setitem__(self, i, val):
        return _pyaqcv.AqVec4f___setitem__(self, i, val)

    def __init__(self, *args):
        _pyaqcv.AqVec4f_swiginit(self, _pyaqcv.new_AqVec4f(*args))
    __swig_destroy__ = _pyaqcv.delete_AqVec4f

# Register AqVec4f in _pyaqcv:
_pyaqcv.AqVec4f_swigregister(AqVec4f)

def AqVec4f_all(alpha):
    return _pyaqcv.AqVec4f_all(alpha)

class AqVec1d(AqMatx11d):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    channels = _pyaqcv.AqVec1d_channels
    _dummy_enum_finalizer = _pyaqcv.AqVec1d__dummy_enum_finalizer

    @staticmethod
    def all(alpha):
        return _pyaqcv.AqVec1d_all(alpha)

    def mul(self, v):
        return _pyaqcv.AqVec1d_mul(self, v)

    def conj(self):
        return _pyaqcv.AqVec1d_conj(self)

    def cross(self, v):
        return _pyaqcv.AqVec1d_cross(self, v)

    def __call__(self, *args):
        return _pyaqcv.AqVec1d___call__(self, *args)

    def __getitem__(self, i):
        return _pyaqcv.AqVec1d___getitem__(self, i)

    def __setitem__(self, i, val):
        return _pyaqcv.AqVec1d___setitem__(self, i, val)

    def __init__(self, *args):
        _pyaqcv.AqVec1d_swiginit(self, _pyaqcv.new_AqVec1d(*args))
    __swig_destroy__ = _pyaqcv.delete_AqVec1d

# Register AqVec1d in _pyaqcv:
_pyaqcv.AqVec1d_swigregister(AqVec1d)

def AqVec1d_all(alpha):
    return _pyaqcv.AqVec1d_all(alpha)

class AqVec2d(AqMatx21d):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    channels = _pyaqcv.AqVec2d_channels
    _dummy_enum_finalizer = _pyaqcv.AqVec2d__dummy_enum_finalizer

    @staticmethod
    def all(alpha):
        return _pyaqcv.AqVec2d_all(alpha)

    def mul(self, v):
        return _pyaqcv.AqVec2d_mul(self, v)

    def conj(self):
        return _pyaqcv.AqVec2d_conj(self)

    def cross(self, v):
        return _pyaqcv.AqVec2d_cross(self, v)

    def __call__(self, *args):
        return _pyaqcv.AqVec2d___call__(self, *args)

    def __getitem__(self, i):
        return _pyaqcv.AqVec2d___getitem__(self, i)

    def __setitem__(self, i, val):
        return _pyaqcv.AqVec2d___setitem__(self, i, val)

    def __init__(self, *args):
        _pyaqcv.AqVec2d_swiginit(self, _pyaqcv.new_AqVec2d(*args))
    __swig_destroy__ = _pyaqcv.delete_AqVec2d

# Register AqVec2d in _pyaqcv:
_pyaqcv.AqVec2d_swigregister(AqVec2d)

def AqVec2d_all(alpha):
    return _pyaqcv.AqVec2d_all(alpha)

class AqVec3d(AqMatx31d):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    channels = _pyaqcv.AqVec3d_channels
    _dummy_enum_finalizer = _pyaqcv.AqVec3d__dummy_enum_finalizer

    @staticmethod
    def all(alpha):
        return _pyaqcv.AqVec3d_all(alpha)

    def mul(self, v):
        return _pyaqcv.AqVec3d_mul(self, v)

    def conj(self):
        return _pyaqcv.AqVec3d_conj(self)

    def cross(self, v):
        return _pyaqcv.AqVec3d_cross(self, v)

    def __call__(self, *args):
        return _pyaqcv.AqVec3d___call__(self, *args)

    def __getitem__(self, i):
        return _pyaqcv.AqVec3d___getitem__(self, i)

    def __setitem__(self, i, val):
        return _pyaqcv.AqVec3d___setitem__(self, i, val)

    def __init__(self, *args):
        _pyaqcv.AqVec3d_swiginit(self, _pyaqcv.new_AqVec3d(*args))
    __swig_destroy__ = _pyaqcv.delete_AqVec3d

# Register AqVec3d in _pyaqcv:
_pyaqcv.AqVec3d_swigregister(AqVec3d)

def AqVec3d_all(alpha):
    return _pyaqcv.AqVec3d_all(alpha)

class AqVec4d(AqMatx41d):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    channels = _pyaqcv.AqVec4d_channels
    _dummy_enum_finalizer = _pyaqcv.AqVec4d__dummy_enum_finalizer

    @staticmethod
    def all(alpha):
        return _pyaqcv.AqVec4d_all(alpha)

    def mul(self, v):
        return _pyaqcv.AqVec4d_mul(self, v)

    def conj(self):
        return _pyaqcv.AqVec4d_conj(self)

    def cross(self, v):
        return _pyaqcv.AqVec4d_cross(self, v)

    def __call__(self, *args):
        return _pyaqcv.AqVec4d___call__(self, *args)

    def __getitem__(self, i):
        return _pyaqcv.AqVec4d___getitem__(self, i)

    def __setitem__(self, i, val):
        return _pyaqcv.AqVec4d___setitem__(self, i, val)

    def __init__(self, *args):
        _pyaqcv.AqVec4d_swiginit(self, _pyaqcv.new_AqVec4d(*args))
    __swig_destroy__ = _pyaqcv.delete_AqVec4d

# Register AqVec4d in _pyaqcv:
_pyaqcv.AqVec4d_swigregister(AqVec4d)

def AqVec4d_all(alpha):
    return _pyaqcv.AqVec4d_all(alpha)

class AqScalar(AqVec4d):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _pyaqcv.AqScalar_swiginit(self, _pyaqcv.new_AqScalar(*args))

    def __getitem__(self, i):
        return _pyaqcv.AqScalar___getitem__(self, i)

    def __setitem__(self, i, val):
        return _pyaqcv.AqScalar___setitem__(self, i, val)

    @staticmethod
    def all(v0):
        return _pyaqcv.AqScalar_all(v0)

    def mul(self, a, scale=1):
        return _pyaqcv.AqScalar_mul(self, a, scale)

    def conj(self):
        return _pyaqcv.AqScalar_conj(self)

    def is_real(self):
        return _pyaqcv.AqScalar_is_real(self)
    __swig_destroy__ = _pyaqcv.delete_AqScalar

# Register AqScalar in _pyaqcv:
_pyaqcv.AqScalar_swigregister(AqScalar)

def AqScalar_all(v0):
    return _pyaqcv.AqScalar_all(v0)

class RansacFitLine(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pyaqcv.RansacFitLine_swiginit(self, _pyaqcv.new_RansacFitLine())
    __swig_destroy__ = _pyaqcv.delete_RansacFitLine

    def set_inner_thresh(self, inner_thresh):
        return _pyaqcv.RansacFitLine_set_inner_thresh(self, inner_thresh)

    def get_inner_thresh(self):
        return _pyaqcv.RansacFitLine_get_inner_thresh(self)

    def set_iter_num(self, iter_num):
        return _pyaqcv.RansacFitLine_set_iter_num(self, iter_num)

    def get_iter_num(self):
        return _pyaqcv.RansacFitLine_get_iter_num(self)

    def execute(self, data):
        return _pyaqcv.RansacFitLine_execute(self, data)

    def set_fit_model(self, model):
        return _pyaqcv.RansacFitLine_set_fit_model(self, model)

    def get_fitted_model(self):
        return _pyaqcv.RansacFitLine_get_fitted_model(self)

# Register RansacFitLine in _pyaqcv:
_pyaqcv.RansacFitLine_swigregister(RansacFitLine)

class RansacFitCircle(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pyaqcv.RansacFitCircle_swiginit(self, _pyaqcv.new_RansacFitCircle())
    __swig_destroy__ = _pyaqcv.delete_RansacFitCircle

    def set_inner_thresh(self, inner_thresh):
        return _pyaqcv.RansacFitCircle_set_inner_thresh(self, inner_thresh)

    def get_inner_thresh(self):
        return _pyaqcv.RansacFitCircle_get_inner_thresh(self)

    def set_iter_num(self, iter_num):
        return _pyaqcv.RansacFitCircle_set_iter_num(self, iter_num)

    def get_iter_num(self):
        return _pyaqcv.RansacFitCircle_get_iter_num(self)

    def execute(self, data):
        return _pyaqcv.RansacFitCircle_execute(self, data)

    def set_fit_model(self, model):
        return _pyaqcv.RansacFitCircle_set_fit_model(self, model)

    def get_fitted_model(self):
        return _pyaqcv.RansacFitCircle_get_fitted_model(self)

# Register RansacFitCircle in _pyaqcv:
_pyaqcv.RansacFitCircle_swigregister(RansacFitCircle)

class RansacFitEllipse(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pyaqcv.RansacFitEllipse_swiginit(self, _pyaqcv.new_RansacFitEllipse())
    __swig_destroy__ = _pyaqcv.delete_RansacFitEllipse

    def set_inner_thresh(self, inner_thresh):
        return _pyaqcv.RansacFitEllipse_set_inner_thresh(self, inner_thresh)

    def get_inner_thresh(self):
        return _pyaqcv.RansacFitEllipse_get_inner_thresh(self)

    def set_iter_num(self, iter_num):
        return _pyaqcv.RansacFitEllipse_set_iter_num(self, iter_num)

    def get_iter_num(self):
        return _pyaqcv.RansacFitEllipse_get_iter_num(self)

    def execute(self, data):
        return _pyaqcv.RansacFitEllipse_execute(self, data)

    def set_fit_model(self, model):
        return _pyaqcv.RansacFitEllipse_set_fit_model(self, model)

    def get_fitted_model(self):
        return _pyaqcv.RansacFitEllipse_get_fitted_model(self)

# Register RansacFitEllipse in _pyaqcv:
_pyaqcv.RansacFitEllipse_swigregister(RansacFitEllipse)

class RansacFitPlane(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pyaqcv.RansacFitPlane_swiginit(self, _pyaqcv.new_RansacFitPlane())
    __swig_destroy__ = _pyaqcv.delete_RansacFitPlane

    def set_inner_thresh(self, inner_thresh):
        return _pyaqcv.RansacFitPlane_set_inner_thresh(self, inner_thresh)

    def get_inner_thresh(self):
        return _pyaqcv.RansacFitPlane_get_inner_thresh(self)

    def set_iter_num(self, iter_num):
        return _pyaqcv.RansacFitPlane_set_iter_num(self, iter_num)

    def get_iter_num(self):
        return _pyaqcv.RansacFitPlane_get_iter_num(self)

    def execute(self, data):
        return _pyaqcv.RansacFitPlane_execute(self, data)

    def set_fit_model(self, model):
        return _pyaqcv.RansacFitPlane_set_fit_model(self, model)

    def get_fitted_model(self):
        return _pyaqcv.RansacFitPlane_get_fitted_model(self)

# Register RansacFitPlane in _pyaqcv:
_pyaqcv.RansacFitPlane_swigregister(RansacFitPlane)

class RansacFitSphere(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pyaqcv.RansacFitSphere_swiginit(self, _pyaqcv.new_RansacFitSphere())
    __swig_destroy__ = _pyaqcv.delete_RansacFitSphere

    def set_inner_thresh(self, inner_thresh):
        return _pyaqcv.RansacFitSphere_set_inner_thresh(self, inner_thresh)

    def get_inner_thresh(self):
        return _pyaqcv.RansacFitSphere_get_inner_thresh(self)

    def set_iter_num(self, iter_num):
        return _pyaqcv.RansacFitSphere_set_iter_num(self, iter_num)

    def get_iter_num(self):
        return _pyaqcv.RansacFitSphere_get_iter_num(self)

    def execute(self, data):
        return _pyaqcv.RansacFitSphere_execute(self, data)

    def set_fit_model(self, model):
        return _pyaqcv.RansacFitSphere_set_fit_model(self, model)

    def get_fitted_model(self):
        return _pyaqcv.RansacFitSphere_get_fitted_model(self)

# Register RansacFitSphere in _pyaqcv:
_pyaqcv.RansacFitSphere_swigregister(RansacFitSphere)

class LineSingleEdgeInspectResult(SingleEdgeInspectResultBase):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _pyaqcv.delete_LineSingleEdgeInspectResult

    def clear(self):
        return _pyaqcv.LineSingleEdgeInspectResult_clear(self)
    fit_result = property(_pyaqcv.LineSingleEdgeInspectResult_fit_result_get, _pyaqcv.LineSingleEdgeInspectResult_fit_result_set)
    defect_regions = property(_pyaqcv.LineSingleEdgeInspectResult_defect_regions_get, _pyaqcv.LineSingleEdgeInspectResult_defect_regions_set)
    gap_regions = property(_pyaqcv.LineSingleEdgeInspectResult_gap_regions_get, _pyaqcv.LineSingleEdgeInspectResult_gap_regions_set)

    def __init__(self):
        _pyaqcv.LineSingleEdgeInspectResult_swiginit(self, _pyaqcv.new_LineSingleEdgeInspectResult())

# Register LineSingleEdgeInspectResult in _pyaqcv:
_pyaqcv.LineSingleEdgeInspectResult_swigregister(LineSingleEdgeInspectResult)

class CircleSingleEdgeInspectResult(SingleEdgeInspectResultBase):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _pyaqcv.delete_CircleSingleEdgeInspectResult

    def clear(self):
        return _pyaqcv.CircleSingleEdgeInspectResult_clear(self)
    fit_result = property(_pyaqcv.CircleSingleEdgeInspectResult_fit_result_get, _pyaqcv.CircleSingleEdgeInspectResult_fit_result_set)
    defect_regions = property(_pyaqcv.CircleSingleEdgeInspectResult_defect_regions_get, _pyaqcv.CircleSingleEdgeInspectResult_defect_regions_set)
    gap_regions = property(_pyaqcv.CircleSingleEdgeInspectResult_gap_regions_get, _pyaqcv.CircleSingleEdgeInspectResult_gap_regions_set)

    def __init__(self):
        _pyaqcv.CircleSingleEdgeInspectResult_swiginit(self, _pyaqcv.new_CircleSingleEdgeInspectResult())

# Register CircleSingleEdgeInspectResult in _pyaqcv:
_pyaqcv.CircleSingleEdgeInspectResult_swigregister(CircleSingleEdgeInspectResult)

class LineDualEdgeInspectResult(DualEdgeInspectResultBase):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _pyaqcv.delete_LineDualEdgeInspectResult

    def clear(self):
        return _pyaqcv.LineDualEdgeInspectResult_clear(self)
    fit_result_edge1 = property(_pyaqcv.LineDualEdgeInspectResult_fit_result_edge1_get, _pyaqcv.LineDualEdgeInspectResult_fit_result_edge1_set)
    fit_result_edge2 = property(_pyaqcv.LineDualEdgeInspectResult_fit_result_edge2_get, _pyaqcv.LineDualEdgeInspectResult_fit_result_edge2_set)
    defect_regions_edge1 = property(_pyaqcv.LineDualEdgeInspectResult_defect_regions_edge1_get, _pyaqcv.LineDualEdgeInspectResult_defect_regions_edge1_set)
    defect_regions_edge2 = property(_pyaqcv.LineDualEdgeInspectResult_defect_regions_edge2_get, _pyaqcv.LineDualEdgeInspectResult_defect_regions_edge2_set)
    gap_regions = property(_pyaqcv.LineDualEdgeInspectResult_gap_regions_get, _pyaqcv.LineDualEdgeInspectResult_gap_regions_set)

    def __init__(self):
        _pyaqcv.LineDualEdgeInspectResult_swiginit(self, _pyaqcv.new_LineDualEdgeInspectResult())

# Register LineDualEdgeInspectResult in _pyaqcv:
_pyaqcv.LineDualEdgeInspectResult_swigregister(LineDualEdgeInspectResult)

class CircleDualEdgeInspectResult(DualEdgeInspectResultBase):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _pyaqcv.delete_CircleDualEdgeInspectResult

    def clear(self):
        return _pyaqcv.CircleDualEdgeInspectResult_clear(self)
    fit_result_edge1 = property(_pyaqcv.CircleDualEdgeInspectResult_fit_result_edge1_get, _pyaqcv.CircleDualEdgeInspectResult_fit_result_edge1_set)
    fit_result_edge2 = property(_pyaqcv.CircleDualEdgeInspectResult_fit_result_edge2_get, _pyaqcv.CircleDualEdgeInspectResult_fit_result_edge2_set)
    defect_regions_edge1 = property(_pyaqcv.CircleDualEdgeInspectResult_defect_regions_edge1_get, _pyaqcv.CircleDualEdgeInspectResult_defect_regions_edge1_set)
    defect_regions_edge2 = property(_pyaqcv.CircleDualEdgeInspectResult_defect_regions_edge2_get, _pyaqcv.CircleDualEdgeInspectResult_defect_regions_edge2_set)
    gap_regions = property(_pyaqcv.CircleDualEdgeInspectResult_gap_regions_get, _pyaqcv.CircleDualEdgeInspectResult_gap_regions_set)

    def __init__(self):
        _pyaqcv.CircleDualEdgeInspectResult_swiginit(self, _pyaqcv.new_CircleDualEdgeInspectResult())

# Register CircleDualEdgeInspectResult in _pyaqcv:
_pyaqcv.CircleDualEdgeInspectResult_swigregister(CircleDualEdgeInspectResult)

class Point2iVec(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _pyaqcv.Point2iVec_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _pyaqcv.Point2iVec___nonzero__(self)

    def __bool__(self):
        return _pyaqcv.Point2iVec___bool__(self)

    def __len__(self):
        return _pyaqcv.Point2iVec___len__(self)

    def __getslice__(self, i, j):
        return _pyaqcv.Point2iVec___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _pyaqcv.Point2iVec___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _pyaqcv.Point2iVec___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _pyaqcv.Point2iVec___delitem__(self, *args)

    def __getitem__(self, *args):
        return _pyaqcv.Point2iVec___getitem__(self, *args)

    def __setitem__(self, *args):
        return _pyaqcv.Point2iVec___setitem__(self, *args)

    def pop(self):
        return _pyaqcv.Point2iVec_pop(self)

    def append(self, x):
        return _pyaqcv.Point2iVec_append(self, x)

    def empty(self):
        return _pyaqcv.Point2iVec_empty(self)

    def size(self):
        return _pyaqcv.Point2iVec_size(self)

    def swap(self, v):
        return _pyaqcv.Point2iVec_swap(self, v)

    def begin(self):
        return _pyaqcv.Point2iVec_begin(self)

    def end(self):
        return _pyaqcv.Point2iVec_end(self)

    def rbegin(self):
        return _pyaqcv.Point2iVec_rbegin(self)

    def rend(self):
        return _pyaqcv.Point2iVec_rend(self)

    def clear(self):
        return _pyaqcv.Point2iVec_clear(self)

    def get_allocator(self):
        return _pyaqcv.Point2iVec_get_allocator(self)

    def pop_back(self):
        return _pyaqcv.Point2iVec_pop_back(self)

    def erase(self, *args):
        return _pyaqcv.Point2iVec_erase(self, *args)

    def __init__(self, *args):
        _pyaqcv.Point2iVec_swiginit(self, _pyaqcv.new_Point2iVec(*args))

    def push_back(self, x):
        return _pyaqcv.Point2iVec_push_back(self, x)

    def front(self):
        return _pyaqcv.Point2iVec_front(self)

    def back(self):
        return _pyaqcv.Point2iVec_back(self)

    def assign(self, n, x):
        return _pyaqcv.Point2iVec_assign(self, n, x)

    def resize(self, *args):
        return _pyaqcv.Point2iVec_resize(self, *args)

    def insert(self, *args):
        return _pyaqcv.Point2iVec_insert(self, *args)

    def reserve(self, n):
        return _pyaqcv.Point2iVec_reserve(self, n)

    def capacity(self):
        return _pyaqcv.Point2iVec_capacity(self)
    __swig_destroy__ = _pyaqcv.delete_Point2iVec

# Register Point2iVec in _pyaqcv:
_pyaqcv.Point2iVec_swigregister(Point2iVec)

class Point2fVec(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _pyaqcv.Point2fVec_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _pyaqcv.Point2fVec___nonzero__(self)

    def __bool__(self):
        return _pyaqcv.Point2fVec___bool__(self)

    def __len__(self):
        return _pyaqcv.Point2fVec___len__(self)

    def __getslice__(self, i, j):
        return _pyaqcv.Point2fVec___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _pyaqcv.Point2fVec___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _pyaqcv.Point2fVec___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _pyaqcv.Point2fVec___delitem__(self, *args)

    def __getitem__(self, *args):
        return _pyaqcv.Point2fVec___getitem__(self, *args)

    def __setitem__(self, *args):
        return _pyaqcv.Point2fVec___setitem__(self, *args)

    def pop(self):
        return _pyaqcv.Point2fVec_pop(self)

    def append(self, x):
        return _pyaqcv.Point2fVec_append(self, x)

    def empty(self):
        return _pyaqcv.Point2fVec_empty(self)

    def size(self):
        return _pyaqcv.Point2fVec_size(self)

    def swap(self, v):
        return _pyaqcv.Point2fVec_swap(self, v)

    def begin(self):
        return _pyaqcv.Point2fVec_begin(self)

    def end(self):
        return _pyaqcv.Point2fVec_end(self)

    def rbegin(self):
        return _pyaqcv.Point2fVec_rbegin(self)

    def rend(self):
        return _pyaqcv.Point2fVec_rend(self)

    def clear(self):
        return _pyaqcv.Point2fVec_clear(self)

    def get_allocator(self):
        return _pyaqcv.Point2fVec_get_allocator(self)

    def pop_back(self):
        return _pyaqcv.Point2fVec_pop_back(self)

    def erase(self, *args):
        return _pyaqcv.Point2fVec_erase(self, *args)

    def __init__(self, *args):
        _pyaqcv.Point2fVec_swiginit(self, _pyaqcv.new_Point2fVec(*args))

    def push_back(self, x):
        return _pyaqcv.Point2fVec_push_back(self, x)

    def front(self):
        return _pyaqcv.Point2fVec_front(self)

    def back(self):
        return _pyaqcv.Point2fVec_back(self)

    def assign(self, n, x):
        return _pyaqcv.Point2fVec_assign(self, n, x)

    def resize(self, *args):
        return _pyaqcv.Point2fVec_resize(self, *args)

    def insert(self, *args):
        return _pyaqcv.Point2fVec_insert(self, *args)

    def reserve(self, n):
        return _pyaqcv.Point2fVec_reserve(self, n)

    def capacity(self):
        return _pyaqcv.Point2fVec_capacity(self)
    __swig_destroy__ = _pyaqcv.delete_Point2fVec

# Register Point2fVec in _pyaqcv:
_pyaqcv.Point2fVec_swigregister(Point2fVec)

class Point2iVecVec(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _pyaqcv.Point2iVecVec_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _pyaqcv.Point2iVecVec___nonzero__(self)

    def __bool__(self):
        return _pyaqcv.Point2iVecVec___bool__(self)

    def __len__(self):
        return _pyaqcv.Point2iVecVec___len__(self)

    def __getslice__(self, i, j):
        return _pyaqcv.Point2iVecVec___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _pyaqcv.Point2iVecVec___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _pyaqcv.Point2iVecVec___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _pyaqcv.Point2iVecVec___delitem__(self, *args)

    def __getitem__(self, *args):
        return _pyaqcv.Point2iVecVec___getitem__(self, *args)

    def __setitem__(self, *args):
        return _pyaqcv.Point2iVecVec___setitem__(self, *args)

    def pop(self):
        return _pyaqcv.Point2iVecVec_pop(self)

    def append(self, x):
        return _pyaqcv.Point2iVecVec_append(self, x)

    def empty(self):
        return _pyaqcv.Point2iVecVec_empty(self)

    def size(self):
        return _pyaqcv.Point2iVecVec_size(self)

    def swap(self, v):
        return _pyaqcv.Point2iVecVec_swap(self, v)

    def begin(self):
        return _pyaqcv.Point2iVecVec_begin(self)

    def end(self):
        return _pyaqcv.Point2iVecVec_end(self)

    def rbegin(self):
        return _pyaqcv.Point2iVecVec_rbegin(self)

    def rend(self):
        return _pyaqcv.Point2iVecVec_rend(self)

    def clear(self):
        return _pyaqcv.Point2iVecVec_clear(self)

    def get_allocator(self):
        return _pyaqcv.Point2iVecVec_get_allocator(self)

    def pop_back(self):
        return _pyaqcv.Point2iVecVec_pop_back(self)

    def erase(self, *args):
        return _pyaqcv.Point2iVecVec_erase(self, *args)

    def __init__(self, *args):
        _pyaqcv.Point2iVecVec_swiginit(self, _pyaqcv.new_Point2iVecVec(*args))

    def push_back(self, x):
        return _pyaqcv.Point2iVecVec_push_back(self, x)

    def front(self):
        return _pyaqcv.Point2iVecVec_front(self)

    def back(self):
        return _pyaqcv.Point2iVecVec_back(self)

    def assign(self, n, x):
        return _pyaqcv.Point2iVecVec_assign(self, n, x)

    def resize(self, *args):
        return _pyaqcv.Point2iVecVec_resize(self, *args)

    def insert(self, *args):
        return _pyaqcv.Point2iVecVec_insert(self, *args)

    def reserve(self, n):
        return _pyaqcv.Point2iVecVec_reserve(self, n)

    def capacity(self):
        return _pyaqcv.Point2iVecVec_capacity(self)
    __swig_destroy__ = _pyaqcv.delete_Point2iVecVec

# Register Point2iVecVec in _pyaqcv:
_pyaqcv.Point2iVecVec_swigregister(Point2iVecVec)

class Point2fPair(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _pyaqcv.Point2fPair_swiginit(self, _pyaqcv.new_Point2fPair(*args))
    first = property(_pyaqcv.Point2fPair_first_get, _pyaqcv.Point2fPair_first_set)
    second = property(_pyaqcv.Point2fPair_second_get, _pyaqcv.Point2fPair_second_set)
    def __len__(self):
        return 2
    def __repr__(self):
        return str((self.first, self.second))
    def __getitem__(self, index): 
        if not (index % 2):
            return self.first
        else:
            return self.second
    def __setitem__(self, index, val):
        if not (index % 2):
            self.first = val
        else:
            self.second = val
    __swig_destroy__ = _pyaqcv.delete_Point2fPair

# Register Point2fPair in _pyaqcv:
_pyaqcv.Point2fPair_swigregister(Point2fPair)

class Point2iPair(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _pyaqcv.Point2iPair_swiginit(self, _pyaqcv.new_Point2iPair(*args))
    first = property(_pyaqcv.Point2iPair_first_get, _pyaqcv.Point2iPair_first_set)
    second = property(_pyaqcv.Point2iPair_second_get, _pyaqcv.Point2iPair_second_set)
    def __len__(self):
        return 2
    def __repr__(self):
        return str((self.first, self.second))
    def __getitem__(self, index): 
        if not (index % 2):
            return self.first
        else:
            return self.second
    def __setitem__(self, index, val):
        if not (index % 2):
            self.first = val
        else:
            self.second = val
    __swig_destroy__ = _pyaqcv.delete_Point2iPair

# Register Point2iPair in _pyaqcv:
_pyaqcv.Point2iPair_swigregister(Point2iPair)

class RadianPair(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _pyaqcv.RadianPair_swiginit(self, _pyaqcv.new_RadianPair(*args))
    first = property(_pyaqcv.RadianPair_first_get, _pyaqcv.RadianPair_first_set)
    second = property(_pyaqcv.RadianPair_second_get, _pyaqcv.RadianPair_second_set)
    def __len__(self):
        return 2
    def __repr__(self):
        return str((self.first, self.second))
    def __getitem__(self, index): 
        if not (index % 2):
            return self.first
        else:
            return self.second
    def __setitem__(self, index, val):
        if not (index % 2):
            self.first = val
        else:
            self.second = val
    __swig_destroy__ = _pyaqcv.delete_RadianPair

# Register RadianPair in _pyaqcv:
_pyaqcv.RadianPair_swigregister(RadianPair)

class Polygon2fVec(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _pyaqcv.Polygon2fVec_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _pyaqcv.Polygon2fVec___nonzero__(self)

    def __bool__(self):
        return _pyaqcv.Polygon2fVec___bool__(self)

    def __len__(self):
        return _pyaqcv.Polygon2fVec___len__(self)

    def __getslice__(self, i, j):
        return _pyaqcv.Polygon2fVec___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _pyaqcv.Polygon2fVec___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _pyaqcv.Polygon2fVec___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _pyaqcv.Polygon2fVec___delitem__(self, *args)

    def __getitem__(self, *args):
        return _pyaqcv.Polygon2fVec___getitem__(self, *args)

    def __setitem__(self, *args):
        return _pyaqcv.Polygon2fVec___setitem__(self, *args)

    def pop(self):
        return _pyaqcv.Polygon2fVec_pop(self)

    def append(self, x):
        return _pyaqcv.Polygon2fVec_append(self, x)

    def empty(self):
        return _pyaqcv.Polygon2fVec_empty(self)

    def size(self):
        return _pyaqcv.Polygon2fVec_size(self)

    def swap(self, v):
        return _pyaqcv.Polygon2fVec_swap(self, v)

    def begin(self):
        return _pyaqcv.Polygon2fVec_begin(self)

    def end(self):
        return _pyaqcv.Polygon2fVec_end(self)

    def rbegin(self):
        return _pyaqcv.Polygon2fVec_rbegin(self)

    def rend(self):
        return _pyaqcv.Polygon2fVec_rend(self)

    def clear(self):
        return _pyaqcv.Polygon2fVec_clear(self)

    def get_allocator(self):
        return _pyaqcv.Polygon2fVec_get_allocator(self)

    def pop_back(self):
        return _pyaqcv.Polygon2fVec_pop_back(self)

    def erase(self, *args):
        return _pyaqcv.Polygon2fVec_erase(self, *args)

    def __init__(self, *args):
        _pyaqcv.Polygon2fVec_swiginit(self, _pyaqcv.new_Polygon2fVec(*args))

    def push_back(self, x):
        return _pyaqcv.Polygon2fVec_push_back(self, x)

    def front(self):
        return _pyaqcv.Polygon2fVec_front(self)

    def back(self):
        return _pyaqcv.Polygon2fVec_back(self)

    def assign(self, n, x):
        return _pyaqcv.Polygon2fVec_assign(self, n, x)

    def resize(self, *args):
        return _pyaqcv.Polygon2fVec_resize(self, *args)

    def insert(self, *args):
        return _pyaqcv.Polygon2fVec_insert(self, *args)

    def reserve(self, n):
        return _pyaqcv.Polygon2fVec_reserve(self, n)

    def capacity(self):
        return _pyaqcv.Polygon2fVec_capacity(self)
    __swig_destroy__ = _pyaqcv.delete_Polygon2fVec

# Register Polygon2fVec in _pyaqcv:
_pyaqcv.Polygon2fVec_swigregister(Polygon2fVec)

class Polygon2iVec(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _pyaqcv.Polygon2iVec_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _pyaqcv.Polygon2iVec___nonzero__(self)

    def __bool__(self):
        return _pyaqcv.Polygon2iVec___bool__(self)

    def __len__(self):
        return _pyaqcv.Polygon2iVec___len__(self)

    def __getslice__(self, i, j):
        return _pyaqcv.Polygon2iVec___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _pyaqcv.Polygon2iVec___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _pyaqcv.Polygon2iVec___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _pyaqcv.Polygon2iVec___delitem__(self, *args)

    def __getitem__(self, *args):
        return _pyaqcv.Polygon2iVec___getitem__(self, *args)

    def __setitem__(self, *args):
        return _pyaqcv.Polygon2iVec___setitem__(self, *args)

    def pop(self):
        return _pyaqcv.Polygon2iVec_pop(self)

    def append(self, x):
        return _pyaqcv.Polygon2iVec_append(self, x)

    def empty(self):
        return _pyaqcv.Polygon2iVec_empty(self)

    def size(self):
        return _pyaqcv.Polygon2iVec_size(self)

    def swap(self, v):
        return _pyaqcv.Polygon2iVec_swap(self, v)

    def begin(self):
        return _pyaqcv.Polygon2iVec_begin(self)

    def end(self):
        return _pyaqcv.Polygon2iVec_end(self)

    def rbegin(self):
        return _pyaqcv.Polygon2iVec_rbegin(self)

    def rend(self):
        return _pyaqcv.Polygon2iVec_rend(self)

    def clear(self):
        return _pyaqcv.Polygon2iVec_clear(self)

    def get_allocator(self):
        return _pyaqcv.Polygon2iVec_get_allocator(self)

    def pop_back(self):
        return _pyaqcv.Polygon2iVec_pop_back(self)

    def erase(self, *args):
        return _pyaqcv.Polygon2iVec_erase(self, *args)

    def __init__(self, *args):
        _pyaqcv.Polygon2iVec_swiginit(self, _pyaqcv.new_Polygon2iVec(*args))

    def push_back(self, x):
        return _pyaqcv.Polygon2iVec_push_back(self, x)

    def front(self):
        return _pyaqcv.Polygon2iVec_front(self)

    def back(self):
        return _pyaqcv.Polygon2iVec_back(self)

    def assign(self, n, x):
        return _pyaqcv.Polygon2iVec_assign(self, n, x)

    def resize(self, *args):
        return _pyaqcv.Polygon2iVec_resize(self, *args)

    def insert(self, *args):
        return _pyaqcv.Polygon2iVec_insert(self, *args)

    def reserve(self, n):
        return _pyaqcv.Polygon2iVec_reserve(self, n)

    def capacity(self):
        return _pyaqcv.Polygon2iVec_capacity(self)
    __swig_destroy__ = _pyaqcv.delete_Polygon2iVec

# Register Polygon2iVec in _pyaqcv:
_pyaqcv.Polygon2iVec_swigregister(Polygon2iVec)

class Ring2iVec(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _pyaqcv.Ring2iVec_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _pyaqcv.Ring2iVec___nonzero__(self)

    def __bool__(self):
        return _pyaqcv.Ring2iVec___bool__(self)

    def __len__(self):
        return _pyaqcv.Ring2iVec___len__(self)

    def __getslice__(self, i, j):
        return _pyaqcv.Ring2iVec___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _pyaqcv.Ring2iVec___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _pyaqcv.Ring2iVec___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _pyaqcv.Ring2iVec___delitem__(self, *args)

    def __getitem__(self, *args):
        return _pyaqcv.Ring2iVec___getitem__(self, *args)

    def __setitem__(self, *args):
        return _pyaqcv.Ring2iVec___setitem__(self, *args)

    def pop(self):
        return _pyaqcv.Ring2iVec_pop(self)

    def append(self, x):
        return _pyaqcv.Ring2iVec_append(self, x)

    def empty(self):
        return _pyaqcv.Ring2iVec_empty(self)

    def size(self):
        return _pyaqcv.Ring2iVec_size(self)

    def swap(self, v):
        return _pyaqcv.Ring2iVec_swap(self, v)

    def begin(self):
        return _pyaqcv.Ring2iVec_begin(self)

    def end(self):
        return _pyaqcv.Ring2iVec_end(self)

    def rbegin(self):
        return _pyaqcv.Ring2iVec_rbegin(self)

    def rend(self):
        return _pyaqcv.Ring2iVec_rend(self)

    def clear(self):
        return _pyaqcv.Ring2iVec_clear(self)

    def get_allocator(self):
        return _pyaqcv.Ring2iVec_get_allocator(self)

    def pop_back(self):
        return _pyaqcv.Ring2iVec_pop_back(self)

    def erase(self, *args):
        return _pyaqcv.Ring2iVec_erase(self, *args)

    def __init__(self, *args):
        _pyaqcv.Ring2iVec_swiginit(self, _pyaqcv.new_Ring2iVec(*args))

    def push_back(self, x):
        return _pyaqcv.Ring2iVec_push_back(self, x)

    def front(self):
        return _pyaqcv.Ring2iVec_front(self)

    def back(self):
        return _pyaqcv.Ring2iVec_back(self)

    def assign(self, n, x):
        return _pyaqcv.Ring2iVec_assign(self, n, x)

    def resize(self, *args):
        return _pyaqcv.Ring2iVec_resize(self, *args)

    def insert(self, *args):
        return _pyaqcv.Ring2iVec_insert(self, *args)

    def reserve(self, n):
        return _pyaqcv.Ring2iVec_reserve(self, n)

    def capacity(self):
        return _pyaqcv.Ring2iVec_capacity(self)
    __swig_destroy__ = _pyaqcv.delete_Ring2iVec

# Register Ring2iVec in _pyaqcv:
_pyaqcv.Ring2iVec_swigregister(Ring2iVec)

class Ring2fVec(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _pyaqcv.Ring2fVec_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _pyaqcv.Ring2fVec___nonzero__(self)

    def __bool__(self):
        return _pyaqcv.Ring2fVec___bool__(self)

    def __len__(self):
        return _pyaqcv.Ring2fVec___len__(self)

    def __getslice__(self, i, j):
        return _pyaqcv.Ring2fVec___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _pyaqcv.Ring2fVec___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _pyaqcv.Ring2fVec___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _pyaqcv.Ring2fVec___delitem__(self, *args)

    def __getitem__(self, *args):
        return _pyaqcv.Ring2fVec___getitem__(self, *args)

    def __setitem__(self, *args):
        return _pyaqcv.Ring2fVec___setitem__(self, *args)

    def pop(self):
        return _pyaqcv.Ring2fVec_pop(self)

    def append(self, x):
        return _pyaqcv.Ring2fVec_append(self, x)

    def empty(self):
        return _pyaqcv.Ring2fVec_empty(self)

    def size(self):
        return _pyaqcv.Ring2fVec_size(self)

    def swap(self, v):
        return _pyaqcv.Ring2fVec_swap(self, v)

    def begin(self):
        return _pyaqcv.Ring2fVec_begin(self)

    def end(self):
        return _pyaqcv.Ring2fVec_end(self)

    def rbegin(self):
        return _pyaqcv.Ring2fVec_rbegin(self)

    def rend(self):
        return _pyaqcv.Ring2fVec_rend(self)

    def clear(self):
        return _pyaqcv.Ring2fVec_clear(self)

    def get_allocator(self):
        return _pyaqcv.Ring2fVec_get_allocator(self)

    def pop_back(self):
        return _pyaqcv.Ring2fVec_pop_back(self)

    def erase(self, *args):
        return _pyaqcv.Ring2fVec_erase(self, *args)

    def __init__(self, *args):
        _pyaqcv.Ring2fVec_swiginit(self, _pyaqcv.new_Ring2fVec(*args))

    def push_back(self, x):
        return _pyaqcv.Ring2fVec_push_back(self, x)

    def front(self):
        return _pyaqcv.Ring2fVec_front(self)

    def back(self):
        return _pyaqcv.Ring2fVec_back(self)

    def assign(self, n, x):
        return _pyaqcv.Ring2fVec_assign(self, n, x)

    def resize(self, *args):
        return _pyaqcv.Ring2fVec_resize(self, *args)

    def insert(self, *args):
        return _pyaqcv.Ring2fVec_insert(self, *args)

    def reserve(self, n):
        return _pyaqcv.Ring2fVec_reserve(self, n)

    def capacity(self):
        return _pyaqcv.Ring2fVec_capacity(self)
    __swig_destroy__ = _pyaqcv.delete_Ring2fVec

# Register Ring2fVec in _pyaqcv:
_pyaqcv.Ring2fVec_swigregister(Ring2fVec)

class RadianVec(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _pyaqcv.RadianVec_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _pyaqcv.RadianVec___nonzero__(self)

    def __bool__(self):
        return _pyaqcv.RadianVec___bool__(self)

    def __len__(self):
        return _pyaqcv.RadianVec___len__(self)

    def __getslice__(self, i, j):
        return _pyaqcv.RadianVec___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _pyaqcv.RadianVec___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _pyaqcv.RadianVec___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _pyaqcv.RadianVec___delitem__(self, *args)

    def __getitem__(self, *args):
        return _pyaqcv.RadianVec___getitem__(self, *args)

    def __setitem__(self, *args):
        return _pyaqcv.RadianVec___setitem__(self, *args)

    def pop(self):
        return _pyaqcv.RadianVec_pop(self)

    def append(self, x):
        return _pyaqcv.RadianVec_append(self, x)

    def empty(self):
        return _pyaqcv.RadianVec_empty(self)

    def size(self):
        return _pyaqcv.RadianVec_size(self)

    def swap(self, v):
        return _pyaqcv.RadianVec_swap(self, v)

    def begin(self):
        return _pyaqcv.RadianVec_begin(self)

    def end(self):
        return _pyaqcv.RadianVec_end(self)

    def rbegin(self):
        return _pyaqcv.RadianVec_rbegin(self)

    def rend(self):
        return _pyaqcv.RadianVec_rend(self)

    def clear(self):
        return _pyaqcv.RadianVec_clear(self)

    def get_allocator(self):
        return _pyaqcv.RadianVec_get_allocator(self)

    def pop_back(self):
        return _pyaqcv.RadianVec_pop_back(self)

    def erase(self, *args):
        return _pyaqcv.RadianVec_erase(self, *args)

    def __init__(self, *args):
        _pyaqcv.RadianVec_swiginit(self, _pyaqcv.new_RadianVec(*args))

    def push_back(self, x):
        return _pyaqcv.RadianVec_push_back(self, x)

    def front(self):
        return _pyaqcv.RadianVec_front(self)

    def back(self):
        return _pyaqcv.RadianVec_back(self)

    def assign(self, n, x):
        return _pyaqcv.RadianVec_assign(self, n, x)

    def resize(self, *args):
        return _pyaqcv.RadianVec_resize(self, *args)

    def insert(self, *args):
        return _pyaqcv.RadianVec_insert(self, *args)

    def reserve(self, n):
        return _pyaqcv.RadianVec_reserve(self, n)

    def capacity(self):
        return _pyaqcv.RadianVec_capacity(self)
    __swig_destroy__ = _pyaqcv.delete_RadianVec

# Register RadianVec in _pyaqcv:
_pyaqcv.RadianVec_swigregister(RadianVec)

class RotateRect2fVec(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _pyaqcv.RotateRect2fVec_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _pyaqcv.RotateRect2fVec___nonzero__(self)

    def __bool__(self):
        return _pyaqcv.RotateRect2fVec___bool__(self)

    def __len__(self):
        return _pyaqcv.RotateRect2fVec___len__(self)

    def __getslice__(self, i, j):
        return _pyaqcv.RotateRect2fVec___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _pyaqcv.RotateRect2fVec___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _pyaqcv.RotateRect2fVec___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _pyaqcv.RotateRect2fVec___delitem__(self, *args)

    def __getitem__(self, *args):
        return _pyaqcv.RotateRect2fVec___getitem__(self, *args)

    def __setitem__(self, *args):
        return _pyaqcv.RotateRect2fVec___setitem__(self, *args)

    def pop(self):
        return _pyaqcv.RotateRect2fVec_pop(self)

    def append(self, x):
        return _pyaqcv.RotateRect2fVec_append(self, x)

    def empty(self):
        return _pyaqcv.RotateRect2fVec_empty(self)

    def size(self):
        return _pyaqcv.RotateRect2fVec_size(self)

    def swap(self, v):
        return _pyaqcv.RotateRect2fVec_swap(self, v)

    def begin(self):
        return _pyaqcv.RotateRect2fVec_begin(self)

    def end(self):
        return _pyaqcv.RotateRect2fVec_end(self)

    def rbegin(self):
        return _pyaqcv.RotateRect2fVec_rbegin(self)

    def rend(self):
        return _pyaqcv.RotateRect2fVec_rend(self)

    def clear(self):
        return _pyaqcv.RotateRect2fVec_clear(self)

    def get_allocator(self):
        return _pyaqcv.RotateRect2fVec_get_allocator(self)

    def pop_back(self):
        return _pyaqcv.RotateRect2fVec_pop_back(self)

    def erase(self, *args):
        return _pyaqcv.RotateRect2fVec_erase(self, *args)

    def __init__(self, *args):
        _pyaqcv.RotateRect2fVec_swiginit(self, _pyaqcv.new_RotateRect2fVec(*args))

    def push_back(self, x):
        return _pyaqcv.RotateRect2fVec_push_back(self, x)

    def front(self):
        return _pyaqcv.RotateRect2fVec_front(self)

    def back(self):
        return _pyaqcv.RotateRect2fVec_back(self)

    def assign(self, n, x):
        return _pyaqcv.RotateRect2fVec_assign(self, n, x)

    def resize(self, *args):
        return _pyaqcv.RotateRect2fVec_resize(self, *args)

    def insert(self, *args):
        return _pyaqcv.RotateRect2fVec_insert(self, *args)

    def reserve(self, n):
        return _pyaqcv.RotateRect2fVec_reserve(self, n)

    def capacity(self):
        return _pyaqcv.RotateRect2fVec_capacity(self)
    __swig_destroy__ = _pyaqcv.delete_RotateRect2fVec

# Register RotateRect2fVec in _pyaqcv:
_pyaqcv.RotateRect2fVec_swigregister(RotateRect2fVec)

class Segment2fVec(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _pyaqcv.Segment2fVec_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _pyaqcv.Segment2fVec___nonzero__(self)

    def __bool__(self):
        return _pyaqcv.Segment2fVec___bool__(self)

    def __len__(self):
        return _pyaqcv.Segment2fVec___len__(self)

    def __getslice__(self, i, j):
        return _pyaqcv.Segment2fVec___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _pyaqcv.Segment2fVec___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _pyaqcv.Segment2fVec___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _pyaqcv.Segment2fVec___delitem__(self, *args)

    def __getitem__(self, *args):
        return _pyaqcv.Segment2fVec___getitem__(self, *args)

    def __setitem__(self, *args):
        return _pyaqcv.Segment2fVec___setitem__(self, *args)

    def pop(self):
        return _pyaqcv.Segment2fVec_pop(self)

    def append(self, x):
        return _pyaqcv.Segment2fVec_append(self, x)

    def empty(self):
        return _pyaqcv.Segment2fVec_empty(self)

    def size(self):
        return _pyaqcv.Segment2fVec_size(self)

    def swap(self, v):
        return _pyaqcv.Segment2fVec_swap(self, v)

    def begin(self):
        return _pyaqcv.Segment2fVec_begin(self)

    def end(self):
        return _pyaqcv.Segment2fVec_end(self)

    def rbegin(self):
        return _pyaqcv.Segment2fVec_rbegin(self)

    def rend(self):
        return _pyaqcv.Segment2fVec_rend(self)

    def clear(self):
        return _pyaqcv.Segment2fVec_clear(self)

    def get_allocator(self):
        return _pyaqcv.Segment2fVec_get_allocator(self)

    def pop_back(self):
        return _pyaqcv.Segment2fVec_pop_back(self)

    def erase(self, *args):
        return _pyaqcv.Segment2fVec_erase(self, *args)

    def __init__(self, *args):
        _pyaqcv.Segment2fVec_swiginit(self, _pyaqcv.new_Segment2fVec(*args))

    def push_back(self, x):
        return _pyaqcv.Segment2fVec_push_back(self, x)

    def front(self):
        return _pyaqcv.Segment2fVec_front(self)

    def back(self):
        return _pyaqcv.Segment2fVec_back(self)

    def assign(self, n, x):
        return _pyaqcv.Segment2fVec_assign(self, n, x)

    def resize(self, *args):
        return _pyaqcv.Segment2fVec_resize(self, *args)

    def insert(self, *args):
        return _pyaqcv.Segment2fVec_insert(self, *args)

    def reserve(self, n):
        return _pyaqcv.Segment2fVec_reserve(self, n)

    def capacity(self):
        return _pyaqcv.Segment2fVec_capacity(self)
    __swig_destroy__ = _pyaqcv.delete_Segment2fVec

# Register Segment2fVec in _pyaqcv:
_pyaqcv.Segment2fVec_swigregister(Segment2fVec)

class MultiSegment2fVec(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _pyaqcv.MultiSegment2fVec_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _pyaqcv.MultiSegment2fVec___nonzero__(self)

    def __bool__(self):
        return _pyaqcv.MultiSegment2fVec___bool__(self)

    def __len__(self):
        return _pyaqcv.MultiSegment2fVec___len__(self)

    def __getslice__(self, i, j):
        return _pyaqcv.MultiSegment2fVec___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _pyaqcv.MultiSegment2fVec___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _pyaqcv.MultiSegment2fVec___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _pyaqcv.MultiSegment2fVec___delitem__(self, *args)

    def __getitem__(self, *args):
        return _pyaqcv.MultiSegment2fVec___getitem__(self, *args)

    def __setitem__(self, *args):
        return _pyaqcv.MultiSegment2fVec___setitem__(self, *args)

    def pop(self):
        return _pyaqcv.MultiSegment2fVec_pop(self)

    def append(self, x):
        return _pyaqcv.MultiSegment2fVec_append(self, x)

    def empty(self):
        return _pyaqcv.MultiSegment2fVec_empty(self)

    def size(self):
        return _pyaqcv.MultiSegment2fVec_size(self)

    def swap(self, v):
        return _pyaqcv.MultiSegment2fVec_swap(self, v)

    def begin(self):
        return _pyaqcv.MultiSegment2fVec_begin(self)

    def end(self):
        return _pyaqcv.MultiSegment2fVec_end(self)

    def rbegin(self):
        return _pyaqcv.MultiSegment2fVec_rbegin(self)

    def rend(self):
        return _pyaqcv.MultiSegment2fVec_rend(self)

    def clear(self):
        return _pyaqcv.MultiSegment2fVec_clear(self)

    def get_allocator(self):
        return _pyaqcv.MultiSegment2fVec_get_allocator(self)

    def pop_back(self):
        return _pyaqcv.MultiSegment2fVec_pop_back(self)

    def erase(self, *args):
        return _pyaqcv.MultiSegment2fVec_erase(self, *args)

    def __init__(self, *args):
        _pyaqcv.MultiSegment2fVec_swiginit(self, _pyaqcv.new_MultiSegment2fVec(*args))

    def push_back(self, x):
        return _pyaqcv.MultiSegment2fVec_push_back(self, x)

    def front(self):
        return _pyaqcv.MultiSegment2fVec_front(self)

    def back(self):
        return _pyaqcv.MultiSegment2fVec_back(self)

    def assign(self, n, x):
        return _pyaqcv.MultiSegment2fVec_assign(self, n, x)

    def resize(self, *args):
        return _pyaqcv.MultiSegment2fVec_resize(self, *args)

    def insert(self, *args):
        return _pyaqcv.MultiSegment2fVec_insert(self, *args)

    def reserve(self, n):
        return _pyaqcv.MultiSegment2fVec_reserve(self, n)

    def capacity(self):
        return _pyaqcv.MultiSegment2fVec_capacity(self)
    __swig_destroy__ = _pyaqcv.delete_MultiSegment2fVec

# Register MultiSegment2fVec in _pyaqcv:
_pyaqcv.MultiSegment2fVec_swigregister(MultiSegment2fVec)

class LineString2fVec(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _pyaqcv.LineString2fVec_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _pyaqcv.LineString2fVec___nonzero__(self)

    def __bool__(self):
        return _pyaqcv.LineString2fVec___bool__(self)

    def __len__(self):
        return _pyaqcv.LineString2fVec___len__(self)

    def __getslice__(self, i, j):
        return _pyaqcv.LineString2fVec___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _pyaqcv.LineString2fVec___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _pyaqcv.LineString2fVec___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _pyaqcv.LineString2fVec___delitem__(self, *args)

    def __getitem__(self, *args):
        return _pyaqcv.LineString2fVec___getitem__(self, *args)

    def __setitem__(self, *args):
        return _pyaqcv.LineString2fVec___setitem__(self, *args)

    def pop(self):
        return _pyaqcv.LineString2fVec_pop(self)

    def append(self, x):
        return _pyaqcv.LineString2fVec_append(self, x)

    def empty(self):
        return _pyaqcv.LineString2fVec_empty(self)

    def size(self):
        return _pyaqcv.LineString2fVec_size(self)

    def swap(self, v):
        return _pyaqcv.LineString2fVec_swap(self, v)

    def begin(self):
        return _pyaqcv.LineString2fVec_begin(self)

    def end(self):
        return _pyaqcv.LineString2fVec_end(self)

    def rbegin(self):
        return _pyaqcv.LineString2fVec_rbegin(self)

    def rend(self):
        return _pyaqcv.LineString2fVec_rend(self)

    def clear(self):
        return _pyaqcv.LineString2fVec_clear(self)

    def get_allocator(self):
        return _pyaqcv.LineString2fVec_get_allocator(self)

    def pop_back(self):
        return _pyaqcv.LineString2fVec_pop_back(self)

    def erase(self, *args):
        return _pyaqcv.LineString2fVec_erase(self, *args)

    def __init__(self, *args):
        _pyaqcv.LineString2fVec_swiginit(self, _pyaqcv.new_LineString2fVec(*args))

    def push_back(self, x):
        return _pyaqcv.LineString2fVec_push_back(self, x)

    def front(self):
        return _pyaqcv.LineString2fVec_front(self)

    def back(self):
        return _pyaqcv.LineString2fVec_back(self)

    def assign(self, n, x):
        return _pyaqcv.LineString2fVec_assign(self, n, x)

    def resize(self, *args):
        return _pyaqcv.LineString2fVec_resize(self, *args)

    def insert(self, *args):
        return _pyaqcv.LineString2fVec_insert(self, *args)

    def reserve(self, n):
        return _pyaqcv.LineString2fVec_reserve(self, n)

    def capacity(self):
        return _pyaqcv.LineString2fVec_capacity(self)
    __swig_destroy__ = _pyaqcv.delete_LineString2fVec

# Register LineString2fVec in _pyaqcv:
_pyaqcv.LineString2fVec_swigregister(LineString2fVec)

class LineString2iVec(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _pyaqcv.LineString2iVec_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _pyaqcv.LineString2iVec___nonzero__(self)

    def __bool__(self):
        return _pyaqcv.LineString2iVec___bool__(self)

    def __len__(self):
        return _pyaqcv.LineString2iVec___len__(self)

    def __getslice__(self, i, j):
        return _pyaqcv.LineString2iVec___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _pyaqcv.LineString2iVec___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _pyaqcv.LineString2iVec___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _pyaqcv.LineString2iVec___delitem__(self, *args)

    def __getitem__(self, *args):
        return _pyaqcv.LineString2iVec___getitem__(self, *args)

    def __setitem__(self, *args):
        return _pyaqcv.LineString2iVec___setitem__(self, *args)

    def pop(self):
        return _pyaqcv.LineString2iVec_pop(self)

    def append(self, x):
        return _pyaqcv.LineString2iVec_append(self, x)

    def empty(self):
        return _pyaqcv.LineString2iVec_empty(self)

    def size(self):
        return _pyaqcv.LineString2iVec_size(self)

    def swap(self, v):
        return _pyaqcv.LineString2iVec_swap(self, v)

    def begin(self):
        return _pyaqcv.LineString2iVec_begin(self)

    def end(self):
        return _pyaqcv.LineString2iVec_end(self)

    def rbegin(self):
        return _pyaqcv.LineString2iVec_rbegin(self)

    def rend(self):
        return _pyaqcv.LineString2iVec_rend(self)

    def clear(self):
        return _pyaqcv.LineString2iVec_clear(self)

    def get_allocator(self):
        return _pyaqcv.LineString2iVec_get_allocator(self)

    def pop_back(self):
        return _pyaqcv.LineString2iVec_pop_back(self)

    def erase(self, *args):
        return _pyaqcv.LineString2iVec_erase(self, *args)

    def __init__(self, *args):
        _pyaqcv.LineString2iVec_swiginit(self, _pyaqcv.new_LineString2iVec(*args))

    def push_back(self, x):
        return _pyaqcv.LineString2iVec_push_back(self, x)

    def front(self):
        return _pyaqcv.LineString2iVec_front(self)

    def back(self):
        return _pyaqcv.LineString2iVec_back(self)

    def assign(self, n, x):
        return _pyaqcv.LineString2iVec_assign(self, n, x)

    def resize(self, *args):
        return _pyaqcv.LineString2iVec_resize(self, *args)

    def insert(self, *args):
        return _pyaqcv.LineString2iVec_insert(self, *args)

    def reserve(self, n):
        return _pyaqcv.LineString2iVec_reserve(self, n)

    def capacity(self):
        return _pyaqcv.LineString2iVec_capacity(self)
    __swig_destroy__ = _pyaqcv.delete_LineString2iVec

# Register LineString2iVec in _pyaqcv:
_pyaqcv.LineString2iVec_swigregister(LineString2iVec)

class MultiPoint2fVec(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _pyaqcv.MultiPoint2fVec_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _pyaqcv.MultiPoint2fVec___nonzero__(self)

    def __bool__(self):
        return _pyaqcv.MultiPoint2fVec___bool__(self)

    def __len__(self):
        return _pyaqcv.MultiPoint2fVec___len__(self)

    def __getslice__(self, i, j):
        return _pyaqcv.MultiPoint2fVec___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _pyaqcv.MultiPoint2fVec___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _pyaqcv.MultiPoint2fVec___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _pyaqcv.MultiPoint2fVec___delitem__(self, *args)

    def __getitem__(self, *args):
        return _pyaqcv.MultiPoint2fVec___getitem__(self, *args)

    def __setitem__(self, *args):
        return _pyaqcv.MultiPoint2fVec___setitem__(self, *args)

    def pop(self):
        return _pyaqcv.MultiPoint2fVec_pop(self)

    def append(self, x):
        return _pyaqcv.MultiPoint2fVec_append(self, x)

    def empty(self):
        return _pyaqcv.MultiPoint2fVec_empty(self)

    def size(self):
        return _pyaqcv.MultiPoint2fVec_size(self)

    def swap(self, v):
        return _pyaqcv.MultiPoint2fVec_swap(self, v)

    def begin(self):
        return _pyaqcv.MultiPoint2fVec_begin(self)

    def end(self):
        return _pyaqcv.MultiPoint2fVec_end(self)

    def rbegin(self):
        return _pyaqcv.MultiPoint2fVec_rbegin(self)

    def rend(self):
        return _pyaqcv.MultiPoint2fVec_rend(self)

    def clear(self):
        return _pyaqcv.MultiPoint2fVec_clear(self)

    def get_allocator(self):
        return _pyaqcv.MultiPoint2fVec_get_allocator(self)

    def pop_back(self):
        return _pyaqcv.MultiPoint2fVec_pop_back(self)

    def erase(self, *args):
        return _pyaqcv.MultiPoint2fVec_erase(self, *args)

    def __init__(self, *args):
        _pyaqcv.MultiPoint2fVec_swiginit(self, _pyaqcv.new_MultiPoint2fVec(*args))

    def push_back(self, x):
        return _pyaqcv.MultiPoint2fVec_push_back(self, x)

    def front(self):
        return _pyaqcv.MultiPoint2fVec_front(self)

    def back(self):
        return _pyaqcv.MultiPoint2fVec_back(self)

    def assign(self, n, x):
        return _pyaqcv.MultiPoint2fVec_assign(self, n, x)

    def resize(self, *args):
        return _pyaqcv.MultiPoint2fVec_resize(self, *args)

    def insert(self, *args):
        return _pyaqcv.MultiPoint2fVec_insert(self, *args)

    def reserve(self, n):
        return _pyaqcv.MultiPoint2fVec_reserve(self, n)

    def capacity(self):
        return _pyaqcv.MultiPoint2fVec_capacity(self)
    __swig_destroy__ = _pyaqcv.delete_MultiPoint2fVec

# Register MultiPoint2fVec in _pyaqcv:
_pyaqcv.MultiPoint2fVec_swigregister(MultiPoint2fVec)

class Rect2iVec(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _pyaqcv.Rect2iVec_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _pyaqcv.Rect2iVec___nonzero__(self)

    def __bool__(self):
        return _pyaqcv.Rect2iVec___bool__(self)

    def __len__(self):
        return _pyaqcv.Rect2iVec___len__(self)

    def __getslice__(self, i, j):
        return _pyaqcv.Rect2iVec___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _pyaqcv.Rect2iVec___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _pyaqcv.Rect2iVec___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _pyaqcv.Rect2iVec___delitem__(self, *args)

    def __getitem__(self, *args):
        return _pyaqcv.Rect2iVec___getitem__(self, *args)

    def __setitem__(self, *args):
        return _pyaqcv.Rect2iVec___setitem__(self, *args)

    def pop(self):
        return _pyaqcv.Rect2iVec_pop(self)

    def append(self, x):
        return _pyaqcv.Rect2iVec_append(self, x)

    def empty(self):
        return _pyaqcv.Rect2iVec_empty(self)

    def size(self):
        return _pyaqcv.Rect2iVec_size(self)

    def swap(self, v):
        return _pyaqcv.Rect2iVec_swap(self, v)

    def begin(self):
        return _pyaqcv.Rect2iVec_begin(self)

    def end(self):
        return _pyaqcv.Rect2iVec_end(self)

    def rbegin(self):
        return _pyaqcv.Rect2iVec_rbegin(self)

    def rend(self):
        return _pyaqcv.Rect2iVec_rend(self)

    def clear(self):
        return _pyaqcv.Rect2iVec_clear(self)

    def get_allocator(self):
        return _pyaqcv.Rect2iVec_get_allocator(self)

    def pop_back(self):
        return _pyaqcv.Rect2iVec_pop_back(self)

    def erase(self, *args):
        return _pyaqcv.Rect2iVec_erase(self, *args)

    def __init__(self, *args):
        _pyaqcv.Rect2iVec_swiginit(self, _pyaqcv.new_Rect2iVec(*args))

    def push_back(self, x):
        return _pyaqcv.Rect2iVec_push_back(self, x)

    def front(self):
        return _pyaqcv.Rect2iVec_front(self)

    def back(self):
        return _pyaqcv.Rect2iVec_back(self)

    def assign(self, n, x):
        return _pyaqcv.Rect2iVec_assign(self, n, x)

    def resize(self, *args):
        return _pyaqcv.Rect2iVec_resize(self, *args)

    def insert(self, *args):
        return _pyaqcv.Rect2iVec_insert(self, *args)

    def reserve(self, n):
        return _pyaqcv.Rect2iVec_reserve(self, n)

    def capacity(self):
        return _pyaqcv.Rect2iVec_capacity(self)
    __swig_destroy__ = _pyaqcv.delete_Rect2iVec

# Register Rect2iVec in _pyaqcv:
_pyaqcv.Rect2iVec_swigregister(Rect2iVec)

class Point2iList(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _pyaqcv.Point2iList_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _pyaqcv.Point2iList___nonzero__(self)

    def __bool__(self):
        return _pyaqcv.Point2iList___bool__(self)

    def __len__(self):
        return _pyaqcv.Point2iList___len__(self)

    def __getslice__(self, i, j):
        return _pyaqcv.Point2iList___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _pyaqcv.Point2iList___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _pyaqcv.Point2iList___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _pyaqcv.Point2iList___delitem__(self, *args)

    def __getitem__(self, *args):
        return _pyaqcv.Point2iList___getitem__(self, *args)

    def __setitem__(self, *args):
        return _pyaqcv.Point2iList___setitem__(self, *args)

    def pop(self):
        return _pyaqcv.Point2iList_pop(self)

    def append(self, x):
        return _pyaqcv.Point2iList_append(self, x)

    def empty(self):
        return _pyaqcv.Point2iList_empty(self)

    def size(self):
        return _pyaqcv.Point2iList_size(self)

    def swap(self, v):
        return _pyaqcv.Point2iList_swap(self, v)

    def begin(self):
        return _pyaqcv.Point2iList_begin(self)

    def end(self):
        return _pyaqcv.Point2iList_end(self)

    def rbegin(self):
        return _pyaqcv.Point2iList_rbegin(self)

    def rend(self):
        return _pyaqcv.Point2iList_rend(self)

    def clear(self):
        return _pyaqcv.Point2iList_clear(self)

    def get_allocator(self):
        return _pyaqcv.Point2iList_get_allocator(self)

    def pop_back(self):
        return _pyaqcv.Point2iList_pop_back(self)

    def erase(self, *args):
        return _pyaqcv.Point2iList_erase(self, *args)

    def __init__(self, *args):
        _pyaqcv.Point2iList_swiginit(self, _pyaqcv.new_Point2iList(*args))

    def push_back(self, x):
        return _pyaqcv.Point2iList_push_back(self, x)

    def front(self):
        return _pyaqcv.Point2iList_front(self)

    def back(self):
        return _pyaqcv.Point2iList_back(self)

    def assign(self, n, x):
        return _pyaqcv.Point2iList_assign(self, n, x)

    def resize(self, *args):
        return _pyaqcv.Point2iList_resize(self, *args)

    def insert(self, *args):
        return _pyaqcv.Point2iList_insert(self, *args)

    def pop_front(self):
        return _pyaqcv.Point2iList_pop_front(self)

    def push_front(self, x):
        return _pyaqcv.Point2iList_push_front(self, x)

    def reverse(self):
        return _pyaqcv.Point2iList_reverse(self)
    __swig_destroy__ = _pyaqcv.delete_Point2iList

# Register Point2iList in _pyaqcv:
_pyaqcv.Point2iList_swigregister(Point2iList)

class Point2fList(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _pyaqcv.Point2fList_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _pyaqcv.Point2fList___nonzero__(self)

    def __bool__(self):
        return _pyaqcv.Point2fList___bool__(self)

    def __len__(self):
        return _pyaqcv.Point2fList___len__(self)

    def __getslice__(self, i, j):
        return _pyaqcv.Point2fList___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _pyaqcv.Point2fList___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _pyaqcv.Point2fList___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _pyaqcv.Point2fList___delitem__(self, *args)

    def __getitem__(self, *args):
        return _pyaqcv.Point2fList___getitem__(self, *args)

    def __setitem__(self, *args):
        return _pyaqcv.Point2fList___setitem__(self, *args)

    def pop(self):
        return _pyaqcv.Point2fList_pop(self)

    def append(self, x):
        return _pyaqcv.Point2fList_append(self, x)

    def empty(self):
        return _pyaqcv.Point2fList_empty(self)

    def size(self):
        return _pyaqcv.Point2fList_size(self)

    def swap(self, v):
        return _pyaqcv.Point2fList_swap(self, v)

    def begin(self):
        return _pyaqcv.Point2fList_begin(self)

    def end(self):
        return _pyaqcv.Point2fList_end(self)

    def rbegin(self):
        return _pyaqcv.Point2fList_rbegin(self)

    def rend(self):
        return _pyaqcv.Point2fList_rend(self)

    def clear(self):
        return _pyaqcv.Point2fList_clear(self)

    def get_allocator(self):
        return _pyaqcv.Point2fList_get_allocator(self)

    def pop_back(self):
        return _pyaqcv.Point2fList_pop_back(self)

    def erase(self, *args):
        return _pyaqcv.Point2fList_erase(self, *args)

    def __init__(self, *args):
        _pyaqcv.Point2fList_swiginit(self, _pyaqcv.new_Point2fList(*args))

    def push_back(self, x):
        return _pyaqcv.Point2fList_push_back(self, x)

    def front(self):
        return _pyaqcv.Point2fList_front(self)

    def back(self):
        return _pyaqcv.Point2fList_back(self)

    def assign(self, n, x):
        return _pyaqcv.Point2fList_assign(self, n, x)

    def resize(self, *args):
        return _pyaqcv.Point2fList_resize(self, *args)

    def insert(self, *args):
        return _pyaqcv.Point2fList_insert(self, *args)

    def pop_front(self):
        return _pyaqcv.Point2fList_pop_front(self)

    def push_front(self, x):
        return _pyaqcv.Point2fList_push_front(self, x)

    def reverse(self):
        return _pyaqcv.Point2fList_reverse(self)
    __swig_destroy__ = _pyaqcv.delete_Point2fList

# Register Point2fList in _pyaqcv:
_pyaqcv.Point2fList_swigregister(Point2fList)

class AqPointVec(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _pyaqcv.AqPointVec_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _pyaqcv.AqPointVec___nonzero__(self)

    def __bool__(self):
        return _pyaqcv.AqPointVec___bool__(self)

    def __len__(self):
        return _pyaqcv.AqPointVec___len__(self)

    def __getslice__(self, i, j):
        return _pyaqcv.AqPointVec___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _pyaqcv.AqPointVec___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _pyaqcv.AqPointVec___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _pyaqcv.AqPointVec___delitem__(self, *args)

    def __getitem__(self, *args):
        return _pyaqcv.AqPointVec___getitem__(self, *args)

    def __setitem__(self, *args):
        return _pyaqcv.AqPointVec___setitem__(self, *args)

    def pop(self):
        return _pyaqcv.AqPointVec_pop(self)

    def append(self, x):
        return _pyaqcv.AqPointVec_append(self, x)

    def empty(self):
        return _pyaqcv.AqPointVec_empty(self)

    def size(self):
        return _pyaqcv.AqPointVec_size(self)

    def swap(self, v):
        return _pyaqcv.AqPointVec_swap(self, v)

    def begin(self):
        return _pyaqcv.AqPointVec_begin(self)

    def end(self):
        return _pyaqcv.AqPointVec_end(self)

    def rbegin(self):
        return _pyaqcv.AqPointVec_rbegin(self)

    def rend(self):
        return _pyaqcv.AqPointVec_rend(self)

    def clear(self):
        return _pyaqcv.AqPointVec_clear(self)

    def get_allocator(self):
        return _pyaqcv.AqPointVec_get_allocator(self)

    def pop_back(self):
        return _pyaqcv.AqPointVec_pop_back(self)

    def erase(self, *args):
        return _pyaqcv.AqPointVec_erase(self, *args)

    def __init__(self, *args):
        _pyaqcv.AqPointVec_swiginit(self, _pyaqcv.new_AqPointVec(*args))

    def push_back(self, x):
        return _pyaqcv.AqPointVec_push_back(self, x)

    def front(self):
        return _pyaqcv.AqPointVec_front(self)

    def back(self):
        return _pyaqcv.AqPointVec_back(self)

    def assign(self, n, x):
        return _pyaqcv.AqPointVec_assign(self, n, x)

    def resize(self, *args):
        return _pyaqcv.AqPointVec_resize(self, *args)

    def insert(self, *args):
        return _pyaqcv.AqPointVec_insert(self, *args)

    def reserve(self, n):
        return _pyaqcv.AqPointVec_reserve(self, n)

    def capacity(self):
        return _pyaqcv.AqPointVec_capacity(self)
    __swig_destroy__ = _pyaqcv.delete_AqPointVec

# Register AqPointVec in _pyaqcv:
_pyaqcv.AqPointVec_swigregister(AqPointVec)

class AqPoint2fVec(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _pyaqcv.AqPoint2fVec_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _pyaqcv.AqPoint2fVec___nonzero__(self)

    def __bool__(self):
        return _pyaqcv.AqPoint2fVec___bool__(self)

    def __len__(self):
        return _pyaqcv.AqPoint2fVec___len__(self)

    def __getslice__(self, i, j):
        return _pyaqcv.AqPoint2fVec___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _pyaqcv.AqPoint2fVec___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _pyaqcv.AqPoint2fVec___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _pyaqcv.AqPoint2fVec___delitem__(self, *args)

    def __getitem__(self, *args):
        return _pyaqcv.AqPoint2fVec___getitem__(self, *args)

    def __setitem__(self, *args):
        return _pyaqcv.AqPoint2fVec___setitem__(self, *args)

    def pop(self):
        return _pyaqcv.AqPoint2fVec_pop(self)

    def append(self, x):
        return _pyaqcv.AqPoint2fVec_append(self, x)

    def empty(self):
        return _pyaqcv.AqPoint2fVec_empty(self)

    def size(self):
        return _pyaqcv.AqPoint2fVec_size(self)

    def swap(self, v):
        return _pyaqcv.AqPoint2fVec_swap(self, v)

    def begin(self):
        return _pyaqcv.AqPoint2fVec_begin(self)

    def end(self):
        return _pyaqcv.AqPoint2fVec_end(self)

    def rbegin(self):
        return _pyaqcv.AqPoint2fVec_rbegin(self)

    def rend(self):
        return _pyaqcv.AqPoint2fVec_rend(self)

    def clear(self):
        return _pyaqcv.AqPoint2fVec_clear(self)

    def get_allocator(self):
        return _pyaqcv.AqPoint2fVec_get_allocator(self)

    def pop_back(self):
        return _pyaqcv.AqPoint2fVec_pop_back(self)

    def erase(self, *args):
        return _pyaqcv.AqPoint2fVec_erase(self, *args)

    def __init__(self, *args):
        _pyaqcv.AqPoint2fVec_swiginit(self, _pyaqcv.new_AqPoint2fVec(*args))

    def push_back(self, x):
        return _pyaqcv.AqPoint2fVec_push_back(self, x)

    def front(self):
        return _pyaqcv.AqPoint2fVec_front(self)

    def back(self):
        return _pyaqcv.AqPoint2fVec_back(self)

    def assign(self, n, x):
        return _pyaqcv.AqPoint2fVec_assign(self, n, x)

    def resize(self, *args):
        return _pyaqcv.AqPoint2fVec_resize(self, *args)

    def insert(self, *args):
        return _pyaqcv.AqPoint2fVec_insert(self, *args)

    def reserve(self, n):
        return _pyaqcv.AqPoint2fVec_reserve(self, n)

    def capacity(self):
        return _pyaqcv.AqPoint2fVec_capacity(self)
    __swig_destroy__ = _pyaqcv.delete_AqPoint2fVec

# Register AqPoint2fVec in _pyaqcv:
_pyaqcv.AqPoint2fVec_swigregister(AqPoint2fVec)

class AqPoint2dVec(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _pyaqcv.AqPoint2dVec_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _pyaqcv.AqPoint2dVec___nonzero__(self)

    def __bool__(self):
        return _pyaqcv.AqPoint2dVec___bool__(self)

    def __len__(self):
        return _pyaqcv.AqPoint2dVec___len__(self)

    def __getslice__(self, i, j):
        return _pyaqcv.AqPoint2dVec___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _pyaqcv.AqPoint2dVec___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _pyaqcv.AqPoint2dVec___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _pyaqcv.AqPoint2dVec___delitem__(self, *args)

    def __getitem__(self, *args):
        return _pyaqcv.AqPoint2dVec___getitem__(self, *args)

    def __setitem__(self, *args):
        return _pyaqcv.AqPoint2dVec___setitem__(self, *args)

    def pop(self):
        return _pyaqcv.AqPoint2dVec_pop(self)

    def append(self, x):
        return _pyaqcv.AqPoint2dVec_append(self, x)

    def empty(self):
        return _pyaqcv.AqPoint2dVec_empty(self)

    def size(self):
        return _pyaqcv.AqPoint2dVec_size(self)

    def swap(self, v):
        return _pyaqcv.AqPoint2dVec_swap(self, v)

    def begin(self):
        return _pyaqcv.AqPoint2dVec_begin(self)

    def end(self):
        return _pyaqcv.AqPoint2dVec_end(self)

    def rbegin(self):
        return _pyaqcv.AqPoint2dVec_rbegin(self)

    def rend(self):
        return _pyaqcv.AqPoint2dVec_rend(self)

    def clear(self):
        return _pyaqcv.AqPoint2dVec_clear(self)

    def get_allocator(self):
        return _pyaqcv.AqPoint2dVec_get_allocator(self)

    def pop_back(self):
        return _pyaqcv.AqPoint2dVec_pop_back(self)

    def erase(self, *args):
        return _pyaqcv.AqPoint2dVec_erase(self, *args)

    def __init__(self, *args):
        _pyaqcv.AqPoint2dVec_swiginit(self, _pyaqcv.new_AqPoint2dVec(*args))

    def push_back(self, x):
        return _pyaqcv.AqPoint2dVec_push_back(self, x)

    def front(self):
        return _pyaqcv.AqPoint2dVec_front(self)

    def back(self):
        return _pyaqcv.AqPoint2dVec_back(self)

    def assign(self, n, x):
        return _pyaqcv.AqPoint2dVec_assign(self, n, x)

    def resize(self, *args):
        return _pyaqcv.AqPoint2dVec_resize(self, *args)

    def insert(self, *args):
        return _pyaqcv.AqPoint2dVec_insert(self, *args)

    def reserve(self, n):
        return _pyaqcv.AqPoint2dVec_reserve(self, n)

    def capacity(self):
        return _pyaqcv.AqPoint2dVec_capacity(self)
    __swig_destroy__ = _pyaqcv.delete_AqPoint2dVec

# Register AqPoint2dVec in _pyaqcv:
_pyaqcv.AqPoint2dVec_swigregister(AqPoint2dVec)

class AqMatVec(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _pyaqcv.AqMatVec_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _pyaqcv.AqMatVec___nonzero__(self)

    def __bool__(self):
        return _pyaqcv.AqMatVec___bool__(self)

    def __len__(self):
        return _pyaqcv.AqMatVec___len__(self)

    def __getslice__(self, i, j):
        return _pyaqcv.AqMatVec___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _pyaqcv.AqMatVec___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _pyaqcv.AqMatVec___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _pyaqcv.AqMatVec___delitem__(self, *args)

    def __getitem__(self, *args):
        return _pyaqcv.AqMatVec___getitem__(self, *args)

    def __setitem__(self, *args):
        return _pyaqcv.AqMatVec___setitem__(self, *args)

    def pop(self):
        return _pyaqcv.AqMatVec_pop(self)

    def append(self, x):
        return _pyaqcv.AqMatVec_append(self, x)

    def empty(self):
        return _pyaqcv.AqMatVec_empty(self)

    def size(self):
        return _pyaqcv.AqMatVec_size(self)

    def swap(self, v):
        return _pyaqcv.AqMatVec_swap(self, v)

    def begin(self):
        return _pyaqcv.AqMatVec_begin(self)

    def end(self):
        return _pyaqcv.AqMatVec_end(self)

    def rbegin(self):
        return _pyaqcv.AqMatVec_rbegin(self)

    def rend(self):
        return _pyaqcv.AqMatVec_rend(self)

    def clear(self):
        return _pyaqcv.AqMatVec_clear(self)

    def get_allocator(self):
        return _pyaqcv.AqMatVec_get_allocator(self)

    def pop_back(self):
        return _pyaqcv.AqMatVec_pop_back(self)

    def erase(self, *args):
        return _pyaqcv.AqMatVec_erase(self, *args)

    def __init__(self, *args):
        _pyaqcv.AqMatVec_swiginit(self, _pyaqcv.new_AqMatVec(*args))

    def push_back(self, x):
        return _pyaqcv.AqMatVec_push_back(self, x)

    def front(self):
        return _pyaqcv.AqMatVec_front(self)

    def back(self):
        return _pyaqcv.AqMatVec_back(self)

    def assign(self, n, x):
        return _pyaqcv.AqMatVec_assign(self, n, x)

    def resize(self, *args):
        return _pyaqcv.AqMatVec_resize(self, *args)

    def insert(self, *args):
        return _pyaqcv.AqMatVec_insert(self, *args)

    def reserve(self, n):
        return _pyaqcv.AqMatVec_reserve(self, n)

    def capacity(self):
        return _pyaqcv.AqMatVec_capacity(self)
    __swig_destroy__ = _pyaqcv.delete_AqMatVec

# Register AqMatVec in _pyaqcv:
_pyaqcv.AqMatVec_swigregister(AqMatVec)

class AqRangeVec(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _pyaqcv.AqRangeVec_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _pyaqcv.AqRangeVec___nonzero__(self)

    def __bool__(self):
        return _pyaqcv.AqRangeVec___bool__(self)

    def __len__(self):
        return _pyaqcv.AqRangeVec___len__(self)

    def __getslice__(self, i, j):
        return _pyaqcv.AqRangeVec___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _pyaqcv.AqRangeVec___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _pyaqcv.AqRangeVec___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _pyaqcv.AqRangeVec___delitem__(self, *args)

    def __getitem__(self, *args):
        return _pyaqcv.AqRangeVec___getitem__(self, *args)

    def __setitem__(self, *args):
        return _pyaqcv.AqRangeVec___setitem__(self, *args)

    def pop(self):
        return _pyaqcv.AqRangeVec_pop(self)

    def append(self, x):
        return _pyaqcv.AqRangeVec_append(self, x)

    def empty(self):
        return _pyaqcv.AqRangeVec_empty(self)

    def size(self):
        return _pyaqcv.AqRangeVec_size(self)

    def swap(self, v):
        return _pyaqcv.AqRangeVec_swap(self, v)

    def begin(self):
        return _pyaqcv.AqRangeVec_begin(self)

    def end(self):
        return _pyaqcv.AqRangeVec_end(self)

    def rbegin(self):
        return _pyaqcv.AqRangeVec_rbegin(self)

    def rend(self):
        return _pyaqcv.AqRangeVec_rend(self)

    def clear(self):
        return _pyaqcv.AqRangeVec_clear(self)

    def get_allocator(self):
        return _pyaqcv.AqRangeVec_get_allocator(self)

    def pop_back(self):
        return _pyaqcv.AqRangeVec_pop_back(self)

    def erase(self, *args):
        return _pyaqcv.AqRangeVec_erase(self, *args)

    def __init__(self, *args):
        _pyaqcv.AqRangeVec_swiginit(self, _pyaqcv.new_AqRangeVec(*args))

    def push_back(self, x):
        return _pyaqcv.AqRangeVec_push_back(self, x)

    def front(self):
        return _pyaqcv.AqRangeVec_front(self)

    def back(self):
        return _pyaqcv.AqRangeVec_back(self)

    def assign(self, n, x):
        return _pyaqcv.AqRangeVec_assign(self, n, x)

    def resize(self, *args):
        return _pyaqcv.AqRangeVec_resize(self, *args)

    def insert(self, *args):
        return _pyaqcv.AqRangeVec_insert(self, *args)

    def reserve(self, n):
        return _pyaqcv.AqRangeVec_reserve(self, n)

    def capacity(self):
        return _pyaqcv.AqRangeVec_capacity(self)
    __swig_destroy__ = _pyaqcv.delete_AqRangeVec

# Register AqRangeVec in _pyaqcv:
_pyaqcv.AqRangeVec_swigregister(AqRangeVec)

class AqPoint3fVec(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _pyaqcv.AqPoint3fVec_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _pyaqcv.AqPoint3fVec___nonzero__(self)

    def __bool__(self):
        return _pyaqcv.AqPoint3fVec___bool__(self)

    def __len__(self):
        return _pyaqcv.AqPoint3fVec___len__(self)

    def __getslice__(self, i, j):
        return _pyaqcv.AqPoint3fVec___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _pyaqcv.AqPoint3fVec___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _pyaqcv.AqPoint3fVec___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _pyaqcv.AqPoint3fVec___delitem__(self, *args)

    def __getitem__(self, *args):
        return _pyaqcv.AqPoint3fVec___getitem__(self, *args)

    def __setitem__(self, *args):
        return _pyaqcv.AqPoint3fVec___setitem__(self, *args)

    def pop(self):
        return _pyaqcv.AqPoint3fVec_pop(self)

    def append(self, x):
        return _pyaqcv.AqPoint3fVec_append(self, x)

    def empty(self):
        return _pyaqcv.AqPoint3fVec_empty(self)

    def size(self):
        return _pyaqcv.AqPoint3fVec_size(self)

    def swap(self, v):
        return _pyaqcv.AqPoint3fVec_swap(self, v)

    def begin(self):
        return _pyaqcv.AqPoint3fVec_begin(self)

    def end(self):
        return _pyaqcv.AqPoint3fVec_end(self)

    def rbegin(self):
        return _pyaqcv.AqPoint3fVec_rbegin(self)

    def rend(self):
        return _pyaqcv.AqPoint3fVec_rend(self)

    def clear(self):
        return _pyaqcv.AqPoint3fVec_clear(self)

    def get_allocator(self):
        return _pyaqcv.AqPoint3fVec_get_allocator(self)

    def pop_back(self):
        return _pyaqcv.AqPoint3fVec_pop_back(self)

    def erase(self, *args):
        return _pyaqcv.AqPoint3fVec_erase(self, *args)

    def __init__(self, *args):
        _pyaqcv.AqPoint3fVec_swiginit(self, _pyaqcv.new_AqPoint3fVec(*args))

    def push_back(self, x):
        return _pyaqcv.AqPoint3fVec_push_back(self, x)

    def front(self):
        return _pyaqcv.AqPoint3fVec_front(self)

    def back(self):
        return _pyaqcv.AqPoint3fVec_back(self)

    def assign(self, n, x):
        return _pyaqcv.AqPoint3fVec_assign(self, n, x)

    def resize(self, *args):
        return _pyaqcv.AqPoint3fVec_resize(self, *args)

    def insert(self, *args):
        return _pyaqcv.AqPoint3fVec_insert(self, *args)

    def reserve(self, n):
        return _pyaqcv.AqPoint3fVec_reserve(self, n)

    def capacity(self):
        return _pyaqcv.AqPoint3fVec_capacity(self)
    __swig_destroy__ = _pyaqcv.delete_AqPoint3fVec

# Register AqPoint3fVec in _pyaqcv:
_pyaqcv.AqPoint3fVec_swigregister(AqPoint3fVec)

class AqPoint3dVec(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _pyaqcv.AqPoint3dVec_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _pyaqcv.AqPoint3dVec___nonzero__(self)

    def __bool__(self):
        return _pyaqcv.AqPoint3dVec___bool__(self)

    def __len__(self):
        return _pyaqcv.AqPoint3dVec___len__(self)

    def __getslice__(self, i, j):
        return _pyaqcv.AqPoint3dVec___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _pyaqcv.AqPoint3dVec___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _pyaqcv.AqPoint3dVec___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _pyaqcv.AqPoint3dVec___delitem__(self, *args)

    def __getitem__(self, *args):
        return _pyaqcv.AqPoint3dVec___getitem__(self, *args)

    def __setitem__(self, *args):
        return _pyaqcv.AqPoint3dVec___setitem__(self, *args)

    def pop(self):
        return _pyaqcv.AqPoint3dVec_pop(self)

    def append(self, x):
        return _pyaqcv.AqPoint3dVec_append(self, x)

    def empty(self):
        return _pyaqcv.AqPoint3dVec_empty(self)

    def size(self):
        return _pyaqcv.AqPoint3dVec_size(self)

    def swap(self, v):
        return _pyaqcv.AqPoint3dVec_swap(self, v)

    def begin(self):
        return _pyaqcv.AqPoint3dVec_begin(self)

    def end(self):
        return _pyaqcv.AqPoint3dVec_end(self)

    def rbegin(self):
        return _pyaqcv.AqPoint3dVec_rbegin(self)

    def rend(self):
        return _pyaqcv.AqPoint3dVec_rend(self)

    def clear(self):
        return _pyaqcv.AqPoint3dVec_clear(self)

    def get_allocator(self):
        return _pyaqcv.AqPoint3dVec_get_allocator(self)

    def pop_back(self):
        return _pyaqcv.AqPoint3dVec_pop_back(self)

    def erase(self, *args):
        return _pyaqcv.AqPoint3dVec_erase(self, *args)

    def __init__(self, *args):
        _pyaqcv.AqPoint3dVec_swiginit(self, _pyaqcv.new_AqPoint3dVec(*args))

    def push_back(self, x):
        return _pyaqcv.AqPoint3dVec_push_back(self, x)

    def front(self):
        return _pyaqcv.AqPoint3dVec_front(self)

    def back(self):
        return _pyaqcv.AqPoint3dVec_back(self)

    def assign(self, n, x):
        return _pyaqcv.AqPoint3dVec_assign(self, n, x)

    def resize(self, *args):
        return _pyaqcv.AqPoint3dVec_resize(self, *args)

    def insert(self, *args):
        return _pyaqcv.AqPoint3dVec_insert(self, *args)

    def reserve(self, n):
        return _pyaqcv.AqPoint3dVec_reserve(self, n)

    def capacity(self):
        return _pyaqcv.AqPoint3dVec_capacity(self)
    __swig_destroy__ = _pyaqcv.delete_AqPoint3dVec

# Register AqPoint3dVec in _pyaqcv:
_pyaqcv.AqPoint3dVec_swigregister(AqPoint3dVec)

class AqVec4iVec(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _pyaqcv.AqVec4iVec_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _pyaqcv.AqVec4iVec___nonzero__(self)

    def __bool__(self):
        return _pyaqcv.AqVec4iVec___bool__(self)

    def __len__(self):
        return _pyaqcv.AqVec4iVec___len__(self)

    def __getslice__(self, i, j):
        return _pyaqcv.AqVec4iVec___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _pyaqcv.AqVec4iVec___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _pyaqcv.AqVec4iVec___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _pyaqcv.AqVec4iVec___delitem__(self, *args)

    def __getitem__(self, *args):
        return _pyaqcv.AqVec4iVec___getitem__(self, *args)

    def __setitem__(self, *args):
        return _pyaqcv.AqVec4iVec___setitem__(self, *args)

    def pop(self):
        return _pyaqcv.AqVec4iVec_pop(self)

    def append(self, x):
        return _pyaqcv.AqVec4iVec_append(self, x)

    def empty(self):
        return _pyaqcv.AqVec4iVec_empty(self)

    def size(self):
        return _pyaqcv.AqVec4iVec_size(self)

    def swap(self, v):
        return _pyaqcv.AqVec4iVec_swap(self, v)

    def begin(self):
        return _pyaqcv.AqVec4iVec_begin(self)

    def end(self):
        return _pyaqcv.AqVec4iVec_end(self)

    def rbegin(self):
        return _pyaqcv.AqVec4iVec_rbegin(self)

    def rend(self):
        return _pyaqcv.AqVec4iVec_rend(self)

    def clear(self):
        return _pyaqcv.AqVec4iVec_clear(self)

    def get_allocator(self):
        return _pyaqcv.AqVec4iVec_get_allocator(self)

    def pop_back(self):
        return _pyaqcv.AqVec4iVec_pop_back(self)

    def erase(self, *args):
        return _pyaqcv.AqVec4iVec_erase(self, *args)

    def __init__(self, *args):
        _pyaqcv.AqVec4iVec_swiginit(self, _pyaqcv.new_AqVec4iVec(*args))

    def push_back(self, x):
        return _pyaqcv.AqVec4iVec_push_back(self, x)

    def front(self):
        return _pyaqcv.AqVec4iVec_front(self)

    def back(self):
        return _pyaqcv.AqVec4iVec_back(self)

    def assign(self, n, x):
        return _pyaqcv.AqVec4iVec_assign(self, n, x)

    def resize(self, *args):
        return _pyaqcv.AqVec4iVec_resize(self, *args)

    def insert(self, *args):
        return _pyaqcv.AqVec4iVec_insert(self, *args)

    def reserve(self, n):
        return _pyaqcv.AqVec4iVec_reserve(self, n)

    def capacity(self):
        return _pyaqcv.AqVec4iVec_capacity(self)
    __swig_destroy__ = _pyaqcv.delete_AqVec4iVec

# Register AqVec4iVec in _pyaqcv:
_pyaqcv.AqVec4iVec_swigregister(AqVec4iVec)

class AqRegionVec(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _pyaqcv.AqRegionVec_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _pyaqcv.AqRegionVec___nonzero__(self)

    def __bool__(self):
        return _pyaqcv.AqRegionVec___bool__(self)

    def __len__(self):
        return _pyaqcv.AqRegionVec___len__(self)

    def __getslice__(self, i, j):
        return _pyaqcv.AqRegionVec___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _pyaqcv.AqRegionVec___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _pyaqcv.AqRegionVec___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _pyaqcv.AqRegionVec___delitem__(self, *args)

    def __getitem__(self, *args):
        return _pyaqcv.AqRegionVec___getitem__(self, *args)

    def __setitem__(self, *args):
        return _pyaqcv.AqRegionVec___setitem__(self, *args)

    def pop(self):
        return _pyaqcv.AqRegionVec_pop(self)

    def append(self, x):
        return _pyaqcv.AqRegionVec_append(self, x)

    def empty(self):
        return _pyaqcv.AqRegionVec_empty(self)

    def size(self):
        return _pyaqcv.AqRegionVec_size(self)

    def swap(self, v):
        return _pyaqcv.AqRegionVec_swap(self, v)

    def begin(self):
        return _pyaqcv.AqRegionVec_begin(self)

    def end(self):
        return _pyaqcv.AqRegionVec_end(self)

    def rbegin(self):
        return _pyaqcv.AqRegionVec_rbegin(self)

    def rend(self):
        return _pyaqcv.AqRegionVec_rend(self)

    def clear(self):
        return _pyaqcv.AqRegionVec_clear(self)

    def get_allocator(self):
        return _pyaqcv.AqRegionVec_get_allocator(self)

    def pop_back(self):
        return _pyaqcv.AqRegionVec_pop_back(self)

    def erase(self, *args):
        return _pyaqcv.AqRegionVec_erase(self, *args)

    def __init__(self, *args):
        _pyaqcv.AqRegionVec_swiginit(self, _pyaqcv.new_AqRegionVec(*args))

    def push_back(self, x):
        return _pyaqcv.AqRegionVec_push_back(self, x)

    def front(self):
        return _pyaqcv.AqRegionVec_front(self)

    def back(self):
        return _pyaqcv.AqRegionVec_back(self)

    def assign(self, n, x):
        return _pyaqcv.AqRegionVec_assign(self, n, x)

    def resize(self, *args):
        return _pyaqcv.AqRegionVec_resize(self, *args)

    def insert(self, *args):
        return _pyaqcv.AqRegionVec_insert(self, *args)

    def reserve(self, n):
        return _pyaqcv.AqRegionVec_reserve(self, n)

    def capacity(self):
        return _pyaqcv.AqRegionVec_capacity(self)
    __swig_destroy__ = _pyaqcv.delete_AqRegionVec

# Register AqRegionVec in _pyaqcv:
_pyaqcv.AqRegionVec_swigregister(AqRegionVec)

class AqRegionSelectFeatureVec(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _pyaqcv.AqRegionSelectFeatureVec_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _pyaqcv.AqRegionSelectFeatureVec___nonzero__(self)

    def __bool__(self):
        return _pyaqcv.AqRegionSelectFeatureVec___bool__(self)

    def __len__(self):
        return _pyaqcv.AqRegionSelectFeatureVec___len__(self)

    def __getslice__(self, i, j):
        return _pyaqcv.AqRegionSelectFeatureVec___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _pyaqcv.AqRegionSelectFeatureVec___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _pyaqcv.AqRegionSelectFeatureVec___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _pyaqcv.AqRegionSelectFeatureVec___delitem__(self, *args)

    def __getitem__(self, *args):
        return _pyaqcv.AqRegionSelectFeatureVec___getitem__(self, *args)

    def __setitem__(self, *args):
        return _pyaqcv.AqRegionSelectFeatureVec___setitem__(self, *args)

    def pop(self):
        return _pyaqcv.AqRegionSelectFeatureVec_pop(self)

    def append(self, x):
        return _pyaqcv.AqRegionSelectFeatureVec_append(self, x)

    def empty(self):
        return _pyaqcv.AqRegionSelectFeatureVec_empty(self)

    def size(self):
        return _pyaqcv.AqRegionSelectFeatureVec_size(self)

    def swap(self, v):
        return _pyaqcv.AqRegionSelectFeatureVec_swap(self, v)

    def begin(self):
        return _pyaqcv.AqRegionSelectFeatureVec_begin(self)

    def end(self):
        return _pyaqcv.AqRegionSelectFeatureVec_end(self)

    def rbegin(self):
        return _pyaqcv.AqRegionSelectFeatureVec_rbegin(self)

    def rend(self):
        return _pyaqcv.AqRegionSelectFeatureVec_rend(self)

    def clear(self):
        return _pyaqcv.AqRegionSelectFeatureVec_clear(self)

    def get_allocator(self):
        return _pyaqcv.AqRegionSelectFeatureVec_get_allocator(self)

    def pop_back(self):
        return _pyaqcv.AqRegionSelectFeatureVec_pop_back(self)

    def erase(self, *args):
        return _pyaqcv.AqRegionSelectFeatureVec_erase(self, *args)

    def __init__(self, *args):
        _pyaqcv.AqRegionSelectFeatureVec_swiginit(self, _pyaqcv.new_AqRegionSelectFeatureVec(*args))

    def push_back(self, x):
        return _pyaqcv.AqRegionSelectFeatureVec_push_back(self, x)

    def front(self):
        return _pyaqcv.AqRegionSelectFeatureVec_front(self)

    def back(self):
        return _pyaqcv.AqRegionSelectFeatureVec_back(self)

    def assign(self, n, x):
        return _pyaqcv.AqRegionSelectFeatureVec_assign(self, n, x)

    def resize(self, *args):
        return _pyaqcv.AqRegionSelectFeatureVec_resize(self, *args)

    def insert(self, *args):
        return _pyaqcv.AqRegionSelectFeatureVec_insert(self, *args)

    def reserve(self, n):
        return _pyaqcv.AqRegionSelectFeatureVec_reserve(self, n)

    def capacity(self):
        return _pyaqcv.AqRegionSelectFeatureVec_capacity(self)
    __swig_destroy__ = _pyaqcv.delete_AqRegionSelectFeatureVec

# Register AqRegionSelectFeatureVec in _pyaqcv:
_pyaqcv.AqRegionSelectFeatureVec_swigregister(AqRegionSelectFeatureVec)

class AqIntPose3DRTMap(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _pyaqcv.AqIntPose3DRTMap_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _pyaqcv.AqIntPose3DRTMap___nonzero__(self)

    def __bool__(self):
        return _pyaqcv.AqIntPose3DRTMap___bool__(self)

    def __len__(self):
        return _pyaqcv.AqIntPose3DRTMap___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        return _pyaqcv.AqIntPose3DRTMap___getitem__(self, key)

    def __delitem__(self, key):
        return _pyaqcv.AqIntPose3DRTMap___delitem__(self, key)

    def has_key(self, key):
        return _pyaqcv.AqIntPose3DRTMap_has_key(self, key)

    def keys(self):
        return _pyaqcv.AqIntPose3DRTMap_keys(self)

    def values(self):
        return _pyaqcv.AqIntPose3DRTMap_values(self)

    def items(self):
        return _pyaqcv.AqIntPose3DRTMap_items(self)

    def __contains__(self, key):
        return _pyaqcv.AqIntPose3DRTMap___contains__(self, key)

    def key_iterator(self):
        return _pyaqcv.AqIntPose3DRTMap_key_iterator(self)

    def value_iterator(self):
        return _pyaqcv.AqIntPose3DRTMap_value_iterator(self)

    def __setitem__(self, *args):
        return _pyaqcv.AqIntPose3DRTMap___setitem__(self, *args)

    def asdict(self):
        return _pyaqcv.AqIntPose3DRTMap_asdict(self)

    def __init__(self, *args):
        _pyaqcv.AqIntPose3DRTMap_swiginit(self, _pyaqcv.new_AqIntPose3DRTMap(*args))

    def empty(self):
        return _pyaqcv.AqIntPose3DRTMap_empty(self)

    def size(self):
        return _pyaqcv.AqIntPose3DRTMap_size(self)

    def swap(self, v):
        return _pyaqcv.AqIntPose3DRTMap_swap(self, v)

    def begin(self):
        return _pyaqcv.AqIntPose3DRTMap_begin(self)

    def end(self):
        return _pyaqcv.AqIntPose3DRTMap_end(self)

    def rbegin(self):
        return _pyaqcv.AqIntPose3DRTMap_rbegin(self)

    def rend(self):
        return _pyaqcv.AqIntPose3DRTMap_rend(self)

    def clear(self):
        return _pyaqcv.AqIntPose3DRTMap_clear(self)

    def get_allocator(self):
        return _pyaqcv.AqIntPose3DRTMap_get_allocator(self)

    def count(self, x):
        return _pyaqcv.AqIntPose3DRTMap_count(self, x)

    def erase(self, *args):
        return _pyaqcv.AqIntPose3DRTMap_erase(self, *args)

    def find(self, x):
        return _pyaqcv.AqIntPose3DRTMap_find(self, x)

    def lower_bound(self, x):
        return _pyaqcv.AqIntPose3DRTMap_lower_bound(self, x)

    def upper_bound(self, x):
        return _pyaqcv.AqIntPose3DRTMap_upper_bound(self, x)
    __swig_destroy__ = _pyaqcv.delete_AqIntPose3DRTMap

# Register AqIntPose3DRTMap in _pyaqcv:
_pyaqcv.AqIntPose3DRTMap_swigregister(AqIntPose3DRTMap)

class AqPointFeatVec(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _pyaqcv.AqPointFeatVec_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _pyaqcv.AqPointFeatVec___nonzero__(self)

    def __bool__(self):
        return _pyaqcv.AqPointFeatVec___bool__(self)

    def __len__(self):
        return _pyaqcv.AqPointFeatVec___len__(self)

    def __getslice__(self, i, j):
        return _pyaqcv.AqPointFeatVec___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _pyaqcv.AqPointFeatVec___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _pyaqcv.AqPointFeatVec___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _pyaqcv.AqPointFeatVec___delitem__(self, *args)

    def __getitem__(self, *args):
        return _pyaqcv.AqPointFeatVec___getitem__(self, *args)

    def __setitem__(self, *args):
        return _pyaqcv.AqPointFeatVec___setitem__(self, *args)

    def pop(self):
        return _pyaqcv.AqPointFeatVec_pop(self)

    def append(self, x):
        return _pyaqcv.AqPointFeatVec_append(self, x)

    def empty(self):
        return _pyaqcv.AqPointFeatVec_empty(self)

    def size(self):
        return _pyaqcv.AqPointFeatVec_size(self)

    def swap(self, v):
        return _pyaqcv.AqPointFeatVec_swap(self, v)

    def begin(self):
        return _pyaqcv.AqPointFeatVec_begin(self)

    def end(self):
        return _pyaqcv.AqPointFeatVec_end(self)

    def rbegin(self):
        return _pyaqcv.AqPointFeatVec_rbegin(self)

    def rend(self):
        return _pyaqcv.AqPointFeatVec_rend(self)

    def clear(self):
        return _pyaqcv.AqPointFeatVec_clear(self)

    def get_allocator(self):
        return _pyaqcv.AqPointFeatVec_get_allocator(self)

    def pop_back(self):
        return _pyaqcv.AqPointFeatVec_pop_back(self)

    def erase(self, *args):
        return _pyaqcv.AqPointFeatVec_erase(self, *args)

    def __init__(self, *args):
        _pyaqcv.AqPointFeatVec_swiginit(self, _pyaqcv.new_AqPointFeatVec(*args))

    def push_back(self, x):
        return _pyaqcv.AqPointFeatVec_push_back(self, x)

    def front(self):
        return _pyaqcv.AqPointFeatVec_front(self)

    def back(self):
        return _pyaqcv.AqPointFeatVec_back(self)

    def assign(self, n, x):
        return _pyaqcv.AqPointFeatVec_assign(self, n, x)

    def resize(self, *args):
        return _pyaqcv.AqPointFeatVec_resize(self, *args)

    def insert(self, *args):
        return _pyaqcv.AqPointFeatVec_insert(self, *args)

    def reserve(self, n):
        return _pyaqcv.AqPointFeatVec_reserve(self, n)

    def capacity(self):
        return _pyaqcv.AqPointFeatVec_capacity(self)
    __swig_destroy__ = _pyaqcv.delete_AqPointFeatVec

# Register AqPointFeatVec in _pyaqcv:
_pyaqcv.AqPointFeatVec_swigregister(AqPointFeatVec)

class AqPointFeatVecVec(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _pyaqcv.AqPointFeatVecVec_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _pyaqcv.AqPointFeatVecVec___nonzero__(self)

    def __bool__(self):
        return _pyaqcv.AqPointFeatVecVec___bool__(self)

    def __len__(self):
        return _pyaqcv.AqPointFeatVecVec___len__(self)

    def __getslice__(self, i, j):
        return _pyaqcv.AqPointFeatVecVec___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _pyaqcv.AqPointFeatVecVec___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _pyaqcv.AqPointFeatVecVec___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _pyaqcv.AqPointFeatVecVec___delitem__(self, *args)

    def __getitem__(self, *args):
        return _pyaqcv.AqPointFeatVecVec___getitem__(self, *args)

    def __setitem__(self, *args):
        return _pyaqcv.AqPointFeatVecVec___setitem__(self, *args)

    def pop(self):
        return _pyaqcv.AqPointFeatVecVec_pop(self)

    def append(self, x):
        return _pyaqcv.AqPointFeatVecVec_append(self, x)

    def empty(self):
        return _pyaqcv.AqPointFeatVecVec_empty(self)

    def size(self):
        return _pyaqcv.AqPointFeatVecVec_size(self)

    def swap(self, v):
        return _pyaqcv.AqPointFeatVecVec_swap(self, v)

    def begin(self):
        return _pyaqcv.AqPointFeatVecVec_begin(self)

    def end(self):
        return _pyaqcv.AqPointFeatVecVec_end(self)

    def rbegin(self):
        return _pyaqcv.AqPointFeatVecVec_rbegin(self)

    def rend(self):
        return _pyaqcv.AqPointFeatVecVec_rend(self)

    def clear(self):
        return _pyaqcv.AqPointFeatVecVec_clear(self)

    def get_allocator(self):
        return _pyaqcv.AqPointFeatVecVec_get_allocator(self)

    def pop_back(self):
        return _pyaqcv.AqPointFeatVecVec_pop_back(self)

    def erase(self, *args):
        return _pyaqcv.AqPointFeatVecVec_erase(self, *args)

    def __init__(self, *args):
        _pyaqcv.AqPointFeatVecVec_swiginit(self, _pyaqcv.new_AqPointFeatVecVec(*args))

    def push_back(self, x):
        return _pyaqcv.AqPointFeatVecVec_push_back(self, x)

    def front(self):
        return _pyaqcv.AqPointFeatVecVec_front(self)

    def back(self):
        return _pyaqcv.AqPointFeatVecVec_back(self)

    def assign(self, n, x):
        return _pyaqcv.AqPointFeatVecVec_assign(self, n, x)

    def resize(self, *args):
        return _pyaqcv.AqPointFeatVecVec_resize(self, *args)

    def insert(self, *args):
        return _pyaqcv.AqPointFeatVecVec_insert(self, *args)

    def reserve(self, n):
        return _pyaqcv.AqPointFeatVecVec_reserve(self, n)

    def capacity(self):
        return _pyaqcv.AqPointFeatVecVec_capacity(self)
    __swig_destroy__ = _pyaqcv.delete_AqPointFeatVecVec

# Register AqPointFeatVecVec in _pyaqcv:
_pyaqcv.AqPointFeatVecVec_swigregister(AqPointFeatVecVec)

class AqChainInfoVec(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _pyaqcv.AqChainInfoVec_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _pyaqcv.AqChainInfoVec___nonzero__(self)

    def __bool__(self):
        return _pyaqcv.AqChainInfoVec___bool__(self)

    def __len__(self):
        return _pyaqcv.AqChainInfoVec___len__(self)

    def __getslice__(self, i, j):
        return _pyaqcv.AqChainInfoVec___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _pyaqcv.AqChainInfoVec___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _pyaqcv.AqChainInfoVec___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _pyaqcv.AqChainInfoVec___delitem__(self, *args)

    def __getitem__(self, *args):
        return _pyaqcv.AqChainInfoVec___getitem__(self, *args)

    def __setitem__(self, *args):
        return _pyaqcv.AqChainInfoVec___setitem__(self, *args)

    def pop(self):
        return _pyaqcv.AqChainInfoVec_pop(self)

    def append(self, x):
        return _pyaqcv.AqChainInfoVec_append(self, x)

    def empty(self):
        return _pyaqcv.AqChainInfoVec_empty(self)

    def size(self):
        return _pyaqcv.AqChainInfoVec_size(self)

    def swap(self, v):
        return _pyaqcv.AqChainInfoVec_swap(self, v)

    def begin(self):
        return _pyaqcv.AqChainInfoVec_begin(self)

    def end(self):
        return _pyaqcv.AqChainInfoVec_end(self)

    def rbegin(self):
        return _pyaqcv.AqChainInfoVec_rbegin(self)

    def rend(self):
        return _pyaqcv.AqChainInfoVec_rend(self)

    def clear(self):
        return _pyaqcv.AqChainInfoVec_clear(self)

    def get_allocator(self):
        return _pyaqcv.AqChainInfoVec_get_allocator(self)

    def pop_back(self):
        return _pyaqcv.AqChainInfoVec_pop_back(self)

    def erase(self, *args):
        return _pyaqcv.AqChainInfoVec_erase(self, *args)

    def __init__(self, *args):
        _pyaqcv.AqChainInfoVec_swiginit(self, _pyaqcv.new_AqChainInfoVec(*args))

    def push_back(self, x):
        return _pyaqcv.AqChainInfoVec_push_back(self, x)

    def front(self):
        return _pyaqcv.AqChainInfoVec_front(self)

    def back(self):
        return _pyaqcv.AqChainInfoVec_back(self)

    def assign(self, n, x):
        return _pyaqcv.AqChainInfoVec_assign(self, n, x)

    def resize(self, *args):
        return _pyaqcv.AqChainInfoVec_resize(self, *args)

    def insert(self, *args):
        return _pyaqcv.AqChainInfoVec_insert(self, *args)

    def reserve(self, n):
        return _pyaqcv.AqChainInfoVec_reserve(self, n)

    def capacity(self):
        return _pyaqcv.AqChainInfoVec_capacity(self)
    __swig_destroy__ = _pyaqcv.delete_AqChainInfoVec

# Register AqChainInfoVec in _pyaqcv:
_pyaqcv.AqChainInfoVec_swigregister(AqChainInfoVec)

class AqIntDoubleMap(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _pyaqcv.AqIntDoubleMap_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _pyaqcv.AqIntDoubleMap___nonzero__(self)

    def __bool__(self):
        return _pyaqcv.AqIntDoubleMap___bool__(self)

    def __len__(self):
        return _pyaqcv.AqIntDoubleMap___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        return _pyaqcv.AqIntDoubleMap___getitem__(self, key)

    def __delitem__(self, key):
        return _pyaqcv.AqIntDoubleMap___delitem__(self, key)

    def has_key(self, key):
        return _pyaqcv.AqIntDoubleMap_has_key(self, key)

    def keys(self):
        return _pyaqcv.AqIntDoubleMap_keys(self)

    def values(self):
        return _pyaqcv.AqIntDoubleMap_values(self)

    def items(self):
        return _pyaqcv.AqIntDoubleMap_items(self)

    def __contains__(self, key):
        return _pyaqcv.AqIntDoubleMap___contains__(self, key)

    def key_iterator(self):
        return _pyaqcv.AqIntDoubleMap_key_iterator(self)

    def value_iterator(self):
        return _pyaqcv.AqIntDoubleMap_value_iterator(self)

    def __setitem__(self, *args):
        return _pyaqcv.AqIntDoubleMap___setitem__(self, *args)

    def asdict(self):
        return _pyaqcv.AqIntDoubleMap_asdict(self)

    def __init__(self, *args):
        _pyaqcv.AqIntDoubleMap_swiginit(self, _pyaqcv.new_AqIntDoubleMap(*args))

    def empty(self):
        return _pyaqcv.AqIntDoubleMap_empty(self)

    def size(self):
        return _pyaqcv.AqIntDoubleMap_size(self)

    def swap(self, v):
        return _pyaqcv.AqIntDoubleMap_swap(self, v)

    def begin(self):
        return _pyaqcv.AqIntDoubleMap_begin(self)

    def end(self):
        return _pyaqcv.AqIntDoubleMap_end(self)

    def rbegin(self):
        return _pyaqcv.AqIntDoubleMap_rbegin(self)

    def rend(self):
        return _pyaqcv.AqIntDoubleMap_rend(self)

    def clear(self):
        return _pyaqcv.AqIntDoubleMap_clear(self)

    def get_allocator(self):
        return _pyaqcv.AqIntDoubleMap_get_allocator(self)

    def count(self, x):
        return _pyaqcv.AqIntDoubleMap_count(self, x)

    def erase(self, *args):
        return _pyaqcv.AqIntDoubleMap_erase(self, *args)

    def find(self, x):
        return _pyaqcv.AqIntDoubleMap_find(self, x)

    def lower_bound(self, x):
        return _pyaqcv.AqIntDoubleMap_lower_bound(self, x)

    def upper_bound(self, x):
        return _pyaqcv.AqIntDoubleMap_upper_bound(self, x)
    __swig_destroy__ = _pyaqcv.delete_AqIntDoubleMap

# Register AqIntDoubleMap in _pyaqcv:
_pyaqcv.AqIntDoubleMap_swigregister(AqIntDoubleMap)

class AqCameraModelVec(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _pyaqcv.AqCameraModelVec_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _pyaqcv.AqCameraModelVec___nonzero__(self)

    def __bool__(self):
        return _pyaqcv.AqCameraModelVec___bool__(self)

    def __len__(self):
        return _pyaqcv.AqCameraModelVec___len__(self)

    def __getslice__(self, i, j):
        return _pyaqcv.AqCameraModelVec___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _pyaqcv.AqCameraModelVec___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _pyaqcv.AqCameraModelVec___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _pyaqcv.AqCameraModelVec___delitem__(self, *args)

    def __getitem__(self, *args):
        return _pyaqcv.AqCameraModelVec___getitem__(self, *args)

    def __setitem__(self, *args):
        return _pyaqcv.AqCameraModelVec___setitem__(self, *args)

    def pop(self):
        return _pyaqcv.AqCameraModelVec_pop(self)

    def append(self, x):
        return _pyaqcv.AqCameraModelVec_append(self, x)

    def empty(self):
        return _pyaqcv.AqCameraModelVec_empty(self)

    def size(self):
        return _pyaqcv.AqCameraModelVec_size(self)

    def swap(self, v):
        return _pyaqcv.AqCameraModelVec_swap(self, v)

    def begin(self):
        return _pyaqcv.AqCameraModelVec_begin(self)

    def end(self):
        return _pyaqcv.AqCameraModelVec_end(self)

    def rbegin(self):
        return _pyaqcv.AqCameraModelVec_rbegin(self)

    def rend(self):
        return _pyaqcv.AqCameraModelVec_rend(self)

    def clear(self):
        return _pyaqcv.AqCameraModelVec_clear(self)

    def get_allocator(self):
        return _pyaqcv.AqCameraModelVec_get_allocator(self)

    def pop_back(self):
        return _pyaqcv.AqCameraModelVec_pop_back(self)

    def erase(self, *args):
        return _pyaqcv.AqCameraModelVec_erase(self, *args)

    def __init__(self, *args):
        _pyaqcv.AqCameraModelVec_swiginit(self, _pyaqcv.new_AqCameraModelVec(*args))

    def push_back(self, x):
        return _pyaqcv.AqCameraModelVec_push_back(self, x)

    def front(self):
        return _pyaqcv.AqCameraModelVec_front(self)

    def back(self):
        return _pyaqcv.AqCameraModelVec_back(self)

    def assign(self, n, x):
        return _pyaqcv.AqCameraModelVec_assign(self, n, x)

    def resize(self, *args):
        return _pyaqcv.AqCameraModelVec_resize(self, *args)

    def insert(self, *args):
        return _pyaqcv.AqCameraModelVec_insert(self, *args)

    def reserve(self, n):
        return _pyaqcv.AqCameraModelVec_reserve(self, n)

    def capacity(self):
        return _pyaqcv.AqCameraModelVec_capacity(self)
    __swig_destroy__ = _pyaqcv.delete_AqCameraModelVec

# Register AqCameraModelVec in _pyaqcv:
_pyaqcv.AqCameraModelVec_swigregister(AqCameraModelVec)

class AqIntCameraViewFeaturesMap(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _pyaqcv.AqIntCameraViewFeaturesMap_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _pyaqcv.AqIntCameraViewFeaturesMap___nonzero__(self)

    def __bool__(self):
        return _pyaqcv.AqIntCameraViewFeaturesMap___bool__(self)

    def __len__(self):
        return _pyaqcv.AqIntCameraViewFeaturesMap___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        return _pyaqcv.AqIntCameraViewFeaturesMap___getitem__(self, key)

    def __delitem__(self, key):
        return _pyaqcv.AqIntCameraViewFeaturesMap___delitem__(self, key)

    def has_key(self, key):
        return _pyaqcv.AqIntCameraViewFeaturesMap_has_key(self, key)

    def keys(self):
        return _pyaqcv.AqIntCameraViewFeaturesMap_keys(self)

    def values(self):
        return _pyaqcv.AqIntCameraViewFeaturesMap_values(self)

    def items(self):
        return _pyaqcv.AqIntCameraViewFeaturesMap_items(self)

    def __contains__(self, key):
        return _pyaqcv.AqIntCameraViewFeaturesMap___contains__(self, key)

    def key_iterator(self):
        return _pyaqcv.AqIntCameraViewFeaturesMap_key_iterator(self)

    def value_iterator(self):
        return _pyaqcv.AqIntCameraViewFeaturesMap_value_iterator(self)

    def __setitem__(self, *args):
        return _pyaqcv.AqIntCameraViewFeaturesMap___setitem__(self, *args)

    def asdict(self):
        return _pyaqcv.AqIntCameraViewFeaturesMap_asdict(self)

    def __init__(self, *args):
        _pyaqcv.AqIntCameraViewFeaturesMap_swiginit(self, _pyaqcv.new_AqIntCameraViewFeaturesMap(*args))

    def empty(self):
        return _pyaqcv.AqIntCameraViewFeaturesMap_empty(self)

    def size(self):
        return _pyaqcv.AqIntCameraViewFeaturesMap_size(self)

    def swap(self, v):
        return _pyaqcv.AqIntCameraViewFeaturesMap_swap(self, v)

    def begin(self):
        return _pyaqcv.AqIntCameraViewFeaturesMap_begin(self)

    def end(self):
        return _pyaqcv.AqIntCameraViewFeaturesMap_end(self)

    def rbegin(self):
        return _pyaqcv.AqIntCameraViewFeaturesMap_rbegin(self)

    def rend(self):
        return _pyaqcv.AqIntCameraViewFeaturesMap_rend(self)

    def clear(self):
        return _pyaqcv.AqIntCameraViewFeaturesMap_clear(self)

    def get_allocator(self):
        return _pyaqcv.AqIntCameraViewFeaturesMap_get_allocator(self)

    def count(self, x):
        return _pyaqcv.AqIntCameraViewFeaturesMap_count(self, x)

    def erase(self, *args):
        return _pyaqcv.AqIntCameraViewFeaturesMap_erase(self, *args)

    def find(self, x):
        return _pyaqcv.AqIntCameraViewFeaturesMap_find(self, x)

    def lower_bound(self, x):
        return _pyaqcv.AqIntCameraViewFeaturesMap_lower_bound(self, x)

    def upper_bound(self, x):
        return _pyaqcv.AqIntCameraViewFeaturesMap_upper_bound(self, x)
    __swig_destroy__ = _pyaqcv.delete_AqIntCameraViewFeaturesMap

# Register AqIntCameraViewFeaturesMap in _pyaqcv:
_pyaqcv.AqIntCameraViewFeaturesMap_swigregister(AqIntCameraViewFeaturesMap)

class AqIntCameraViewFeaturesMapVec(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _pyaqcv.AqIntCameraViewFeaturesMapVec_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _pyaqcv.AqIntCameraViewFeaturesMapVec___nonzero__(self)

    def __bool__(self):
        return _pyaqcv.AqIntCameraViewFeaturesMapVec___bool__(self)

    def __len__(self):
        return _pyaqcv.AqIntCameraViewFeaturesMapVec___len__(self)

    def __getslice__(self, i, j):
        return _pyaqcv.AqIntCameraViewFeaturesMapVec___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _pyaqcv.AqIntCameraViewFeaturesMapVec___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _pyaqcv.AqIntCameraViewFeaturesMapVec___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _pyaqcv.AqIntCameraViewFeaturesMapVec___delitem__(self, *args)

    def __getitem__(self, *args):
        return _pyaqcv.AqIntCameraViewFeaturesMapVec___getitem__(self, *args)

    def __setitem__(self, *args):
        return _pyaqcv.AqIntCameraViewFeaturesMapVec___setitem__(self, *args)

    def pop(self):
        return _pyaqcv.AqIntCameraViewFeaturesMapVec_pop(self)

    def append(self, x):
        return _pyaqcv.AqIntCameraViewFeaturesMapVec_append(self, x)

    def empty(self):
        return _pyaqcv.AqIntCameraViewFeaturesMapVec_empty(self)

    def size(self):
        return _pyaqcv.AqIntCameraViewFeaturesMapVec_size(self)

    def swap(self, v):
        return _pyaqcv.AqIntCameraViewFeaturesMapVec_swap(self, v)

    def begin(self):
        return _pyaqcv.AqIntCameraViewFeaturesMapVec_begin(self)

    def end(self):
        return _pyaqcv.AqIntCameraViewFeaturesMapVec_end(self)

    def rbegin(self):
        return _pyaqcv.AqIntCameraViewFeaturesMapVec_rbegin(self)

    def rend(self):
        return _pyaqcv.AqIntCameraViewFeaturesMapVec_rend(self)

    def clear(self):
        return _pyaqcv.AqIntCameraViewFeaturesMapVec_clear(self)

    def get_allocator(self):
        return _pyaqcv.AqIntCameraViewFeaturesMapVec_get_allocator(self)

    def pop_back(self):
        return _pyaqcv.AqIntCameraViewFeaturesMapVec_pop_back(self)

    def erase(self, *args):
        return _pyaqcv.AqIntCameraViewFeaturesMapVec_erase(self, *args)

    def __init__(self, *args):
        _pyaqcv.AqIntCameraViewFeaturesMapVec_swiginit(self, _pyaqcv.new_AqIntCameraViewFeaturesMapVec(*args))

    def push_back(self, x):
        return _pyaqcv.AqIntCameraViewFeaturesMapVec_push_back(self, x)

    def front(self):
        return _pyaqcv.AqIntCameraViewFeaturesMapVec_front(self)

    def back(self):
        return _pyaqcv.AqIntCameraViewFeaturesMapVec_back(self)

    def assign(self, n, x):
        return _pyaqcv.AqIntCameraViewFeaturesMapVec_assign(self, n, x)

    def resize(self, *args):
        return _pyaqcv.AqIntCameraViewFeaturesMapVec_resize(self, *args)

    def insert(self, *args):
        return _pyaqcv.AqIntCameraViewFeaturesMapVec_insert(self, *args)

    def reserve(self, n):
        return _pyaqcv.AqIntCameraViewFeaturesMapVec_reserve(self, n)

    def capacity(self):
        return _pyaqcv.AqIntCameraViewFeaturesMapVec_capacity(self)
    __swig_destroy__ = _pyaqcv.delete_AqIntCameraViewFeaturesMapVec

# Register AqIntCameraViewFeaturesMapVec in _pyaqcv:
_pyaqcv.AqIntCameraViewFeaturesMapVec_swigregister(AqIntCameraViewFeaturesMapVec)

class AqBlobVec(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _pyaqcv.AqBlobVec_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _pyaqcv.AqBlobVec___nonzero__(self)

    def __bool__(self):
        return _pyaqcv.AqBlobVec___bool__(self)

    def __len__(self):
        return _pyaqcv.AqBlobVec___len__(self)

    def __getslice__(self, i, j):
        return _pyaqcv.AqBlobVec___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _pyaqcv.AqBlobVec___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _pyaqcv.AqBlobVec___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _pyaqcv.AqBlobVec___delitem__(self, *args)

    def __getitem__(self, *args):
        return _pyaqcv.AqBlobVec___getitem__(self, *args)

    def __setitem__(self, *args):
        return _pyaqcv.AqBlobVec___setitem__(self, *args)

    def pop(self):
        return _pyaqcv.AqBlobVec_pop(self)

    def append(self, x):
        return _pyaqcv.AqBlobVec_append(self, x)

    def empty(self):
        return _pyaqcv.AqBlobVec_empty(self)

    def size(self):
        return _pyaqcv.AqBlobVec_size(self)

    def swap(self, v):
        return _pyaqcv.AqBlobVec_swap(self, v)

    def begin(self):
        return _pyaqcv.AqBlobVec_begin(self)

    def end(self):
        return _pyaqcv.AqBlobVec_end(self)

    def rbegin(self):
        return _pyaqcv.AqBlobVec_rbegin(self)

    def rend(self):
        return _pyaqcv.AqBlobVec_rend(self)

    def clear(self):
        return _pyaqcv.AqBlobVec_clear(self)

    def get_allocator(self):
        return _pyaqcv.AqBlobVec_get_allocator(self)

    def pop_back(self):
        return _pyaqcv.AqBlobVec_pop_back(self)

    def erase(self, *args):
        return _pyaqcv.AqBlobVec_erase(self, *args)

    def __init__(self, *args):
        _pyaqcv.AqBlobVec_swiginit(self, _pyaqcv.new_AqBlobVec(*args))

    def push_back(self, x):
        return _pyaqcv.AqBlobVec_push_back(self, x)

    def front(self):
        return _pyaqcv.AqBlobVec_front(self)

    def back(self):
        return _pyaqcv.AqBlobVec_back(self)

    def assign(self, n, x):
        return _pyaqcv.AqBlobVec_assign(self, n, x)

    def resize(self, *args):
        return _pyaqcv.AqBlobVec_resize(self, *args)

    def insert(self, *args):
        return _pyaqcv.AqBlobVec_insert(self, *args)

    def reserve(self, n):
        return _pyaqcv.AqBlobVec_reserve(self, n)

    def capacity(self):
        return _pyaqcv.AqBlobVec_capacity(self)
    __swig_destroy__ = _pyaqcv.delete_AqBlobVec

# Register AqBlobVec in _pyaqcv:
_pyaqcv.AqBlobVec_swigregister(AqBlobVec)

class AqBlobExcVec(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _pyaqcv.AqBlobExcVec_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _pyaqcv.AqBlobExcVec___nonzero__(self)

    def __bool__(self):
        return _pyaqcv.AqBlobExcVec___bool__(self)

    def __len__(self):
        return _pyaqcv.AqBlobExcVec___len__(self)

    def __getslice__(self, i, j):
        return _pyaqcv.AqBlobExcVec___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _pyaqcv.AqBlobExcVec___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _pyaqcv.AqBlobExcVec___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _pyaqcv.AqBlobExcVec___delitem__(self, *args)

    def __getitem__(self, *args):
        return _pyaqcv.AqBlobExcVec___getitem__(self, *args)

    def __setitem__(self, *args):
        return _pyaqcv.AqBlobExcVec___setitem__(self, *args)

    def pop(self):
        return _pyaqcv.AqBlobExcVec_pop(self)

    def append(self, x):
        return _pyaqcv.AqBlobExcVec_append(self, x)

    def empty(self):
        return _pyaqcv.AqBlobExcVec_empty(self)

    def size(self):
        return _pyaqcv.AqBlobExcVec_size(self)

    def swap(self, v):
        return _pyaqcv.AqBlobExcVec_swap(self, v)

    def begin(self):
        return _pyaqcv.AqBlobExcVec_begin(self)

    def end(self):
        return _pyaqcv.AqBlobExcVec_end(self)

    def rbegin(self):
        return _pyaqcv.AqBlobExcVec_rbegin(self)

    def rend(self):
        return _pyaqcv.AqBlobExcVec_rend(self)

    def clear(self):
        return _pyaqcv.AqBlobExcVec_clear(self)

    def get_allocator(self):
        return _pyaqcv.AqBlobExcVec_get_allocator(self)

    def pop_back(self):
        return _pyaqcv.AqBlobExcVec_pop_back(self)

    def erase(self, *args):
        return _pyaqcv.AqBlobExcVec_erase(self, *args)

    def __init__(self, *args):
        _pyaqcv.AqBlobExcVec_swiginit(self, _pyaqcv.new_AqBlobExcVec(*args))

    def push_back(self, x):
        return _pyaqcv.AqBlobExcVec_push_back(self, x)

    def front(self):
        return _pyaqcv.AqBlobExcVec_front(self)

    def back(self):
        return _pyaqcv.AqBlobExcVec_back(self)

    def assign(self, n, x):
        return _pyaqcv.AqBlobExcVec_assign(self, n, x)

    def resize(self, *args):
        return _pyaqcv.AqBlobExcVec_resize(self, *args)

    def insert(self, *args):
        return _pyaqcv.AqBlobExcVec_insert(self, *args)

    def reserve(self, n):
        return _pyaqcv.AqBlobExcVec_reserve(self, n)

    def capacity(self):
        return _pyaqcv.AqBlobExcVec_capacity(self)
    __swig_destroy__ = _pyaqcv.delete_AqBlobExcVec

# Register AqBlobExcVec in _pyaqcv:
_pyaqcv.AqBlobExcVec_swigregister(AqBlobExcVec)

class AqBlobMorphOpTypeVec(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _pyaqcv.AqBlobMorphOpTypeVec_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _pyaqcv.AqBlobMorphOpTypeVec___nonzero__(self)

    def __bool__(self):
        return _pyaqcv.AqBlobMorphOpTypeVec___bool__(self)

    def __len__(self):
        return _pyaqcv.AqBlobMorphOpTypeVec___len__(self)

    def __getslice__(self, i, j):
        return _pyaqcv.AqBlobMorphOpTypeVec___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _pyaqcv.AqBlobMorphOpTypeVec___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _pyaqcv.AqBlobMorphOpTypeVec___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _pyaqcv.AqBlobMorphOpTypeVec___delitem__(self, *args)

    def __getitem__(self, *args):
        return _pyaqcv.AqBlobMorphOpTypeVec___getitem__(self, *args)

    def __setitem__(self, *args):
        return _pyaqcv.AqBlobMorphOpTypeVec___setitem__(self, *args)

    def pop(self):
        return _pyaqcv.AqBlobMorphOpTypeVec_pop(self)

    def append(self, x):
        return _pyaqcv.AqBlobMorphOpTypeVec_append(self, x)

    def empty(self):
        return _pyaqcv.AqBlobMorphOpTypeVec_empty(self)

    def size(self):
        return _pyaqcv.AqBlobMorphOpTypeVec_size(self)

    def swap(self, v):
        return _pyaqcv.AqBlobMorphOpTypeVec_swap(self, v)

    def begin(self):
        return _pyaqcv.AqBlobMorphOpTypeVec_begin(self)

    def end(self):
        return _pyaqcv.AqBlobMorphOpTypeVec_end(self)

    def rbegin(self):
        return _pyaqcv.AqBlobMorphOpTypeVec_rbegin(self)

    def rend(self):
        return _pyaqcv.AqBlobMorphOpTypeVec_rend(self)

    def clear(self):
        return _pyaqcv.AqBlobMorphOpTypeVec_clear(self)

    def get_allocator(self):
        return _pyaqcv.AqBlobMorphOpTypeVec_get_allocator(self)

    def pop_back(self):
        return _pyaqcv.AqBlobMorphOpTypeVec_pop_back(self)

    def erase(self, *args):
        return _pyaqcv.AqBlobMorphOpTypeVec_erase(self, *args)

    def __init__(self, *args):
        _pyaqcv.AqBlobMorphOpTypeVec_swiginit(self, _pyaqcv.new_AqBlobMorphOpTypeVec(*args))

    def push_back(self, x):
        return _pyaqcv.AqBlobMorphOpTypeVec_push_back(self, x)

    def front(self):
        return _pyaqcv.AqBlobMorphOpTypeVec_front(self)

    def back(self):
        return _pyaqcv.AqBlobMorphOpTypeVec_back(self)

    def assign(self, n, x):
        return _pyaqcv.AqBlobMorphOpTypeVec_assign(self, n, x)

    def resize(self, *args):
        return _pyaqcv.AqBlobMorphOpTypeVec_resize(self, *args)

    def insert(self, *args):
        return _pyaqcv.AqBlobMorphOpTypeVec_insert(self, *args)

    def reserve(self, n):
        return _pyaqcv.AqBlobMorphOpTypeVec_reserve(self, n)

    def capacity(self):
        return _pyaqcv.AqBlobMorphOpTypeVec_capacity(self)
    __swig_destroy__ = _pyaqcv.delete_AqBlobMorphOpTypeVec

# Register AqBlobMorphOpTypeVec in _pyaqcv:
_pyaqcv.AqBlobMorphOpTypeVec_swigregister(AqBlobMorphOpTypeVec)

class AqTemplateMatchResultVec(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _pyaqcv.AqTemplateMatchResultVec_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _pyaqcv.AqTemplateMatchResultVec___nonzero__(self)

    def __bool__(self):
        return _pyaqcv.AqTemplateMatchResultVec___bool__(self)

    def __len__(self):
        return _pyaqcv.AqTemplateMatchResultVec___len__(self)

    def __getslice__(self, i, j):
        return _pyaqcv.AqTemplateMatchResultVec___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _pyaqcv.AqTemplateMatchResultVec___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _pyaqcv.AqTemplateMatchResultVec___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _pyaqcv.AqTemplateMatchResultVec___delitem__(self, *args)

    def __getitem__(self, *args):
        return _pyaqcv.AqTemplateMatchResultVec___getitem__(self, *args)

    def __setitem__(self, *args):
        return _pyaqcv.AqTemplateMatchResultVec___setitem__(self, *args)

    def pop(self):
        return _pyaqcv.AqTemplateMatchResultVec_pop(self)

    def append(self, x):
        return _pyaqcv.AqTemplateMatchResultVec_append(self, x)

    def empty(self):
        return _pyaqcv.AqTemplateMatchResultVec_empty(self)

    def size(self):
        return _pyaqcv.AqTemplateMatchResultVec_size(self)

    def swap(self, v):
        return _pyaqcv.AqTemplateMatchResultVec_swap(self, v)

    def begin(self):
        return _pyaqcv.AqTemplateMatchResultVec_begin(self)

    def end(self):
        return _pyaqcv.AqTemplateMatchResultVec_end(self)

    def rbegin(self):
        return _pyaqcv.AqTemplateMatchResultVec_rbegin(self)

    def rend(self):
        return _pyaqcv.AqTemplateMatchResultVec_rend(self)

    def clear(self):
        return _pyaqcv.AqTemplateMatchResultVec_clear(self)

    def get_allocator(self):
        return _pyaqcv.AqTemplateMatchResultVec_get_allocator(self)

    def pop_back(self):
        return _pyaqcv.AqTemplateMatchResultVec_pop_back(self)

    def erase(self, *args):
        return _pyaqcv.AqTemplateMatchResultVec_erase(self, *args)

    def __init__(self, *args):
        _pyaqcv.AqTemplateMatchResultVec_swiginit(self, _pyaqcv.new_AqTemplateMatchResultVec(*args))

    def push_back(self, x):
        return _pyaqcv.AqTemplateMatchResultVec_push_back(self, x)

    def front(self):
        return _pyaqcv.AqTemplateMatchResultVec_front(self)

    def back(self):
        return _pyaqcv.AqTemplateMatchResultVec_back(self)

    def assign(self, n, x):
        return _pyaqcv.AqTemplateMatchResultVec_assign(self, n, x)

    def resize(self, *args):
        return _pyaqcv.AqTemplateMatchResultVec_resize(self, *args)

    def insert(self, *args):
        return _pyaqcv.AqTemplateMatchResultVec_insert(self, *args)

    def reserve(self, n):
        return _pyaqcv.AqTemplateMatchResultVec_reserve(self, n)

    def capacity(self):
        return _pyaqcv.AqTemplateMatchResultVec_capacity(self)
    __swig_destroy__ = _pyaqcv.delete_AqTemplateMatchResultVec

# Register AqTemplateMatchResultVec in _pyaqcv:
_pyaqcv.AqTemplateMatchResultVec_swigregister(AqTemplateMatchResultVec)

class AqRegionMatchResultVec(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _pyaqcv.AqRegionMatchResultVec_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _pyaqcv.AqRegionMatchResultVec___nonzero__(self)

    def __bool__(self):
        return _pyaqcv.AqRegionMatchResultVec___bool__(self)

    def __len__(self):
        return _pyaqcv.AqRegionMatchResultVec___len__(self)

    def __getslice__(self, i, j):
        return _pyaqcv.AqRegionMatchResultVec___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _pyaqcv.AqRegionMatchResultVec___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _pyaqcv.AqRegionMatchResultVec___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _pyaqcv.AqRegionMatchResultVec___delitem__(self, *args)

    def __getitem__(self, *args):
        return _pyaqcv.AqRegionMatchResultVec___getitem__(self, *args)

    def __setitem__(self, *args):
        return _pyaqcv.AqRegionMatchResultVec___setitem__(self, *args)

    def pop(self):
        return _pyaqcv.AqRegionMatchResultVec_pop(self)

    def append(self, x):
        return _pyaqcv.AqRegionMatchResultVec_append(self, x)

    def empty(self):
        return _pyaqcv.AqRegionMatchResultVec_empty(self)

    def size(self):
        return _pyaqcv.AqRegionMatchResultVec_size(self)

    def swap(self, v):
        return _pyaqcv.AqRegionMatchResultVec_swap(self, v)

    def begin(self):
        return _pyaqcv.AqRegionMatchResultVec_begin(self)

    def end(self):
        return _pyaqcv.AqRegionMatchResultVec_end(self)

    def rbegin(self):
        return _pyaqcv.AqRegionMatchResultVec_rbegin(self)

    def rend(self):
        return _pyaqcv.AqRegionMatchResultVec_rend(self)

    def clear(self):
        return _pyaqcv.AqRegionMatchResultVec_clear(self)

    def get_allocator(self):
        return _pyaqcv.AqRegionMatchResultVec_get_allocator(self)

    def pop_back(self):
        return _pyaqcv.AqRegionMatchResultVec_pop_back(self)

    def erase(self, *args):
        return _pyaqcv.AqRegionMatchResultVec_erase(self, *args)

    def __init__(self, *args):
        _pyaqcv.AqRegionMatchResultVec_swiginit(self, _pyaqcv.new_AqRegionMatchResultVec(*args))

    def push_back(self, x):
        return _pyaqcv.AqRegionMatchResultVec_push_back(self, x)

    def front(self):
        return _pyaqcv.AqRegionMatchResultVec_front(self)

    def back(self):
        return _pyaqcv.AqRegionMatchResultVec_back(self)

    def assign(self, n, x):
        return _pyaqcv.AqRegionMatchResultVec_assign(self, n, x)

    def resize(self, *args):
        return _pyaqcv.AqRegionMatchResultVec_resize(self, *args)

    def insert(self, *args):
        return _pyaqcv.AqRegionMatchResultVec_insert(self, *args)

    def reserve(self, n):
        return _pyaqcv.AqRegionMatchResultVec_reserve(self, n)

    def capacity(self):
        return _pyaqcv.AqRegionMatchResultVec_capacity(self)
    __swig_destroy__ = _pyaqcv.delete_AqRegionMatchResultVec

# Register AqRegionMatchResultVec in _pyaqcv:
_pyaqcv.AqRegionMatchResultVec_swigregister(AqRegionMatchResultVec)

class AqPhotometricResultTypeVec(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _pyaqcv.AqPhotometricResultTypeVec_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _pyaqcv.AqPhotometricResultTypeVec___nonzero__(self)

    def __bool__(self):
        return _pyaqcv.AqPhotometricResultTypeVec___bool__(self)

    def __len__(self):
        return _pyaqcv.AqPhotometricResultTypeVec___len__(self)

    def __getslice__(self, i, j):
        return _pyaqcv.AqPhotometricResultTypeVec___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _pyaqcv.AqPhotometricResultTypeVec___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _pyaqcv.AqPhotometricResultTypeVec___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _pyaqcv.AqPhotometricResultTypeVec___delitem__(self, *args)

    def __getitem__(self, *args):
        return _pyaqcv.AqPhotometricResultTypeVec___getitem__(self, *args)

    def __setitem__(self, *args):
        return _pyaqcv.AqPhotometricResultTypeVec___setitem__(self, *args)

    def pop(self):
        return _pyaqcv.AqPhotometricResultTypeVec_pop(self)

    def append(self, x):
        return _pyaqcv.AqPhotometricResultTypeVec_append(self, x)

    def empty(self):
        return _pyaqcv.AqPhotometricResultTypeVec_empty(self)

    def size(self):
        return _pyaqcv.AqPhotometricResultTypeVec_size(self)

    def swap(self, v):
        return _pyaqcv.AqPhotometricResultTypeVec_swap(self, v)

    def begin(self):
        return _pyaqcv.AqPhotometricResultTypeVec_begin(self)

    def end(self):
        return _pyaqcv.AqPhotometricResultTypeVec_end(self)

    def rbegin(self):
        return _pyaqcv.AqPhotometricResultTypeVec_rbegin(self)

    def rend(self):
        return _pyaqcv.AqPhotometricResultTypeVec_rend(self)

    def clear(self):
        return _pyaqcv.AqPhotometricResultTypeVec_clear(self)

    def get_allocator(self):
        return _pyaqcv.AqPhotometricResultTypeVec_get_allocator(self)

    def pop_back(self):
        return _pyaqcv.AqPhotometricResultTypeVec_pop_back(self)

    def erase(self, *args):
        return _pyaqcv.AqPhotometricResultTypeVec_erase(self, *args)

    def __init__(self, *args):
        _pyaqcv.AqPhotometricResultTypeVec_swiginit(self, _pyaqcv.new_AqPhotometricResultTypeVec(*args))

    def push_back(self, x):
        return _pyaqcv.AqPhotometricResultTypeVec_push_back(self, x)

    def front(self):
        return _pyaqcv.AqPhotometricResultTypeVec_front(self)

    def back(self):
        return _pyaqcv.AqPhotometricResultTypeVec_back(self)

    def assign(self, n, x):
        return _pyaqcv.AqPhotometricResultTypeVec_assign(self, n, x)

    def resize(self, *args):
        return _pyaqcv.AqPhotometricResultTypeVec_resize(self, *args)

    def insert(self, *args):
        return _pyaqcv.AqPhotometricResultTypeVec_insert(self, *args)

    def reserve(self, n):
        return _pyaqcv.AqPhotometricResultTypeVec_reserve(self, n)

    def capacity(self):
        return _pyaqcv.AqPhotometricResultTypeVec_capacity(self)
    __swig_destroy__ = _pyaqcv.delete_AqPhotometricResultTypeVec

# Register AqPhotometricResultTypeVec in _pyaqcv:
_pyaqcv.AqPhotometricResultTypeVec_swigregister(AqPhotometricResultTypeVec)

class AqKeyPointVec(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _pyaqcv.AqKeyPointVec_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _pyaqcv.AqKeyPointVec___nonzero__(self)

    def __bool__(self):
        return _pyaqcv.AqKeyPointVec___bool__(self)

    def __len__(self):
        return _pyaqcv.AqKeyPointVec___len__(self)

    def __getslice__(self, i, j):
        return _pyaqcv.AqKeyPointVec___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _pyaqcv.AqKeyPointVec___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _pyaqcv.AqKeyPointVec___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _pyaqcv.AqKeyPointVec___delitem__(self, *args)

    def __getitem__(self, *args):
        return _pyaqcv.AqKeyPointVec___getitem__(self, *args)

    def __setitem__(self, *args):
        return _pyaqcv.AqKeyPointVec___setitem__(self, *args)

    def pop(self):
        return _pyaqcv.AqKeyPointVec_pop(self)

    def append(self, x):
        return _pyaqcv.AqKeyPointVec_append(self, x)

    def empty(self):
        return _pyaqcv.AqKeyPointVec_empty(self)

    def size(self):
        return _pyaqcv.AqKeyPointVec_size(self)

    def swap(self, v):
        return _pyaqcv.AqKeyPointVec_swap(self, v)

    def begin(self):
        return _pyaqcv.AqKeyPointVec_begin(self)

    def end(self):
        return _pyaqcv.AqKeyPointVec_end(self)

    def rbegin(self):
        return _pyaqcv.AqKeyPointVec_rbegin(self)

    def rend(self):
        return _pyaqcv.AqKeyPointVec_rend(self)

    def clear(self):
        return _pyaqcv.AqKeyPointVec_clear(self)

    def get_allocator(self):
        return _pyaqcv.AqKeyPointVec_get_allocator(self)

    def pop_back(self):
        return _pyaqcv.AqKeyPointVec_pop_back(self)

    def erase(self, *args):
        return _pyaqcv.AqKeyPointVec_erase(self, *args)

    def __init__(self, *args):
        _pyaqcv.AqKeyPointVec_swiginit(self, _pyaqcv.new_AqKeyPointVec(*args))

    def push_back(self, x):
        return _pyaqcv.AqKeyPointVec_push_back(self, x)

    def front(self):
        return _pyaqcv.AqKeyPointVec_front(self)

    def back(self):
        return _pyaqcv.AqKeyPointVec_back(self)

    def assign(self, n, x):
        return _pyaqcv.AqKeyPointVec_assign(self, n, x)

    def resize(self, *args):
        return _pyaqcv.AqKeyPointVec_resize(self, *args)

    def insert(self, *args):
        return _pyaqcv.AqKeyPointVec_insert(self, *args)

    def reserve(self, n):
        return _pyaqcv.AqKeyPointVec_reserve(self, n)

    def capacity(self):
        return _pyaqcv.AqKeyPointVec_capacity(self)
    __swig_destroy__ = _pyaqcv.delete_AqKeyPointVec

# Register AqKeyPointVec in _pyaqcv:
_pyaqcv.AqKeyPointVec_swigregister(AqKeyPointVec)

class AqLabelRegionVec(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _pyaqcv.AqLabelRegionVec_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _pyaqcv.AqLabelRegionVec___nonzero__(self)

    def __bool__(self):
        return _pyaqcv.AqLabelRegionVec___bool__(self)

    def __len__(self):
        return _pyaqcv.AqLabelRegionVec___len__(self)

    def __getslice__(self, i, j):
        return _pyaqcv.AqLabelRegionVec___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _pyaqcv.AqLabelRegionVec___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _pyaqcv.AqLabelRegionVec___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _pyaqcv.AqLabelRegionVec___delitem__(self, *args)

    def __getitem__(self, *args):
        return _pyaqcv.AqLabelRegionVec___getitem__(self, *args)

    def __setitem__(self, *args):
        return _pyaqcv.AqLabelRegionVec___setitem__(self, *args)

    def pop(self):
        return _pyaqcv.AqLabelRegionVec_pop(self)

    def append(self, x):
        return _pyaqcv.AqLabelRegionVec_append(self, x)

    def empty(self):
        return _pyaqcv.AqLabelRegionVec_empty(self)

    def size(self):
        return _pyaqcv.AqLabelRegionVec_size(self)

    def swap(self, v):
        return _pyaqcv.AqLabelRegionVec_swap(self, v)

    def begin(self):
        return _pyaqcv.AqLabelRegionVec_begin(self)

    def end(self):
        return _pyaqcv.AqLabelRegionVec_end(self)

    def rbegin(self):
        return _pyaqcv.AqLabelRegionVec_rbegin(self)

    def rend(self):
        return _pyaqcv.AqLabelRegionVec_rend(self)

    def clear(self):
        return _pyaqcv.AqLabelRegionVec_clear(self)

    def get_allocator(self):
        return _pyaqcv.AqLabelRegionVec_get_allocator(self)

    def pop_back(self):
        return _pyaqcv.AqLabelRegionVec_pop_back(self)

    def erase(self, *args):
        return _pyaqcv.AqLabelRegionVec_erase(self, *args)

    def __init__(self, *args):
        _pyaqcv.AqLabelRegionVec_swiginit(self, _pyaqcv.new_AqLabelRegionVec(*args))

    def push_back(self, x):
        return _pyaqcv.AqLabelRegionVec_push_back(self, x)

    def front(self):
        return _pyaqcv.AqLabelRegionVec_front(self)

    def back(self):
        return _pyaqcv.AqLabelRegionVec_back(self)

    def assign(self, n, x):
        return _pyaqcv.AqLabelRegionVec_assign(self, n, x)

    def resize(self, *args):
        return _pyaqcv.AqLabelRegionVec_resize(self, *args)

    def insert(self, *args):
        return _pyaqcv.AqLabelRegionVec_insert(self, *args)

    def reserve(self, n):
        return _pyaqcv.AqLabelRegionVec_reserve(self, n)

    def capacity(self):
        return _pyaqcv.AqLabelRegionVec_capacity(self)
    __swig_destroy__ = _pyaqcv.delete_AqLabelRegionVec

# Register AqLabelRegionVec in _pyaqcv:
_pyaqcv.AqLabelRegionVec_swigregister(AqLabelRegionVec)

class AqEdgeFlawVec(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _pyaqcv.AqEdgeFlawVec_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _pyaqcv.AqEdgeFlawVec___nonzero__(self)

    def __bool__(self):
        return _pyaqcv.AqEdgeFlawVec___bool__(self)

    def __len__(self):
        return _pyaqcv.AqEdgeFlawVec___len__(self)

    def __getslice__(self, i, j):
        return _pyaqcv.AqEdgeFlawVec___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _pyaqcv.AqEdgeFlawVec___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _pyaqcv.AqEdgeFlawVec___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _pyaqcv.AqEdgeFlawVec___delitem__(self, *args)

    def __getitem__(self, *args):
        return _pyaqcv.AqEdgeFlawVec___getitem__(self, *args)

    def __setitem__(self, *args):
        return _pyaqcv.AqEdgeFlawVec___setitem__(self, *args)

    def pop(self):
        return _pyaqcv.AqEdgeFlawVec_pop(self)

    def append(self, x):
        return _pyaqcv.AqEdgeFlawVec_append(self, x)

    def empty(self):
        return _pyaqcv.AqEdgeFlawVec_empty(self)

    def size(self):
        return _pyaqcv.AqEdgeFlawVec_size(self)

    def swap(self, v):
        return _pyaqcv.AqEdgeFlawVec_swap(self, v)

    def begin(self):
        return _pyaqcv.AqEdgeFlawVec_begin(self)

    def end(self):
        return _pyaqcv.AqEdgeFlawVec_end(self)

    def rbegin(self):
        return _pyaqcv.AqEdgeFlawVec_rbegin(self)

    def rend(self):
        return _pyaqcv.AqEdgeFlawVec_rend(self)

    def clear(self):
        return _pyaqcv.AqEdgeFlawVec_clear(self)

    def get_allocator(self):
        return _pyaqcv.AqEdgeFlawVec_get_allocator(self)

    def pop_back(self):
        return _pyaqcv.AqEdgeFlawVec_pop_back(self)

    def erase(self, *args):
        return _pyaqcv.AqEdgeFlawVec_erase(self, *args)

    def __init__(self, *args):
        _pyaqcv.AqEdgeFlawVec_swiginit(self, _pyaqcv.new_AqEdgeFlawVec(*args))

    def push_back(self, x):
        return _pyaqcv.AqEdgeFlawVec_push_back(self, x)

    def front(self):
        return _pyaqcv.AqEdgeFlawVec_front(self)

    def back(self):
        return _pyaqcv.AqEdgeFlawVec_back(self)

    def assign(self, n, x):
        return _pyaqcv.AqEdgeFlawVec_assign(self, n, x)

    def resize(self, *args):
        return _pyaqcv.AqEdgeFlawVec_resize(self, *args)

    def insert(self, *args):
        return _pyaqcv.AqEdgeFlawVec_insert(self, *args)

    def reserve(self, n):
        return _pyaqcv.AqEdgeFlawVec_reserve(self, n)

    def capacity(self):
        return _pyaqcv.AqEdgeFlawVec_capacity(self)
    __swig_destroy__ = _pyaqcv.delete_AqEdgeFlawVec

# Register AqEdgeFlawVec in _pyaqcv:
_pyaqcv.AqEdgeFlawVec_swigregister(AqEdgeFlawVec)

class AqCaliperSingleEdgeResultVec(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _pyaqcv.AqCaliperSingleEdgeResultVec_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _pyaqcv.AqCaliperSingleEdgeResultVec___nonzero__(self)

    def __bool__(self):
        return _pyaqcv.AqCaliperSingleEdgeResultVec___bool__(self)

    def __len__(self):
        return _pyaqcv.AqCaliperSingleEdgeResultVec___len__(self)

    def __getslice__(self, i, j):
        return _pyaqcv.AqCaliperSingleEdgeResultVec___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _pyaqcv.AqCaliperSingleEdgeResultVec___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _pyaqcv.AqCaliperSingleEdgeResultVec___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _pyaqcv.AqCaliperSingleEdgeResultVec___delitem__(self, *args)

    def __getitem__(self, *args):
        return _pyaqcv.AqCaliperSingleEdgeResultVec___getitem__(self, *args)

    def __setitem__(self, *args):
        return _pyaqcv.AqCaliperSingleEdgeResultVec___setitem__(self, *args)

    def pop(self):
        return _pyaqcv.AqCaliperSingleEdgeResultVec_pop(self)

    def append(self, x):
        return _pyaqcv.AqCaliperSingleEdgeResultVec_append(self, x)

    def empty(self):
        return _pyaqcv.AqCaliperSingleEdgeResultVec_empty(self)

    def size(self):
        return _pyaqcv.AqCaliperSingleEdgeResultVec_size(self)

    def swap(self, v):
        return _pyaqcv.AqCaliperSingleEdgeResultVec_swap(self, v)

    def begin(self):
        return _pyaqcv.AqCaliperSingleEdgeResultVec_begin(self)

    def end(self):
        return _pyaqcv.AqCaliperSingleEdgeResultVec_end(self)

    def rbegin(self):
        return _pyaqcv.AqCaliperSingleEdgeResultVec_rbegin(self)

    def rend(self):
        return _pyaqcv.AqCaliperSingleEdgeResultVec_rend(self)

    def clear(self):
        return _pyaqcv.AqCaliperSingleEdgeResultVec_clear(self)

    def get_allocator(self):
        return _pyaqcv.AqCaliperSingleEdgeResultVec_get_allocator(self)

    def pop_back(self):
        return _pyaqcv.AqCaliperSingleEdgeResultVec_pop_back(self)

    def erase(self, *args):
        return _pyaqcv.AqCaliperSingleEdgeResultVec_erase(self, *args)

    def __init__(self, *args):
        _pyaqcv.AqCaliperSingleEdgeResultVec_swiginit(self, _pyaqcv.new_AqCaliperSingleEdgeResultVec(*args))

    def push_back(self, x):
        return _pyaqcv.AqCaliperSingleEdgeResultVec_push_back(self, x)

    def front(self):
        return _pyaqcv.AqCaliperSingleEdgeResultVec_front(self)

    def back(self):
        return _pyaqcv.AqCaliperSingleEdgeResultVec_back(self)

    def assign(self, n, x):
        return _pyaqcv.AqCaliperSingleEdgeResultVec_assign(self, n, x)

    def resize(self, *args):
        return _pyaqcv.AqCaliperSingleEdgeResultVec_resize(self, *args)

    def insert(self, *args):
        return _pyaqcv.AqCaliperSingleEdgeResultVec_insert(self, *args)

    def reserve(self, n):
        return _pyaqcv.AqCaliperSingleEdgeResultVec_reserve(self, n)

    def capacity(self):
        return _pyaqcv.AqCaliperSingleEdgeResultVec_capacity(self)
    __swig_destroy__ = _pyaqcv.delete_AqCaliperSingleEdgeResultVec

# Register AqCaliperSingleEdgeResultVec in _pyaqcv:
_pyaqcv.AqCaliperSingleEdgeResultVec_swigregister(AqCaliperSingleEdgeResultVec)

class AqCaliperSingleEdgeResultVecVec(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _pyaqcv.AqCaliperSingleEdgeResultVecVec_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _pyaqcv.AqCaliperSingleEdgeResultVecVec___nonzero__(self)

    def __bool__(self):
        return _pyaqcv.AqCaliperSingleEdgeResultVecVec___bool__(self)

    def __len__(self):
        return _pyaqcv.AqCaliperSingleEdgeResultVecVec___len__(self)

    def __getslice__(self, i, j):
        return _pyaqcv.AqCaliperSingleEdgeResultVecVec___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _pyaqcv.AqCaliperSingleEdgeResultVecVec___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _pyaqcv.AqCaliperSingleEdgeResultVecVec___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _pyaqcv.AqCaliperSingleEdgeResultVecVec___delitem__(self, *args)

    def __getitem__(self, *args):
        return _pyaqcv.AqCaliperSingleEdgeResultVecVec___getitem__(self, *args)

    def __setitem__(self, *args):
        return _pyaqcv.AqCaliperSingleEdgeResultVecVec___setitem__(self, *args)

    def pop(self):
        return _pyaqcv.AqCaliperSingleEdgeResultVecVec_pop(self)

    def append(self, x):
        return _pyaqcv.AqCaliperSingleEdgeResultVecVec_append(self, x)

    def empty(self):
        return _pyaqcv.AqCaliperSingleEdgeResultVecVec_empty(self)

    def size(self):
        return _pyaqcv.AqCaliperSingleEdgeResultVecVec_size(self)

    def swap(self, v):
        return _pyaqcv.AqCaliperSingleEdgeResultVecVec_swap(self, v)

    def begin(self):
        return _pyaqcv.AqCaliperSingleEdgeResultVecVec_begin(self)

    def end(self):
        return _pyaqcv.AqCaliperSingleEdgeResultVecVec_end(self)

    def rbegin(self):
        return _pyaqcv.AqCaliperSingleEdgeResultVecVec_rbegin(self)

    def rend(self):
        return _pyaqcv.AqCaliperSingleEdgeResultVecVec_rend(self)

    def clear(self):
        return _pyaqcv.AqCaliperSingleEdgeResultVecVec_clear(self)

    def get_allocator(self):
        return _pyaqcv.AqCaliperSingleEdgeResultVecVec_get_allocator(self)

    def pop_back(self):
        return _pyaqcv.AqCaliperSingleEdgeResultVecVec_pop_back(self)

    def erase(self, *args):
        return _pyaqcv.AqCaliperSingleEdgeResultVecVec_erase(self, *args)

    def __init__(self, *args):
        _pyaqcv.AqCaliperSingleEdgeResultVecVec_swiginit(self, _pyaqcv.new_AqCaliperSingleEdgeResultVecVec(*args))

    def push_back(self, x):
        return _pyaqcv.AqCaliperSingleEdgeResultVecVec_push_back(self, x)

    def front(self):
        return _pyaqcv.AqCaliperSingleEdgeResultVecVec_front(self)

    def back(self):
        return _pyaqcv.AqCaliperSingleEdgeResultVecVec_back(self)

    def assign(self, n, x):
        return _pyaqcv.AqCaliperSingleEdgeResultVecVec_assign(self, n, x)

    def resize(self, *args):
        return _pyaqcv.AqCaliperSingleEdgeResultVecVec_resize(self, *args)

    def insert(self, *args):
        return _pyaqcv.AqCaliperSingleEdgeResultVecVec_insert(self, *args)

    def reserve(self, n):
        return _pyaqcv.AqCaliperSingleEdgeResultVecVec_reserve(self, n)

    def capacity(self):
        return _pyaqcv.AqCaliperSingleEdgeResultVecVec_capacity(self)
    __swig_destroy__ = _pyaqcv.delete_AqCaliperSingleEdgeResultVecVec

# Register AqCaliperSingleEdgeResultVecVec in _pyaqcv:
_pyaqcv.AqCaliperSingleEdgeResultVecVec_swigregister(AqCaliperSingleEdgeResultVecVec)

class AqCaliperDualEdgeResultVec(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _pyaqcv.AqCaliperDualEdgeResultVec_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _pyaqcv.AqCaliperDualEdgeResultVec___nonzero__(self)

    def __bool__(self):
        return _pyaqcv.AqCaliperDualEdgeResultVec___bool__(self)

    def __len__(self):
        return _pyaqcv.AqCaliperDualEdgeResultVec___len__(self)

    def __getslice__(self, i, j):
        return _pyaqcv.AqCaliperDualEdgeResultVec___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _pyaqcv.AqCaliperDualEdgeResultVec___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _pyaqcv.AqCaliperDualEdgeResultVec___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _pyaqcv.AqCaliperDualEdgeResultVec___delitem__(self, *args)

    def __getitem__(self, *args):
        return _pyaqcv.AqCaliperDualEdgeResultVec___getitem__(self, *args)

    def __setitem__(self, *args):
        return _pyaqcv.AqCaliperDualEdgeResultVec___setitem__(self, *args)

    def pop(self):
        return _pyaqcv.AqCaliperDualEdgeResultVec_pop(self)

    def append(self, x):
        return _pyaqcv.AqCaliperDualEdgeResultVec_append(self, x)

    def empty(self):
        return _pyaqcv.AqCaliperDualEdgeResultVec_empty(self)

    def size(self):
        return _pyaqcv.AqCaliperDualEdgeResultVec_size(self)

    def swap(self, v):
        return _pyaqcv.AqCaliperDualEdgeResultVec_swap(self, v)

    def begin(self):
        return _pyaqcv.AqCaliperDualEdgeResultVec_begin(self)

    def end(self):
        return _pyaqcv.AqCaliperDualEdgeResultVec_end(self)

    def rbegin(self):
        return _pyaqcv.AqCaliperDualEdgeResultVec_rbegin(self)

    def rend(self):
        return _pyaqcv.AqCaliperDualEdgeResultVec_rend(self)

    def clear(self):
        return _pyaqcv.AqCaliperDualEdgeResultVec_clear(self)

    def get_allocator(self):
        return _pyaqcv.AqCaliperDualEdgeResultVec_get_allocator(self)

    def pop_back(self):
        return _pyaqcv.AqCaliperDualEdgeResultVec_pop_back(self)

    def erase(self, *args):
        return _pyaqcv.AqCaliperDualEdgeResultVec_erase(self, *args)

    def __init__(self, *args):
        _pyaqcv.AqCaliperDualEdgeResultVec_swiginit(self, _pyaqcv.new_AqCaliperDualEdgeResultVec(*args))

    def push_back(self, x):
        return _pyaqcv.AqCaliperDualEdgeResultVec_push_back(self, x)

    def front(self):
        return _pyaqcv.AqCaliperDualEdgeResultVec_front(self)

    def back(self):
        return _pyaqcv.AqCaliperDualEdgeResultVec_back(self)

    def assign(self, n, x):
        return _pyaqcv.AqCaliperDualEdgeResultVec_assign(self, n, x)

    def resize(self, *args):
        return _pyaqcv.AqCaliperDualEdgeResultVec_resize(self, *args)

    def insert(self, *args):
        return _pyaqcv.AqCaliperDualEdgeResultVec_insert(self, *args)

    def reserve(self, n):
        return _pyaqcv.AqCaliperDualEdgeResultVec_reserve(self, n)

    def capacity(self):
        return _pyaqcv.AqCaliperDualEdgeResultVec_capacity(self)
    __swig_destroy__ = _pyaqcv.delete_AqCaliperDualEdgeResultVec

# Register AqCaliperDualEdgeResultVec in _pyaqcv:
_pyaqcv.AqCaliperDualEdgeResultVec_swigregister(AqCaliperDualEdgeResultVec)

class AqCaliperDualEdgeResultVecVec(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _pyaqcv.AqCaliperDualEdgeResultVecVec_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _pyaqcv.AqCaliperDualEdgeResultVecVec___nonzero__(self)

    def __bool__(self):
        return _pyaqcv.AqCaliperDualEdgeResultVecVec___bool__(self)

    def __len__(self):
        return _pyaqcv.AqCaliperDualEdgeResultVecVec___len__(self)

    def __getslice__(self, i, j):
        return _pyaqcv.AqCaliperDualEdgeResultVecVec___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _pyaqcv.AqCaliperDualEdgeResultVecVec___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _pyaqcv.AqCaliperDualEdgeResultVecVec___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _pyaqcv.AqCaliperDualEdgeResultVecVec___delitem__(self, *args)

    def __getitem__(self, *args):
        return _pyaqcv.AqCaliperDualEdgeResultVecVec___getitem__(self, *args)

    def __setitem__(self, *args):
        return _pyaqcv.AqCaliperDualEdgeResultVecVec___setitem__(self, *args)

    def pop(self):
        return _pyaqcv.AqCaliperDualEdgeResultVecVec_pop(self)

    def append(self, x):
        return _pyaqcv.AqCaliperDualEdgeResultVecVec_append(self, x)

    def empty(self):
        return _pyaqcv.AqCaliperDualEdgeResultVecVec_empty(self)

    def size(self):
        return _pyaqcv.AqCaliperDualEdgeResultVecVec_size(self)

    def swap(self, v):
        return _pyaqcv.AqCaliperDualEdgeResultVecVec_swap(self, v)

    def begin(self):
        return _pyaqcv.AqCaliperDualEdgeResultVecVec_begin(self)

    def end(self):
        return _pyaqcv.AqCaliperDualEdgeResultVecVec_end(self)

    def rbegin(self):
        return _pyaqcv.AqCaliperDualEdgeResultVecVec_rbegin(self)

    def rend(self):
        return _pyaqcv.AqCaliperDualEdgeResultVecVec_rend(self)

    def clear(self):
        return _pyaqcv.AqCaliperDualEdgeResultVecVec_clear(self)

    def get_allocator(self):
        return _pyaqcv.AqCaliperDualEdgeResultVecVec_get_allocator(self)

    def pop_back(self):
        return _pyaqcv.AqCaliperDualEdgeResultVecVec_pop_back(self)

    def erase(self, *args):
        return _pyaqcv.AqCaliperDualEdgeResultVecVec_erase(self, *args)

    def __init__(self, *args):
        _pyaqcv.AqCaliperDualEdgeResultVecVec_swiginit(self, _pyaqcv.new_AqCaliperDualEdgeResultVecVec(*args))

    def push_back(self, x):
        return _pyaqcv.AqCaliperDualEdgeResultVecVec_push_back(self, x)

    def front(self):
        return _pyaqcv.AqCaliperDualEdgeResultVecVec_front(self)

    def back(self):
        return _pyaqcv.AqCaliperDualEdgeResultVecVec_back(self)

    def assign(self, n, x):
        return _pyaqcv.AqCaliperDualEdgeResultVecVec_assign(self, n, x)

    def resize(self, *args):
        return _pyaqcv.AqCaliperDualEdgeResultVecVec_resize(self, *args)

    def insert(self, *args):
        return _pyaqcv.AqCaliperDualEdgeResultVecVec_insert(self, *args)

    def reserve(self, n):
        return _pyaqcv.AqCaliperDualEdgeResultVecVec_reserve(self, n)

    def capacity(self):
        return _pyaqcv.AqCaliperDualEdgeResultVecVec_capacity(self)
    __swig_destroy__ = _pyaqcv.delete_AqCaliperDualEdgeResultVecVec

# Register AqCaliperDualEdgeResultVecVec in _pyaqcv:
_pyaqcv.AqCaliperDualEdgeResultVecVec_swigregister(AqCaliperDualEdgeResultVecVec)

class AqCircularAnnulusSectionVec(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _pyaqcv.AqCircularAnnulusSectionVec_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _pyaqcv.AqCircularAnnulusSectionVec___nonzero__(self)

    def __bool__(self):
        return _pyaqcv.AqCircularAnnulusSectionVec___bool__(self)

    def __len__(self):
        return _pyaqcv.AqCircularAnnulusSectionVec___len__(self)

    def __getslice__(self, i, j):
        return _pyaqcv.AqCircularAnnulusSectionVec___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _pyaqcv.AqCircularAnnulusSectionVec___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _pyaqcv.AqCircularAnnulusSectionVec___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _pyaqcv.AqCircularAnnulusSectionVec___delitem__(self, *args)

    def __getitem__(self, *args):
        return _pyaqcv.AqCircularAnnulusSectionVec___getitem__(self, *args)

    def __setitem__(self, *args):
        return _pyaqcv.AqCircularAnnulusSectionVec___setitem__(self, *args)

    def pop(self):
        return _pyaqcv.AqCircularAnnulusSectionVec_pop(self)

    def append(self, x):
        return _pyaqcv.AqCircularAnnulusSectionVec_append(self, x)

    def empty(self):
        return _pyaqcv.AqCircularAnnulusSectionVec_empty(self)

    def size(self):
        return _pyaqcv.AqCircularAnnulusSectionVec_size(self)

    def swap(self, v):
        return _pyaqcv.AqCircularAnnulusSectionVec_swap(self, v)

    def begin(self):
        return _pyaqcv.AqCircularAnnulusSectionVec_begin(self)

    def end(self):
        return _pyaqcv.AqCircularAnnulusSectionVec_end(self)

    def rbegin(self):
        return _pyaqcv.AqCircularAnnulusSectionVec_rbegin(self)

    def rend(self):
        return _pyaqcv.AqCircularAnnulusSectionVec_rend(self)

    def clear(self):
        return _pyaqcv.AqCircularAnnulusSectionVec_clear(self)

    def get_allocator(self):
        return _pyaqcv.AqCircularAnnulusSectionVec_get_allocator(self)

    def pop_back(self):
        return _pyaqcv.AqCircularAnnulusSectionVec_pop_back(self)

    def erase(self, *args):
        return _pyaqcv.AqCircularAnnulusSectionVec_erase(self, *args)

    def __init__(self, *args):
        _pyaqcv.AqCircularAnnulusSectionVec_swiginit(self, _pyaqcv.new_AqCircularAnnulusSectionVec(*args))

    def push_back(self, x):
        return _pyaqcv.AqCircularAnnulusSectionVec_push_back(self, x)

    def front(self):
        return _pyaqcv.AqCircularAnnulusSectionVec_front(self)

    def back(self):
        return _pyaqcv.AqCircularAnnulusSectionVec_back(self)

    def assign(self, n, x):
        return _pyaqcv.AqCircularAnnulusSectionVec_assign(self, n, x)

    def resize(self, *args):
        return _pyaqcv.AqCircularAnnulusSectionVec_resize(self, *args)

    def insert(self, *args):
        return _pyaqcv.AqCircularAnnulusSectionVec_insert(self, *args)

    def reserve(self, n):
        return _pyaqcv.AqCircularAnnulusSectionVec_reserve(self, n)

    def capacity(self):
        return _pyaqcv.AqCircularAnnulusSectionVec_capacity(self)
    __swig_destroy__ = _pyaqcv.delete_AqCircularAnnulusSectionVec

# Register AqCircularAnnulusSectionVec in _pyaqcv:
_pyaqcv.AqCircularAnnulusSectionVec_swigregister(AqCircularAnnulusSectionVec)

class AqEdgeWidthVec(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _pyaqcv.AqEdgeWidthVec_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _pyaqcv.AqEdgeWidthVec___nonzero__(self)

    def __bool__(self):
        return _pyaqcv.AqEdgeWidthVec___bool__(self)

    def __len__(self):
        return _pyaqcv.AqEdgeWidthVec___len__(self)

    def __getslice__(self, i, j):
        return _pyaqcv.AqEdgeWidthVec___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _pyaqcv.AqEdgeWidthVec___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _pyaqcv.AqEdgeWidthVec___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _pyaqcv.AqEdgeWidthVec___delitem__(self, *args)

    def __getitem__(self, *args):
        return _pyaqcv.AqEdgeWidthVec___getitem__(self, *args)

    def __setitem__(self, *args):
        return _pyaqcv.AqEdgeWidthVec___setitem__(self, *args)

    def pop(self):
        return _pyaqcv.AqEdgeWidthVec_pop(self)

    def append(self, x):
        return _pyaqcv.AqEdgeWidthVec_append(self, x)

    def empty(self):
        return _pyaqcv.AqEdgeWidthVec_empty(self)

    def size(self):
        return _pyaqcv.AqEdgeWidthVec_size(self)

    def swap(self, v):
        return _pyaqcv.AqEdgeWidthVec_swap(self, v)

    def begin(self):
        return _pyaqcv.AqEdgeWidthVec_begin(self)

    def end(self):
        return _pyaqcv.AqEdgeWidthVec_end(self)

    def rbegin(self):
        return _pyaqcv.AqEdgeWidthVec_rbegin(self)

    def rend(self):
        return _pyaqcv.AqEdgeWidthVec_rend(self)

    def clear(self):
        return _pyaqcv.AqEdgeWidthVec_clear(self)

    def get_allocator(self):
        return _pyaqcv.AqEdgeWidthVec_get_allocator(self)

    def pop_back(self):
        return _pyaqcv.AqEdgeWidthVec_pop_back(self)

    def erase(self, *args):
        return _pyaqcv.AqEdgeWidthVec_erase(self, *args)

    def __init__(self, *args):
        _pyaqcv.AqEdgeWidthVec_swiginit(self, _pyaqcv.new_AqEdgeWidthVec(*args))

    def push_back(self, x):
        return _pyaqcv.AqEdgeWidthVec_push_back(self, x)

    def front(self):
        return _pyaqcv.AqEdgeWidthVec_front(self)

    def back(self):
        return _pyaqcv.AqEdgeWidthVec_back(self)

    def assign(self, n, x):
        return _pyaqcv.AqEdgeWidthVec_assign(self, n, x)

    def resize(self, *args):
        return _pyaqcv.AqEdgeWidthVec_resize(self, *args)

    def insert(self, *args):
        return _pyaqcv.AqEdgeWidthVec_insert(self, *args)

    def reserve(self, n):
        return _pyaqcv.AqEdgeWidthVec_reserve(self, n)

    def capacity(self):
        return _pyaqcv.AqEdgeWidthVec_capacity(self)
    __swig_destroy__ = _pyaqcv.delete_AqEdgeWidthVec

# Register AqEdgeWidthVec in _pyaqcv:
_pyaqcv.AqEdgeWidthVec_swigregister(AqEdgeWidthVec)

class AqEdgeWidthVecVev(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _pyaqcv.AqEdgeWidthVecVev_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _pyaqcv.AqEdgeWidthVecVev___nonzero__(self)

    def __bool__(self):
        return _pyaqcv.AqEdgeWidthVecVev___bool__(self)

    def __len__(self):
        return _pyaqcv.AqEdgeWidthVecVev___len__(self)

    def __getslice__(self, i, j):
        return _pyaqcv.AqEdgeWidthVecVev___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _pyaqcv.AqEdgeWidthVecVev___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _pyaqcv.AqEdgeWidthVecVev___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _pyaqcv.AqEdgeWidthVecVev___delitem__(self, *args)

    def __getitem__(self, *args):
        return _pyaqcv.AqEdgeWidthVecVev___getitem__(self, *args)

    def __setitem__(self, *args):
        return _pyaqcv.AqEdgeWidthVecVev___setitem__(self, *args)

    def pop(self):
        return _pyaqcv.AqEdgeWidthVecVev_pop(self)

    def append(self, x):
        return _pyaqcv.AqEdgeWidthVecVev_append(self, x)

    def empty(self):
        return _pyaqcv.AqEdgeWidthVecVev_empty(self)

    def size(self):
        return _pyaqcv.AqEdgeWidthVecVev_size(self)

    def swap(self, v):
        return _pyaqcv.AqEdgeWidthVecVev_swap(self, v)

    def begin(self):
        return _pyaqcv.AqEdgeWidthVecVev_begin(self)

    def end(self):
        return _pyaqcv.AqEdgeWidthVecVev_end(self)

    def rbegin(self):
        return _pyaqcv.AqEdgeWidthVecVev_rbegin(self)

    def rend(self):
        return _pyaqcv.AqEdgeWidthVecVev_rend(self)

    def clear(self):
        return _pyaqcv.AqEdgeWidthVecVev_clear(self)

    def get_allocator(self):
        return _pyaqcv.AqEdgeWidthVecVev_get_allocator(self)

    def pop_back(self):
        return _pyaqcv.AqEdgeWidthVecVev_pop_back(self)

    def erase(self, *args):
        return _pyaqcv.AqEdgeWidthVecVev_erase(self, *args)

    def __init__(self, *args):
        _pyaqcv.AqEdgeWidthVecVev_swiginit(self, _pyaqcv.new_AqEdgeWidthVecVev(*args))

    def push_back(self, x):
        return _pyaqcv.AqEdgeWidthVecVev_push_back(self, x)

    def front(self):
        return _pyaqcv.AqEdgeWidthVecVev_front(self)

    def back(self):
        return _pyaqcv.AqEdgeWidthVecVev_back(self)

    def assign(self, n, x):
        return _pyaqcv.AqEdgeWidthVecVev_assign(self, n, x)

    def resize(self, *args):
        return _pyaqcv.AqEdgeWidthVecVev_resize(self, *args)

    def insert(self, *args):
        return _pyaqcv.AqEdgeWidthVecVev_insert(self, *args)

    def reserve(self, n):
        return _pyaqcv.AqEdgeWidthVecVev_reserve(self, n)

    def capacity(self):
        return _pyaqcv.AqEdgeWidthVecVev_capacity(self)
    __swig_destroy__ = _pyaqcv.delete_AqEdgeWidthVecVev

# Register AqEdgeWidthVecVev in _pyaqcv:
_pyaqcv.AqEdgeWidthVecVev_swigregister(AqEdgeWidthVecVev)

class AQEdgePolarityTypeVec(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _pyaqcv.AQEdgePolarityTypeVec_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _pyaqcv.AQEdgePolarityTypeVec___nonzero__(self)

    def __bool__(self):
        return _pyaqcv.AQEdgePolarityTypeVec___bool__(self)

    def __len__(self):
        return _pyaqcv.AQEdgePolarityTypeVec___len__(self)

    def __getslice__(self, i, j):
        return _pyaqcv.AQEdgePolarityTypeVec___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _pyaqcv.AQEdgePolarityTypeVec___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _pyaqcv.AQEdgePolarityTypeVec___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _pyaqcv.AQEdgePolarityTypeVec___delitem__(self, *args)

    def __getitem__(self, *args):
        return _pyaqcv.AQEdgePolarityTypeVec___getitem__(self, *args)

    def __setitem__(self, *args):
        return _pyaqcv.AQEdgePolarityTypeVec___setitem__(self, *args)

    def pop(self):
        return _pyaqcv.AQEdgePolarityTypeVec_pop(self)

    def append(self, x):
        return _pyaqcv.AQEdgePolarityTypeVec_append(self, x)

    def empty(self):
        return _pyaqcv.AQEdgePolarityTypeVec_empty(self)

    def size(self):
        return _pyaqcv.AQEdgePolarityTypeVec_size(self)

    def swap(self, v):
        return _pyaqcv.AQEdgePolarityTypeVec_swap(self, v)

    def begin(self):
        return _pyaqcv.AQEdgePolarityTypeVec_begin(self)

    def end(self):
        return _pyaqcv.AQEdgePolarityTypeVec_end(self)

    def rbegin(self):
        return _pyaqcv.AQEdgePolarityTypeVec_rbegin(self)

    def rend(self):
        return _pyaqcv.AQEdgePolarityTypeVec_rend(self)

    def clear(self):
        return _pyaqcv.AQEdgePolarityTypeVec_clear(self)

    def get_allocator(self):
        return _pyaqcv.AQEdgePolarityTypeVec_get_allocator(self)

    def pop_back(self):
        return _pyaqcv.AQEdgePolarityTypeVec_pop_back(self)

    def erase(self, *args):
        return _pyaqcv.AQEdgePolarityTypeVec_erase(self, *args)

    def __init__(self, *args):
        _pyaqcv.AQEdgePolarityTypeVec_swiginit(self, _pyaqcv.new_AQEdgePolarityTypeVec(*args))

    def push_back(self, x):
        return _pyaqcv.AQEdgePolarityTypeVec_push_back(self, x)

    def front(self):
        return _pyaqcv.AQEdgePolarityTypeVec_front(self)

    def back(self):
        return _pyaqcv.AQEdgePolarityTypeVec_back(self)

    def assign(self, n, x):
        return _pyaqcv.AQEdgePolarityTypeVec_assign(self, n, x)

    def resize(self, *args):
        return _pyaqcv.AQEdgePolarityTypeVec_resize(self, *args)

    def insert(self, *args):
        return _pyaqcv.AQEdgePolarityTypeVec_insert(self, *args)

    def reserve(self, n):
        return _pyaqcv.AQEdgePolarityTypeVec_reserve(self, n)

    def capacity(self):
        return _pyaqcv.AQEdgePolarityTypeVec_capacity(self)
    __swig_destroy__ = _pyaqcv.delete_AQEdgePolarityTypeVec

# Register AQEdgePolarityTypeVec in _pyaqcv:
_pyaqcv.AQEdgePolarityTypeVec_swigregister(AQEdgePolarityTypeVec)

class AqBarTypeVec(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _pyaqcv.AqBarTypeVec_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _pyaqcv.AqBarTypeVec___nonzero__(self)

    def __bool__(self):
        return _pyaqcv.AqBarTypeVec___bool__(self)

    def __len__(self):
        return _pyaqcv.AqBarTypeVec___len__(self)

    def __getslice__(self, i, j):
        return _pyaqcv.AqBarTypeVec___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _pyaqcv.AqBarTypeVec___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _pyaqcv.AqBarTypeVec___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _pyaqcv.AqBarTypeVec___delitem__(self, *args)

    def __getitem__(self, *args):
        return _pyaqcv.AqBarTypeVec___getitem__(self, *args)

    def __setitem__(self, *args):
        return _pyaqcv.AqBarTypeVec___setitem__(self, *args)

    def pop(self):
        return _pyaqcv.AqBarTypeVec_pop(self)

    def append(self, x):
        return _pyaqcv.AqBarTypeVec_append(self, x)

    def empty(self):
        return _pyaqcv.AqBarTypeVec_empty(self)

    def size(self):
        return _pyaqcv.AqBarTypeVec_size(self)

    def swap(self, v):
        return _pyaqcv.AqBarTypeVec_swap(self, v)

    def begin(self):
        return _pyaqcv.AqBarTypeVec_begin(self)

    def end(self):
        return _pyaqcv.AqBarTypeVec_end(self)

    def rbegin(self):
        return _pyaqcv.AqBarTypeVec_rbegin(self)

    def rend(self):
        return _pyaqcv.AqBarTypeVec_rend(self)

    def clear(self):
        return _pyaqcv.AqBarTypeVec_clear(self)

    def get_allocator(self):
        return _pyaqcv.AqBarTypeVec_get_allocator(self)

    def pop_back(self):
        return _pyaqcv.AqBarTypeVec_pop_back(self)

    def erase(self, *args):
        return _pyaqcv.AqBarTypeVec_erase(self, *args)

    def __init__(self, *args):
        _pyaqcv.AqBarTypeVec_swiginit(self, _pyaqcv.new_AqBarTypeVec(*args))

    def push_back(self, x):
        return _pyaqcv.AqBarTypeVec_push_back(self, x)

    def front(self):
        return _pyaqcv.AqBarTypeVec_front(self)

    def back(self):
        return _pyaqcv.AqBarTypeVec_back(self)

    def assign(self, n, x):
        return _pyaqcv.AqBarTypeVec_assign(self, n, x)

    def resize(self, *args):
        return _pyaqcv.AqBarTypeVec_resize(self, *args)

    def insert(self, *args):
        return _pyaqcv.AqBarTypeVec_insert(self, *args)

    def reserve(self, n):
        return _pyaqcv.AqBarTypeVec_reserve(self, n)

    def capacity(self):
        return _pyaqcv.AqBarTypeVec_capacity(self)
    __swig_destroy__ = _pyaqcv.delete_AqBarTypeVec

# Register AqBarTypeVec in _pyaqcv:
_pyaqcv.AqBarTypeVec_swigregister(AqBarTypeVec)

class AqBarcodeResultVec(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _pyaqcv.AqBarcodeResultVec_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _pyaqcv.AqBarcodeResultVec___nonzero__(self)

    def __bool__(self):
        return _pyaqcv.AqBarcodeResultVec___bool__(self)

    def __len__(self):
        return _pyaqcv.AqBarcodeResultVec___len__(self)

    def __getslice__(self, i, j):
        return _pyaqcv.AqBarcodeResultVec___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _pyaqcv.AqBarcodeResultVec___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _pyaqcv.AqBarcodeResultVec___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _pyaqcv.AqBarcodeResultVec___delitem__(self, *args)

    def __getitem__(self, *args):
        return _pyaqcv.AqBarcodeResultVec___getitem__(self, *args)

    def __setitem__(self, *args):
        return _pyaqcv.AqBarcodeResultVec___setitem__(self, *args)

    def pop(self):
        return _pyaqcv.AqBarcodeResultVec_pop(self)

    def append(self, x):
        return _pyaqcv.AqBarcodeResultVec_append(self, x)

    def empty(self):
        return _pyaqcv.AqBarcodeResultVec_empty(self)

    def size(self):
        return _pyaqcv.AqBarcodeResultVec_size(self)

    def swap(self, v):
        return _pyaqcv.AqBarcodeResultVec_swap(self, v)

    def begin(self):
        return _pyaqcv.AqBarcodeResultVec_begin(self)

    def end(self):
        return _pyaqcv.AqBarcodeResultVec_end(self)

    def rbegin(self):
        return _pyaqcv.AqBarcodeResultVec_rbegin(self)

    def rend(self):
        return _pyaqcv.AqBarcodeResultVec_rend(self)

    def clear(self):
        return _pyaqcv.AqBarcodeResultVec_clear(self)

    def get_allocator(self):
        return _pyaqcv.AqBarcodeResultVec_get_allocator(self)

    def pop_back(self):
        return _pyaqcv.AqBarcodeResultVec_pop_back(self)

    def erase(self, *args):
        return _pyaqcv.AqBarcodeResultVec_erase(self, *args)

    def __init__(self, *args):
        _pyaqcv.AqBarcodeResultVec_swiginit(self, _pyaqcv.new_AqBarcodeResultVec(*args))

    def push_back(self, x):
        return _pyaqcv.AqBarcodeResultVec_push_back(self, x)

    def front(self):
        return _pyaqcv.AqBarcodeResultVec_front(self)

    def back(self):
        return _pyaqcv.AqBarcodeResultVec_back(self)

    def assign(self, n, x):
        return _pyaqcv.AqBarcodeResultVec_assign(self, n, x)

    def resize(self, *args):
        return _pyaqcv.AqBarcodeResultVec_resize(self, *args)

    def insert(self, *args):
        return _pyaqcv.AqBarcodeResultVec_insert(self, *args)

    def reserve(self, n):
        return _pyaqcv.AqBarcodeResultVec_reserve(self, n)

    def capacity(self):
        return _pyaqcv.AqBarcodeResultVec_capacity(self)
    __swig_destroy__ = _pyaqcv.delete_AqBarcodeResultVec

# Register AqBarcodeResultVec in _pyaqcv:
_pyaqcv.AqBarcodeResultVec_swigregister(AqBarcodeResultVec)

class AqCode2DResultVec(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _pyaqcv.AqCode2DResultVec_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _pyaqcv.AqCode2DResultVec___nonzero__(self)

    def __bool__(self):
        return _pyaqcv.AqCode2DResultVec___bool__(self)

    def __len__(self):
        return _pyaqcv.AqCode2DResultVec___len__(self)

    def __getslice__(self, i, j):
        return _pyaqcv.AqCode2DResultVec___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _pyaqcv.AqCode2DResultVec___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _pyaqcv.AqCode2DResultVec___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _pyaqcv.AqCode2DResultVec___delitem__(self, *args)

    def __getitem__(self, *args):
        return _pyaqcv.AqCode2DResultVec___getitem__(self, *args)

    def __setitem__(self, *args):
        return _pyaqcv.AqCode2DResultVec___setitem__(self, *args)

    def pop(self):
        return _pyaqcv.AqCode2DResultVec_pop(self)

    def append(self, x):
        return _pyaqcv.AqCode2DResultVec_append(self, x)

    def empty(self):
        return _pyaqcv.AqCode2DResultVec_empty(self)

    def size(self):
        return _pyaqcv.AqCode2DResultVec_size(self)

    def swap(self, v):
        return _pyaqcv.AqCode2DResultVec_swap(self, v)

    def begin(self):
        return _pyaqcv.AqCode2DResultVec_begin(self)

    def end(self):
        return _pyaqcv.AqCode2DResultVec_end(self)

    def rbegin(self):
        return _pyaqcv.AqCode2DResultVec_rbegin(self)

    def rend(self):
        return _pyaqcv.AqCode2DResultVec_rend(self)

    def clear(self):
        return _pyaqcv.AqCode2DResultVec_clear(self)

    def get_allocator(self):
        return _pyaqcv.AqCode2DResultVec_get_allocator(self)

    def pop_back(self):
        return _pyaqcv.AqCode2DResultVec_pop_back(self)

    def erase(self, *args):
        return _pyaqcv.AqCode2DResultVec_erase(self, *args)

    def __init__(self, *args):
        _pyaqcv.AqCode2DResultVec_swiginit(self, _pyaqcv.new_AqCode2DResultVec(*args))

    def push_back(self, x):
        return _pyaqcv.AqCode2DResultVec_push_back(self, x)

    def front(self):
        return _pyaqcv.AqCode2DResultVec_front(self)

    def back(self):
        return _pyaqcv.AqCode2DResultVec_back(self)

    def assign(self, n, x):
        return _pyaqcv.AqCode2DResultVec_assign(self, n, x)

    def resize(self, *args):
        return _pyaqcv.AqCode2DResultVec_resize(self, *args)

    def insert(self, *args):
        return _pyaqcv.AqCode2DResultVec_insert(self, *args)

    def reserve(self, n):
        return _pyaqcv.AqCode2DResultVec_reserve(self, n)

    def capacity(self):
        return _pyaqcv.AqCode2DResultVec_capacity(self)
    __swig_destroy__ = _pyaqcv.delete_AqCode2DResultVec

# Register AqCode2DResultVec in _pyaqcv:
_pyaqcv.AqCode2DResultVec_swigregister(AqCode2DResultVec)

class IGeometry(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    kRadian = _pyaqcv.IGeometry_kRadian
    kSize2f = _pyaqcv.IGeometry_kSize2f
    kSize2i = _pyaqcv.IGeometry_kSize2i
    kPoint2f = _pyaqcv.IGeometry_kPoint2f
    kPoint2i = _pyaqcv.IGeometry_kPoint2i
    kVector2f = _pyaqcv.IGeometry_kVector2f
    kVector2i = _pyaqcv.IGeometry_kVector2i
    kSegment2f = _pyaqcv.IGeometry_kSegment2f
    kSegment2i = _pyaqcv.IGeometry_kSegment2i
    kLine2f = _pyaqcv.IGeometry_kLine2f
    kRay2f = _pyaqcv.IGeometry_kRay2f
    kRay2i = _pyaqcv.IGeometry_kRay2i
    kRing2f = _pyaqcv.IGeometry_kRing2f
    kRing2i = _pyaqcv.IGeometry_kRing2i
    kRect2f = _pyaqcv.IGeometry_kRect2f
    kRect2i = _pyaqcv.IGeometry_kRect2i
    kPolygon2f = _pyaqcv.IGeometry_kPolygon2f
    kPolygon2i = _pyaqcv.IGeometry_kPolygon2i
    kRotateRect2f = _pyaqcv.IGeometry_kRotateRect2f
    kRotateRect2i = _pyaqcv.IGeometry_kRotateRect2i
    kArc2f = _pyaqcv.IGeometry_kArc2f
    kCircle2f = _pyaqcv.IGeometry_kCircle2f
    kCircle2i = _pyaqcv.IGeometry_kCircle2i
    kLineString2f = _pyaqcv.IGeometry_kLineString2f
    kLineString2i = _pyaqcv.IGeometry_kLineString2i
    kMultiPoint2f = _pyaqcv.IGeometry_kMultiPoint2f
    kMultiPoint2i = _pyaqcv.IGeometry_kMultiPoint2i
    kMultiPolygon2f = _pyaqcv.IGeometry_kMultiPolygon2f
    kMultiPolygon2i = _pyaqcv.IGeometry_kMultiPolygon2i
    kEllipse2f = _pyaqcv.IGeometry_kEllipse2f
    kMultiSegment2f = _pyaqcv.IGeometry_kMultiSegment2f
    kMultiLineString2f = _pyaqcv.IGeometry_kMultiLineString2f
    kMultiLineString2i = _pyaqcv.IGeometry_kMultiLineString2i

    def type(self):
        return _pyaqcv.IGeometry_type(self)

    def type_name(self):
        return _pyaqcv.IGeometry_type_name(self)
    __swig_destroy__ = _pyaqcv.delete_IGeometry

# Register IGeometry in _pyaqcv:
_pyaqcv.IGeometry_swigregister(IGeometry)
cvar = _pyaqcv.cvar
kPi = cvar.kPi
kEpsilon = cvar.kEpsilon

class Radian(IGeometry):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def FromDegree(degree):
        return _pyaqcv.Radian_FromDegree(degree)

    def type(self):
        return _pyaqcv.Radian_type(self)

    def __init__(self, radian=0):
        _pyaqcv.Radian_swiginit(self, _pyaqcv.new_Radian(radian))

    def __eq__(self, rhs):
        return _pyaqcv.Radian___eq__(self, rhs)

    def __ne__(self, other):
        return _pyaqcv.Radian___ne__(self, other)

    def __neg__(self):
        return _pyaqcv.Radian___neg__(self)

    def __isub__(self, rhs):
        return _pyaqcv.Radian___isub__(self, rhs)

    def __iadd__(self, rhs):
        return _pyaqcv.Radian___iadd__(self, rhs)

    def __sub__(self, rhs):
        return _pyaqcv.Radian___sub__(self, rhs)

    def __add__(self, rhs):
        return _pyaqcv.Radian___add__(self, rhs)

    def norm(self, *args):
        return _pyaqcv.Radian_norm(self, *args)

    def degree(self):
        return _pyaqcv.Radian_degree(self)

    def from_degree(self, degree):
        return _pyaqcv.Radian_from_degree(self, degree)

    def unit_vector(self):
        return _pyaqcv.Radian_unit_vector(self)
    radian = property(_pyaqcv.Radian_radian_get, _pyaqcv.Radian_radian_set)
    __swig_destroy__ = _pyaqcv.delete_Radian

# Register Radian in _pyaqcv:
_pyaqcv.Radian_swigregister(Radian)

def Radian_FromDegree(degree):
    return _pyaqcv.Radian_FromDegree(degree)

class Vector2f(IGeometry):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _pyaqcv.Vector2f_swiginit(self, _pyaqcv.new_Vector2f(*args))

    def __eq__(self, rhs):
        return _pyaqcv.Vector2f___eq__(self, rhs)

    def __neg__(self):
        return _pyaqcv.Vector2f___neg__(self)

    def __add__(self, rhs):
        return _pyaqcv.Vector2f___add__(self, rhs)

    def __sub__(self, rhs):
        return _pyaqcv.Vector2f___sub__(self, rhs)

    def __truediv__(self, *args):
        return _pyaqcv.Vector2f___truediv__(self, *args)
    __div__ = __truediv__



    def __mul__(self, *args):
        return _pyaqcv.Vector2f___mul__(self, *args)

    def __iadd__(self, rhs):
        return _pyaqcv.Vector2f___iadd__(self, rhs)

    def __isub__(self, rhs):
        return _pyaqcv.Vector2f___isub__(self, rhs)

    def __imul__(self, rhs):
        return _pyaqcv.Vector2f___imul__(self, rhs)

    def __itruediv__(self, *args):
        return _pyaqcv.Vector2f___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def type(self):
        return _pyaqcv.Vector2f_type(self)

    def azimuth(self):
        return _pyaqcv.Vector2f_azimuth(self)

    def length(self):
        return _pyaqcv.Vector2f_length(self)
    x = property(_pyaqcv.Vector2f_x_get, _pyaqcv.Vector2f_x_set)
    y = property(_pyaqcv.Vector2f_y_get, _pyaqcv.Vector2f_y_set)
    __swig_destroy__ = _pyaqcv.delete_Vector2f

# Register Vector2f in _pyaqcv:
_pyaqcv.Vector2f_swigregister(Vector2f)

class Vector2i(IGeometry):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _pyaqcv.Vector2i_swiginit(self, _pyaqcv.new_Vector2i(*args))

    def __eq__(self, rhs):
        return _pyaqcv.Vector2i___eq__(self, rhs)

    def __neg__(self):
        return _pyaqcv.Vector2i___neg__(self)

    def __add__(self, rhs):
        return _pyaqcv.Vector2i___add__(self, rhs)

    def __sub__(self, rhs):
        return _pyaqcv.Vector2i___sub__(self, rhs)

    def __truediv__(self, *args):
        return _pyaqcv.Vector2i___truediv__(self, *args)
    __div__ = __truediv__



    def __mul__(self, *args):
        return _pyaqcv.Vector2i___mul__(self, *args)

    def __iadd__(self, rhs):
        return _pyaqcv.Vector2i___iadd__(self, rhs)

    def __isub__(self, rhs):
        return _pyaqcv.Vector2i___isub__(self, rhs)

    def __imul__(self, rhs):
        return _pyaqcv.Vector2i___imul__(self, rhs)

    def __itruediv__(self, *args):
        return _pyaqcv.Vector2i___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def type(self):
        return _pyaqcv.Vector2i_type(self)

    def azimuth(self):
        return _pyaqcv.Vector2i_azimuth(self)

    def length(self):
        return _pyaqcv.Vector2i_length(self)
    x = property(_pyaqcv.Vector2i_x_get, _pyaqcv.Vector2i_x_set)
    y = property(_pyaqcv.Vector2i_y_get, _pyaqcv.Vector2i_y_set)
    __swig_destroy__ = _pyaqcv.delete_Vector2i

# Register Vector2i in _pyaqcv:
_pyaqcv.Vector2i_swigregister(Vector2i)

class Point2f(IGeometry):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _pyaqcv.Point2f_swiginit(self, _pyaqcv.new_Point2f(*args))

    def __eq__(self, *args):
        return _pyaqcv.Point2f___eq__(self, *args)

    def __add__(self, rhs):
        return _pyaqcv.Point2f___add__(self, rhs)

    def __sub__(self, rhs):
        return _pyaqcv.Point2f___sub__(self, rhs)

    def __truediv__(self, *args):
        return _pyaqcv.Point2f___truediv__(self, *args)
    __div__ = __truediv__



    def __iadd__(self, rhs):
        return _pyaqcv.Point2f___iadd__(self, rhs)

    def __isub__(self, rhs):
        return _pyaqcv.Point2f___isub__(self, rhs)

    def __imul__(self, rhs):
        return _pyaqcv.Point2f___imul__(self, rhs)

    def __itruediv__(self, *args):
        return _pyaqcv.Point2f___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def __mul__(self, *args):
        return _pyaqcv.Point2f___mul__(self, *args)

    def type(self):
        return _pyaqcv.Point2f_type(self)
    x = property(_pyaqcv.Point2f_x_get, _pyaqcv.Point2f_x_set)
    y = property(_pyaqcv.Point2f_y_get, _pyaqcv.Point2f_y_set)
    __swig_destroy__ = _pyaqcv.delete_Point2f

# Register Point2f in _pyaqcv:
_pyaqcv.Point2f_swigregister(Point2f)

class Point2i(IGeometry):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _pyaqcv.Point2i_swiginit(self, _pyaqcv.new_Point2i(*args))

    def __eq__(self, *args):
        return _pyaqcv.Point2i___eq__(self, *args)

    def __add__(self, rhs):
        return _pyaqcv.Point2i___add__(self, rhs)

    def __sub__(self, rhs):
        return _pyaqcv.Point2i___sub__(self, rhs)

    def __truediv__(self, *args):
        return _pyaqcv.Point2i___truediv__(self, *args)
    __div__ = __truediv__



    def __iadd__(self, rhs):
        return _pyaqcv.Point2i___iadd__(self, rhs)

    def __isub__(self, rhs):
        return _pyaqcv.Point2i___isub__(self, rhs)

    def __imul__(self, rhs):
        return _pyaqcv.Point2i___imul__(self, rhs)

    def __itruediv__(self, *args):
        return _pyaqcv.Point2i___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def __mul__(self, *args):
        return _pyaqcv.Point2i___mul__(self, *args)

    def type(self):
        return _pyaqcv.Point2i_type(self)
    x = property(_pyaqcv.Point2i_x_get, _pyaqcv.Point2i_x_set)
    y = property(_pyaqcv.Point2i_y_get, _pyaqcv.Point2i_y_set)
    __swig_destroy__ = _pyaqcv.delete_Point2i

# Register Point2i in _pyaqcv:
_pyaqcv.Point2i_swigregister(Point2i)

class Segment2f(Point2fPair, IGeometry):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _pyaqcv.Segment2f_swiginit(self, _pyaqcv.new_Segment2f(*args))

    def type(self):
        return _pyaqcv.Segment2f_type(self)

    def length(self):
        return _pyaqcv.Segment2f_length(self)

    def in_line(self):
        return _pyaqcv.Segment2f_in_line(self)

    def azimuth(self):
        return _pyaqcv.Segment2f_azimuth(self)

    def is_point(self):
        return _pyaqcv.Segment2f_is_point(self)
    __swig_destroy__ = _pyaqcv.delete_Segment2f

# Register Segment2f in _pyaqcv:
_pyaqcv.Segment2f_swigregister(Segment2f)

class Segment2i(Point2iPair, IGeometry):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _pyaqcv.Segment2i_swiginit(self, _pyaqcv.new_Segment2i(*args))

    def type(self):
        return _pyaqcv.Segment2i_type(self)

    def length(self):
        return _pyaqcv.Segment2i_length(self)

    def in_line(self):
        return _pyaqcv.Segment2i_in_line(self)

    def azimuth(self):
        return _pyaqcv.Segment2i_azimuth(self)

    def is_point(self):
        return _pyaqcv.Segment2i_is_point(self)
    __swig_destroy__ = _pyaqcv.delete_Segment2i

# Register Segment2i in _pyaqcv:
_pyaqcv.Segment2i_swigregister(Segment2i)

class Line2f(IGeometry):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _pyaqcv.Line2f_swiginit(self, _pyaqcv.new_Line2f(*args))

    def type(self):
        return _pyaqcv.Line2f_type(self)

    def passing_point(self):
        return _pyaqcv.Line2f_passing_point(self)

    def azimuth(self):
        return _pyaqcv.Line2f_azimuth(self)

    def intersection_by_y(self, value):
        return _pyaqcv.Line2f_intersection_by_y(self, value)

    def intersection_by_x(self, value):
        return _pyaqcv.Line2f_intersection_by_x(self, value)
    a = property(_pyaqcv.Line2f_a_get, _pyaqcv.Line2f_a_set)
    b = property(_pyaqcv.Line2f_b_get, _pyaqcv.Line2f_b_set)
    c = property(_pyaqcv.Line2f_c_get, _pyaqcv.Line2f_c_set)
    __swig_destroy__ = _pyaqcv.delete_Line2f

# Register Line2f in _pyaqcv:
_pyaqcv.Line2f_swigregister(Line2f)

class Ray2f(IGeometry):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _pyaqcv.Ray2f_swiginit(self, _pyaqcv.new_Ray2f(*args))

    def type(self):
        return _pyaqcv.Ray2f_type(self)

    def azimuth(self):
        return _pyaqcv.Ray2f_azimuth(self)

    def in_line(self):
        return _pyaqcv.Ray2f_in_line(self)
    start = property(_pyaqcv.Ray2f_start_get, _pyaqcv.Ray2f_start_set)
    direction = property(_pyaqcv.Ray2f_direction_get, _pyaqcv.Ray2f_direction_set)
    __swig_destroy__ = _pyaqcv.delete_Ray2f

# Register Ray2f in _pyaqcv:
_pyaqcv.Ray2f_swigregister(Ray2f)

class Ray2i(IGeometry):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _pyaqcv.Ray2i_swiginit(self, _pyaqcv.new_Ray2i(*args))

    def type(self):
        return _pyaqcv.Ray2i_type(self)

    def azimuth(self):
        return _pyaqcv.Ray2i_azimuth(self)

    def in_line(self):
        return _pyaqcv.Ray2i_in_line(self)
    start = property(_pyaqcv.Ray2i_start_get, _pyaqcv.Ray2i_start_set)
    direction = property(_pyaqcv.Ray2i_direction_get, _pyaqcv.Ray2i_direction_set)
    __swig_destroy__ = _pyaqcv.delete_Ray2i

# Register Ray2i in _pyaqcv:
_pyaqcv.Ray2i_swigregister(Ray2i)

class LineString2f(Point2fVec, IGeometry):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _pyaqcv.LineString2f_swiginit(self, _pyaqcv.new_LineString2f(*args))

    def type(self):
        return _pyaqcv.LineString2f_type(self)

    def length(self):
        return _pyaqcv.LineString2f_length(self)
    __swig_destroy__ = _pyaqcv.delete_LineString2f

# Register LineString2f in _pyaqcv:
_pyaqcv.LineString2f_swigregister(LineString2f)

class LineString2i(Point2iVec, IGeometry):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _pyaqcv.LineString2i_swiginit(self, _pyaqcv.new_LineString2i(*args))

    def type(self):
        return _pyaqcv.LineString2i_type(self)

    def length(self):
        return _pyaqcv.LineString2i_length(self)
    __swig_destroy__ = _pyaqcv.delete_LineString2i

# Register LineString2i in _pyaqcv:
_pyaqcv.LineString2i_swigregister(LineString2i)

class Ring2f(Point2fVec, IGeometry):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _pyaqcv.Ring2f_swiginit(self, _pyaqcv.new_Ring2f(*args))

    def type(self):
        return _pyaqcv.Ring2f_type(self)

    def area(self):
        return _pyaqcv.Ring2f_area(self)

    def perimeter(self):
        return _pyaqcv.Ring2f_perimeter(self)
    __swig_destroy__ = _pyaqcv.delete_Ring2f

# Register Ring2f in _pyaqcv:
_pyaqcv.Ring2f_swigregister(Ring2f)

class Ring2i(Point2iVec, IGeometry):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _pyaqcv.Ring2i_swiginit(self, _pyaqcv.new_Ring2i(*args))

    def type(self):
        return _pyaqcv.Ring2i_type(self)

    def area(self):
        return _pyaqcv.Ring2i_area(self)

    def perimeter(self):
        return _pyaqcv.Ring2i_perimeter(self)
    __swig_destroy__ = _pyaqcv.delete_Ring2i

# Register Ring2i in _pyaqcv:
_pyaqcv.Ring2i_swigregister(Ring2i)

class Size2f(IGeometry):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _pyaqcv.Size2f_swiginit(self, _pyaqcv.new_Size2f(*args))

    def __eq__(self, rhs):
        return _pyaqcv.Size2f___eq__(self, rhs)

    def type(self):
        return _pyaqcv.Size2f_type(self)

    def __mul__(self, ratio):
        return _pyaqcv.Size2f___mul__(self, ratio)

    def __truediv__(self, *args):
        return _pyaqcv.Size2f___truediv__(self, *args)
    __div__ = __truediv__



    def __imul__(self, ratio):
        return _pyaqcv.Size2f___imul__(self, ratio)

    def __itruediv__(self, *args):
        return _pyaqcv.Size2f___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def area(self):
        return _pyaqcv.Size2f_area(self)
    w = property(_pyaqcv.Size2f_w_get, _pyaqcv.Size2f_w_set)
    h = property(_pyaqcv.Size2f_h_get, _pyaqcv.Size2f_h_set)
    __swig_destroy__ = _pyaqcv.delete_Size2f

# Register Size2f in _pyaqcv:
_pyaqcv.Size2f_swigregister(Size2f)

class Size2i(IGeometry):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _pyaqcv.Size2i_swiginit(self, _pyaqcv.new_Size2i(*args))

    def __eq__(self, rhs):
        return _pyaqcv.Size2i___eq__(self, rhs)

    def type(self):
        return _pyaqcv.Size2i_type(self)

    def area(self):
        return _pyaqcv.Size2i_area(self)
    w = property(_pyaqcv.Size2i_w_get, _pyaqcv.Size2i_w_set)
    h = property(_pyaqcv.Size2i_h_get, _pyaqcv.Size2i_h_set)
    __swig_destroy__ = _pyaqcv.delete_Size2i

# Register Size2i in _pyaqcv:
_pyaqcv.Size2i_swigregister(Size2i)

class Rect2f(IGeometry):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _pyaqcv.Rect2f_swiginit(self, _pyaqcv.new_Rect2f(*args))

    def __eq__(self, rhs):
        return _pyaqcv.Rect2f___eq__(self, rhs)

    def type(self):
        return _pyaqcv.Rect2f_type(self)

    def xmin_ymin(self):
        return _pyaqcv.Rect2f_xmin_ymin(self)

    def xmax_ymin(self):
        return _pyaqcv.Rect2f_xmax_ymin(self)

    def xmax_ymax(self):
        return _pyaqcv.Rect2f_xmax_ymax(self)

    def xmin_ymax(self):
        return _pyaqcv.Rect2f_xmin_ymax(self)

    def area(self):
        return _pyaqcv.Rect2f_area(self)

    def perimeter(self):
        return _pyaqcv.Rect2f_perimeter(self)

    def long_side(self):
        return _pyaqcv.Rect2f_long_side(self)

    def short_side(self):
        return _pyaqcv.Rect2f_short_side(self)

    def to_ring(self):
        return _pyaqcv.Rect2f_to_ring(self)
    min_corner = property(_pyaqcv.Rect2f_min_corner_get, _pyaqcv.Rect2f_min_corner_set)
    size = property(_pyaqcv.Rect2f_size_get, _pyaqcv.Rect2f_size_set)
    __swig_destroy__ = _pyaqcv.delete_Rect2f

# Register Rect2f in _pyaqcv:
_pyaqcv.Rect2f_swigregister(Rect2f)

class Rect2i(IGeometry):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _pyaqcv.Rect2i_swiginit(self, _pyaqcv.new_Rect2i(*args))

    def __eq__(self, rhs):
        return _pyaqcv.Rect2i___eq__(self, rhs)

    def type(self):
        return _pyaqcv.Rect2i_type(self)

    def xmin_ymin(self):
        return _pyaqcv.Rect2i_xmin_ymin(self)

    def xmax_ymin(self):
        return _pyaqcv.Rect2i_xmax_ymin(self)

    def xmax_ymax(self):
        return _pyaqcv.Rect2i_xmax_ymax(self)

    def xmin_ymax(self):
        return _pyaqcv.Rect2i_xmin_ymax(self)

    def area(self):
        return _pyaqcv.Rect2i_area(self)

    def perimeter(self):
        return _pyaqcv.Rect2i_perimeter(self)

    def long_side(self):
        return _pyaqcv.Rect2i_long_side(self)

    def short_side(self):
        return _pyaqcv.Rect2i_short_side(self)

    def to_ring(self):
        return _pyaqcv.Rect2i_to_ring(self)
    min_corner = property(_pyaqcv.Rect2i_min_corner_get, _pyaqcv.Rect2i_min_corner_set)
    size = property(_pyaqcv.Rect2i_size_get, _pyaqcv.Rect2i_size_set)
    __swig_destroy__ = _pyaqcv.delete_Rect2i

# Register Rect2i in _pyaqcv:
_pyaqcv.Rect2i_swigregister(Rect2i)

class Polygon2f(IGeometry):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _pyaqcv.Polygon2f_swiginit(self, _pyaqcv.new_Polygon2f(*args))

    def type(self):
        return _pyaqcv.Polygon2f_type(self)

    def area(self):
        return _pyaqcv.Polygon2f_area(self)

    def perimeter(self):
        return _pyaqcv.Polygon2f_perimeter(self)
    outer = property(_pyaqcv.Polygon2f_outer_get, _pyaqcv.Polygon2f_outer_set)
    inners = property(_pyaqcv.Polygon2f_inners_get, _pyaqcv.Polygon2f_inners_set)
    __swig_destroy__ = _pyaqcv.delete_Polygon2f

# Register Polygon2f in _pyaqcv:
_pyaqcv.Polygon2f_swigregister(Polygon2f)

class Polygon2i(IGeometry):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _pyaqcv.Polygon2i_swiginit(self, _pyaqcv.new_Polygon2i(*args))

    def type(self):
        return _pyaqcv.Polygon2i_type(self)

    def area(self):
        return _pyaqcv.Polygon2i_area(self)

    def perimeter(self):
        return _pyaqcv.Polygon2i_perimeter(self)
    outer = property(_pyaqcv.Polygon2i_outer_get, _pyaqcv.Polygon2i_outer_set)
    inners = property(_pyaqcv.Polygon2i_inners_get, _pyaqcv.Polygon2i_inners_set)
    __swig_destroy__ = _pyaqcv.delete_Polygon2i

# Register Polygon2i in _pyaqcv:
_pyaqcv.Polygon2i_swigregister(Polygon2i)

class RotateRect2f(IGeometry):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _pyaqcv.RotateRect2f_swiginit(self, _pyaqcv.new_RotateRect2f(*args))

    def __eq__(self, rhs):
        return _pyaqcv.RotateRect2f___eq__(self, rhs)

    def type(self):
        return _pyaqcv.RotateRect2f_type(self)

    def area(self):
        return _pyaqcv.RotateRect2f_area(self)

    def perimeter(self):
        return _pyaqcv.RotateRect2f_perimeter(self)

    def to_ring(self):
        return _pyaqcv.RotateRect2f_to_ring(self)

    def bounding_box(self):
        return _pyaqcv.RotateRect2f_bounding_box(self)

    def long_side(self):
        return _pyaqcv.RotateRect2f_long_side(self)

    def short_side(self):
        return _pyaqcv.RotateRect2f_short_side(self)

    def norm(self):
        return _pyaqcv.RotateRect2f_norm(self)

    def norm_compatible_opencv(self):
        return _pyaqcv.RotateRect2f_norm_compatible_opencv(self)
    center = property(_pyaqcv.RotateRect2f_center_get, _pyaqcv.RotateRect2f_center_set)
    size = property(_pyaqcv.RotateRect2f_size_get, _pyaqcv.RotateRect2f_size_set)
    radian = property(_pyaqcv.RotateRect2f_radian_get, _pyaqcv.RotateRect2f_radian_set)
    __swig_destroy__ = _pyaqcv.delete_RotateRect2f

# Register RotateRect2f in _pyaqcv:
_pyaqcv.RotateRect2f_swigregister(RotateRect2f)

class RotateRect2i(IGeometry):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _pyaqcv.RotateRect2i_swiginit(self, _pyaqcv.new_RotateRect2i(*args))

    def __eq__(self, rhs):
        return _pyaqcv.RotateRect2i___eq__(self, rhs)

    def type(self):
        return _pyaqcv.RotateRect2i_type(self)

    def area(self):
        return _pyaqcv.RotateRect2i_area(self)

    def perimeter(self):
        return _pyaqcv.RotateRect2i_perimeter(self)

    def to_ring(self):
        return _pyaqcv.RotateRect2i_to_ring(self)

    def bounding_box(self):
        return _pyaqcv.RotateRect2i_bounding_box(self)

    def long_side(self):
        return _pyaqcv.RotateRect2i_long_side(self)

    def short_side(self):
        return _pyaqcv.RotateRect2i_short_side(self)
    center = property(_pyaqcv.RotateRect2i_center_get, _pyaqcv.RotateRect2i_center_set)
    size = property(_pyaqcv.RotateRect2i_size_get, _pyaqcv.RotateRect2i_size_set)
    radian = property(_pyaqcv.RotateRect2i_radian_get, _pyaqcv.RotateRect2i_radian_set)
    __swig_destroy__ = _pyaqcv.delete_RotateRect2i

# Register RotateRect2i in _pyaqcv:
_pyaqcv.RotateRect2i_swigregister(RotateRect2i)

class Ellipse2f(IGeometry):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _pyaqcv.Ellipse2f_swiginit(self, _pyaqcv.new_Ellipse2f(*args))

    def __eq__(self, rhs):
        return _pyaqcv.Ellipse2f___eq__(self, rhs)

    def type(self):
        return _pyaqcv.Ellipse2f_type(self)

    def focus(self):
        return _pyaqcv.Ellipse2f_focus(self)

    def ecc(self):
        return _pyaqcv.Ellipse2f_ecc(self)

    def area(self):
        return _pyaqcv.Ellipse2f_area(self)

    def bounding_box(self):
        return _pyaqcv.Ellipse2f_bounding_box(self)

    def correct(self):
        return _pyaqcv.Ellipse2f_correct(self)
    center = property(_pyaqcv.Ellipse2f_center_get, _pyaqcv.Ellipse2f_center_set)
    axis = property(_pyaqcv.Ellipse2f_axis_get, _pyaqcv.Ellipse2f_axis_set)
    radian = property(_pyaqcv.Ellipse2f_radian_get, _pyaqcv.Ellipse2f_radian_set)
    __swig_destroy__ = _pyaqcv.delete_Ellipse2f

# Register Ellipse2f in _pyaqcv:
_pyaqcv.Ellipse2f_swigregister(Ellipse2f)

class Arc2f(IGeometry):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _pyaqcv.Arc2f_swiginit(self, _pyaqcv.new_Arc2f(*args))

    def __eq__(self, rhs):
        return _pyaqcv.Arc2f___eq__(self, rhs)

    def type(self):
        return _pyaqcv.Arc2f_type(self)

    def angle(self):
        return _pyaqcv.Arc2f_angle(self)

    def length(self):
        return _pyaqcv.Arc2f_length(self)

    def norm(self, *args):
        return _pyaqcv.Arc2f_norm(self, *args)
    center = property(_pyaqcv.Arc2f_center_get, _pyaqcv.Arc2f_center_set)
    radius = property(_pyaqcv.Arc2f_radius_get, _pyaqcv.Arc2f_radius_set)
    start_angle = property(_pyaqcv.Arc2f_start_angle_get, _pyaqcv.Arc2f_start_angle_set)
    end_angle = property(_pyaqcv.Arc2f_end_angle_get, _pyaqcv.Arc2f_end_angle_set)
    __swig_destroy__ = _pyaqcv.delete_Arc2f

# Register Arc2f in _pyaqcv:
_pyaqcv.Arc2f_swigregister(Arc2f)

class Circle2f(IGeometry):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _pyaqcv.Circle2f_swiginit(self, _pyaqcv.new_Circle2f(*args))

    def __eq__(self, rhs):
        return _pyaqcv.Circle2f___eq__(self, rhs)

    def type(self):
        return _pyaqcv.Circle2f_type(self)

    def area(self):
        return _pyaqcv.Circle2f_area(self)

    def perimeter(self):
        return _pyaqcv.Circle2f_perimeter(self)
    center = property(_pyaqcv.Circle2f_center_get, _pyaqcv.Circle2f_center_set)
    radius = property(_pyaqcv.Circle2f_radius_get, _pyaqcv.Circle2f_radius_set)
    __swig_destroy__ = _pyaqcv.delete_Circle2f

# Register Circle2f in _pyaqcv:
_pyaqcv.Circle2f_swigregister(Circle2f)

class Circle2i(IGeometry):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _pyaqcv.Circle2i_swiginit(self, _pyaqcv.new_Circle2i(*args))

    def __eq__(self, rhs):
        return _pyaqcv.Circle2i___eq__(self, rhs)

    def type(self):
        return _pyaqcv.Circle2i_type(self)

    def area(self):
        return _pyaqcv.Circle2i_area(self)

    def perimeter(self):
        return _pyaqcv.Circle2i_perimeter(self)
    center = property(_pyaqcv.Circle2i_center_get, _pyaqcv.Circle2i_center_set)
    radius = property(_pyaqcv.Circle2i_radius_get, _pyaqcv.Circle2i_radius_set)
    __swig_destroy__ = _pyaqcv.delete_Circle2i

# Register Circle2i in _pyaqcv:
_pyaqcv.Circle2i_swigregister(Circle2i)

class MultiPoint2f(Point2fVec, IGeometry):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def type(self):
        return _pyaqcv.MultiPoint2f_type(self)

    def __init__(self, *args):
        _pyaqcv.MultiPoint2f_swiginit(self, _pyaqcv.new_MultiPoint2f(*args))
    __swig_destroy__ = _pyaqcv.delete_MultiPoint2f

# Register MultiPoint2f in _pyaqcv:
_pyaqcv.MultiPoint2f_swigregister(MultiPoint2f)

class MultiPoint2i(Point2iVec, IGeometry):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def type(self):
        return _pyaqcv.MultiPoint2i_type(self)

    def __init__(self, *args):
        _pyaqcv.MultiPoint2i_swiginit(self, _pyaqcv.new_MultiPoint2i(*args))
    __swig_destroy__ = _pyaqcv.delete_MultiPoint2i

# Register MultiPoint2i in _pyaqcv:
_pyaqcv.MultiPoint2i_swigregister(MultiPoint2i)

class MultiSegment2f(Segment2fVec, IGeometry):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _pyaqcv.MultiSegment2f_swiginit(self, _pyaqcv.new_MultiSegment2f(*args))

    def type(self):
        return _pyaqcv.MultiSegment2f_type(self)
    __swig_destroy__ = _pyaqcv.delete_MultiSegment2f

# Register MultiSegment2f in _pyaqcv:
_pyaqcv.MultiSegment2f_swigregister(MultiSegment2f)

class MultiLineString2f(LineString2fVec, IGeometry):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _pyaqcv.MultiLineString2f_swiginit(self, _pyaqcv.new_MultiLineString2f(*args))

    def type(self):
        return _pyaqcv.MultiLineString2f_type(self)
    __swig_destroy__ = _pyaqcv.delete_MultiLineString2f

# Register MultiLineString2f in _pyaqcv:
_pyaqcv.MultiLineString2f_swigregister(MultiLineString2f)

class MultiLineString2i(LineString2iVec, IGeometry):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _pyaqcv.MultiLineString2i_swiginit(self, _pyaqcv.new_MultiLineString2i(*args))

    def type(self):
        return _pyaqcv.MultiLineString2i_type(self)
    __swig_destroy__ = _pyaqcv.delete_MultiLineString2i

# Register MultiLineString2i in _pyaqcv:
_pyaqcv.MultiLineString2i_swigregister(MultiLineString2i)

class MultiPolygon2f(Polygon2fVec, IGeometry):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _pyaqcv.MultiPolygon2f_swiginit(self, _pyaqcv.new_MultiPolygon2f(*args))

    def type(self):
        return _pyaqcv.MultiPolygon2f_type(self)
    __swig_destroy__ = _pyaqcv.delete_MultiPolygon2f

# Register MultiPolygon2f in _pyaqcv:
_pyaqcv.MultiPolygon2f_swigregister(MultiPolygon2f)

class MultiPolygon2i(Polygon2iVec, IGeometry):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _pyaqcv.MultiPolygon2i_swiginit(self, _pyaqcv.new_MultiPolygon2i(*args))

    def type(self):
        return _pyaqcv.MultiPolygon2i_type(self)
    __swig_destroy__ = _pyaqcv.delete_MultiPolygon2i

# Register MultiPolygon2i in _pyaqcv:
_pyaqcv.MultiPolygon2i_swigregister(MultiPolygon2i)


def append(*args):
    return _pyaqcv.append(*args)

def area(*args):
    return _pyaqcv.area(*args)

def vector2f_eq_point2f(lhs, rhs):
    return _pyaqcv.vector2f_eq_point2f(lhs, rhs)

def vector2i_eq_point2i(lhs, rhs):
    return _pyaqcv.vector2i_eq_point2i(lhs, rhs)

def vector2f_add_point2f(lhs, rhs):
    return _pyaqcv.vector2f_add_point2f(lhs, rhs)

def vector2i_add_point2i(lhs, rhs):
    return _pyaqcv.vector2i_add_point2i(lhs, rhs)

def point2i_add_vector2f(lhs, rhs):
    return _pyaqcv.point2i_add_vector2f(lhs, rhs)

def vector2f_add_point2i(lhs, rhs):
    return _pyaqcv.vector2f_add_point2i(lhs, rhs)

def point2f_minus_point2f(lhs, rhs):
    return _pyaqcv.point2f_minus_point2f(lhs, rhs)

def point2i_minus_point2i(lhs, rhs):
    return _pyaqcv.point2i_minus_point2i(lhs, rhs)

def point2i_minus_vector2f(lhs, rhs):
    return _pyaqcv.point2i_minus_vector2f(lhs, rhs)

def Point2i_minus_point2f(lhs, rhs):
    return _pyaqcv.Point2i_minus_point2f(lhs, rhs)

def point2f_minus_Point2i(lhs, rhs):
    return _pyaqcv.point2f_minus_Point2i(lhs, rhs)

def float_mutiply_point2f(lhs, rhs):
    return _pyaqcv.float_mutiply_point2f(lhs, rhs)

def int32_mutiply_point2i(lhs, rhs):
    return _pyaqcv.int32_mutiply_point2i(lhs, rhs)

def float_mutiply_vector2f(lhs, rhs):
    return _pyaqcv.float_mutiply_vector2f(lhs, rhs)

def int32_mutiply_vector2i(lhs, rhs):
    return _pyaqcv.int32_mutiply_vector2i(lhs, rhs)

def point2i_mutiply_float(lhs, rhs):
    return _pyaqcv.point2i_mutiply_float(lhs, rhs)

def float_mutiply_point2i(lhs, rhs):
    return _pyaqcv.float_mutiply_point2i(lhs, rhs)

def vector2i_mutiply_float(lhs, rhs):
    return _pyaqcv.vector2i_mutiply_float(lhs, rhs)

def float_mutiply_vector2i(lhs, rhs):
    return _pyaqcv.float_mutiply_vector2i(lhs, rhs)

def add_point(*args):
    return _pyaqcv.add_point(*args)

def add_value(*args):
    return _pyaqcv.add_value(*args)

def cross_product(*args):
    return _pyaqcv.cross_product(*args)

def divide_point(*args):
    return _pyaqcv.divide_point(*args)

def divide_value(*args):
    return _pyaqcv.divide_value(*args)

def dot_product(*args):
    return _pyaqcv.dot_product(*args)

def multiply_point(*args):
    return _pyaqcv.multiply_point(*args)

def multiply_value(*args):
    return _pyaqcv.multiply_value(*args)

def subtract_point(*args):
    return _pyaqcv.subtract_point(*args)

def subtract_value(*args):
    return _pyaqcv.subtract_value(*args)

def azimuth(*args):
    return _pyaqcv.azimuth(*args)

def center(*args):
    return _pyaqcv.center(*args)

def centroid(*args):
    return _pyaqcv.centroid(*args)

def clear(*args):
    return _pyaqcv.clear(*args)

def convert(*args):
    return _pyaqcv.convert(*args)
kRoundToNearestInt = _pyaqcv.kRoundToNearestInt
kRetainIntPart = _pyaqcv.kRetainIntPart

def convert_to_int(*args):
    return _pyaqcv.convert_to_int(*args)

def convex_hull(*args):
    return _pyaqcv.convex_hull(*args)

def return_convex_hull(*args):
    return _pyaqcv.return_convex_hull(*args)

def correct(*args):
    return _pyaqcv.correct(*args)

def return_correct(*args):
    return _pyaqcv.return_correct(*args)

def covered_by(*args):
    return _pyaqcv.covered_by(*args)

def crosses(*args):
    return _pyaqcv.crosses(*args)

def difference(*args):
    return _pyaqcv.difference(*args)

def discrete_frechet_distance(*args):
    return _pyaqcv.discrete_frechet_distance(*args)

def disjoint(*args):
    return _pyaqcv.disjoint(*args)

def distance(*args):
    return _pyaqcv.distance(*args)

def envelope(*args):
    return _pyaqcv.envelope(*args)

def return_envelope(*args):
    return _pyaqcv.return_envelope(*args)

def equals(*args):
    return _pyaqcv.equals(*args)

def segment_sampling(*args):
    return _pyaqcv.segment_sampling(*args)

def is_empty(*args):
    return _pyaqcv.is_empty(*args)

def is_rect(*args):
    return _pyaqcv.is_rect(*args)

def is_axial_rect(*args):
    return _pyaqcv.is_axial_rect(*args)

def is_rotate_rect(*args):
    return _pyaqcv.is_rotate_rect(*args)

def is_simple(*args):
    return _pyaqcv.is_simple(*args)
kNoFailure = _pyaqcv.kNoFailure
kEmpty = _pyaqcv.kEmpty
kDuplicatePoints = _pyaqcv.kDuplicatePoints
kSpikes = _pyaqcv.kSpikes
kSelfIntersections = _pyaqcv.kSelfIntersections
kPolygonOuterFailure = _pyaqcv.kPolygonOuterFailure
kPolygonInnersFailure = _pyaqcv.kPolygonInnersFailure
kFewPoints = _pyaqcv.kFewPoints
kWrongTopologicalDimension = _pyaqcv.kWrongTopologicalDimension
kInvalidCoordinate = _pyaqcv.kInvalidCoordinate
kWrongOrientation = _pyaqcv.kWrongOrientation
kInteriorRingsOutside = _pyaqcv.kInteriorRingsOutside
kNestedInteriorRings = _pyaqcv.kNestedInteriorRings

def return_is_simple(*args):
    return _pyaqcv.return_is_simple(*args)

def is_valid(*args):
    return _pyaqcv.is_valid(*args)

def return_is_valid(*args):
    return _pyaqcv.return_is_valid(*args)

def length(*args):
    return _pyaqcv.length(*args)

def line_interpolate(*args):
    return _pyaqcv.line_interpolate(*args)

def min_area_rect(*args):
    return _pyaqcv.min_area_rect(*args)

def return_min_area_rect(*args):
    return _pyaqcv.return_min_area_rect(*args)

def overlaps(*args):
    return _pyaqcv.overlaps(*args)

def perimeter(*args):
    return _pyaqcv.perimeter(*args)

def vertical(*args):
    return _pyaqcv.vertical(*args)

def reverse(*args):
    return _pyaqcv.reverse(*args)

def return_reverse(*args):
    return _pyaqcv.return_reverse(*args)

def simplify(*args):
    return _pyaqcv.simplify(*args)

def return_simplify(*args):
    return _pyaqcv.return_simplify(*args)

def sym_difference(*args):
    return _pyaqcv.sym_difference(*args)

def return_sym_difference(*args):
    return _pyaqcv.return_sym_difference(*args)

def touches(*args):
    return _pyaqcv.touches(*args)

def union_areal(*args):
    return _pyaqcv.union_areal(*args)

def return_union_areal(*args):
    return _pyaqcv.return_union_areal(*args)

def unique(*args):
    return _pyaqcv.unique(*args)

def return_unique(*args):
    return _pyaqcv.return_unique(*args)

def within(*args):
    return _pyaqcv.within(*args)
class Matrix3f(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    kSide = _pyaqcv.Matrix3f_kSide

    def __init__(self, *args):
        _pyaqcv.Matrix3f_swiginit(self, _pyaqcv.new_Matrix3f(*args))
    __swig_destroy__ = _pyaqcv.delete_Matrix3f

    def __eq__(self, rhs):
        return _pyaqcv.Matrix3f___eq__(self, rhs)

    def __mul__(self, rhs):
        return _pyaqcv.Matrix3f___mul__(self, rhs)

    def at(self, *args):
        return _pyaqcv.Matrix3f_at(self, *args)

# Register Matrix3f in _pyaqcv:
_pyaqcv.Matrix3f_swigregister(Matrix3f)


def sampling(*args):
    return _pyaqcv.sampling(*args)

def get_affine_transform(src, dst):
    return _pyaqcv.get_affine_transform(src, dst)

def get_perspective_transform(src, dst):
    return _pyaqcv.get_perspective_transform(src, dst)

def get_inverse_transform(mat):
    return _pyaqcv.get_inverse_transform(mat)

def get_rotate_transform(*args):
    return _pyaqcv.get_rotate_transform(*args)

def get_scale_transform(*args):
    return _pyaqcv.get_scale_transform(*args)

def get_translate_transform(directx, directy):
    return _pyaqcv.get_translate_transform(directx, directy)

def get_flip_transform(flip_axis):
    return _pyaqcv.get_flip_transform(flip_axis)

def transform_rotate(*args):
    return _pyaqcv.transform_rotate(*args)

def transform_scale(*args):
    return _pyaqcv.transform_scale(*args)

def transform_translate(*args):
    return _pyaqcv.transform_translate(*args)

def intersects(*args):
    return _pyaqcv.intersects(*args)

def intersection(*args):
    return _pyaqcv.intersection(*args)

def wkt_geoemtry_type_name(wkt_str):
    return _pyaqcv.wkt_geoemtry_type_name(wkt_str)

def wkt_geometry_type(wkt_str):
    return _pyaqcv.wkt_geometry_type(wkt_str)

def geometry_to_wkt(*args):
    return _pyaqcv.geometry_to_wkt(*args)

def geometry_read_wkt(*args):
    return _pyaqcv.geometry_read_wkt(*args)
class GeometryException(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _pyaqcv.GeometryException_swiginit(self, _pyaqcv.new_GeometryException(*args))
    __swig_destroy__ = _pyaqcv.delete_GeometryException

    def what(self):
        return _pyaqcv.GeometryException_what(self)

    def name(self):
        return _pyaqcv.GeometryException_name(self)

    def err_code(self):
        return _pyaqcv.GeometryException_err_code(self)

    def get_info(self):
        return _pyaqcv.GeometryException_get_info(self)

# Register GeometryException in _pyaqcv:
_pyaqcv.GeometryException_swigregister(GeometryException)


def geo_enable_exception():
    return _pyaqcv.geo_enable_exception()

def geo_handle_error(e):
    return _pyaqcv.geo_handle_error(e)
class WktReadError(GeometryException):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, msg, func, file, line):
        _pyaqcv.WktReadError_swiginit(self, _pyaqcv.new_WktReadError(msg, func, file, line))
    __swig_destroy__ = _pyaqcv.delete_WktReadError

# Register WktReadError in _pyaqcv:
_pyaqcv.WktReadError_swigregister(WktReadError)

class HardwareError(GeometryException):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, msg, func, file, line):
        _pyaqcv.HardwareError_swiginit(self, _pyaqcv.new_HardwareError(msg, func, file, line))
    __swig_destroy__ = _pyaqcv.delete_HardwareError

# Register HardwareError in _pyaqcv:
_pyaqcv.HardwareError_swigregister(HardwareError)


def from_numpy(numpy_array):
    return _pyaqcv.from_numpy(numpy_array)


