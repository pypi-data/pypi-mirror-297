import os
import logging
import zipfile
from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, FSInputFile
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.filters import Command
from aiogram import Router
from aiogram.utils.token import TokenValidationError
from dotenv import load_dotenv
import asyncio
from pathlib import Path
import time
import shutil

# –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ .env —Ñ–∞–π–ª–∞
load_dotenv()
TOKEN = os.getenv("BOT_TOKEN")

# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º —Å–º–∞–π–ª–∏–∫–æ–≤
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(message)s')

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω –Ω–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å
try:
    bot = Bot(token=TOKEN)
except TokenValidationError as e:
    logging.error(f"üî¥ –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω: {e}")
    exit()

# –°–æ–∑–¥–∞–µ–º –¥–∏—Å–ø–µ—Ç—á–µ—Ä —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ø–∞–º—è—Ç–∏ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π
dp = Dispatcher(storage=MemoryStorage())

# –ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä
router = Router()

# –ü—É—Ç—å –∫ Calibre (ebook-convert)
CALIBRE_CONVERT_COMMAND = 'ebook-convert'

# –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
DATA_DIR = Path('data')
DATA_DIR.mkdir(exist_ok=True)

# –í—Ä–µ–º—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö: 1 —á–∞—Å = 3600 —Å–µ–∫—É–Ω–¥
FILE_LIFETIME = 3600


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Calibre
def check_calibre_available():
    calibre_path = shutil.which(CALIBRE_CONVERT_COMMAND)
    if calibre_path:
        logging.info(f"üü¢ Calibre –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –ø—É—Ç–∏: {calibre_path}")
        return True
    else:
        logging.error(f"üî¥ Calibre –Ω–µ –Ω–∞–π–¥–µ–Ω! –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ–Ω —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏ –¥–æ—Å—Ç—É–ø–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ.")
        return False


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –∫–æ–º–∞–Ω–¥ —á–µ—Ä–µ–∑ subprocess
async def run_command(cmd):
    process = await asyncio.create_subprocess_shell(
        cmd,
        stdout=asyncio.subprocess.PIPE,
        stderr=asyncio.subprocess.PIPE
    )

    stdout, stderr = await process.communicate()

    return stdout.decode(), stderr.decode(), process.returncode


# –•—ç–Ω–¥–ª–µ—Ä –Ω–∞ –∫–æ–º–∞–Ω–¥—É /start
@router.message(Command(commands=["start"]))
async def start(message: Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! üëãüòÉ –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ñ–∞–π–ª —Ñ–æ—Ä–º–∞—Ç–∞ .fb2, –∏ —è —Å–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É—é –µ–≥–æ –≤ .epub! üìö‚ú®")


# –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ —Ñ–∞–π–ª–∞ —Å –ø–æ–º–æ—â—å—é Calibre
async def convert_fb2_to_epub(fb2_file_path: Path, epub_file_path: Path):
    cmd = f"{CALIBRE_CONVERT_COMMAND} {fb2_file_path} {epub_file_path}"
    stdout, stderr, returncode = await run_command(cmd)

    if returncode != 0:
        logging.error(f"üî¥ –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏: {stderr}")
        raise Exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏: {stderr}")

    logging.info(f"üü¢ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {stdout}")
    return epub_file_path


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ–±–ª–æ–∂–∫–∏ –∏–∑ epub
async def extract_epub_thumbnail(epub_file_path: Path, thumbnail_path: Path):
    try:
        with zipfile.ZipFile(epub_file_path, 'r') as epub:
            # –ò—â–µ–º —Ñ–∞–π–ª —Å –æ–±–ª–æ–∂–∫–æ–π –≤ EPUB
            for file_info in epub.infolist():
                if 'cover' in file_info.filename and file_info.filename.endswith(('.jpg', '.jpeg', '.png')):
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–ª–æ–∂–∫—É
                    with open(thumbnail_path, 'wb') as thumbnail_file:
                        thumbnail_file.write(epub.read(file_info.filename))
                    logging.info(f"üü¢ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ–±–ª–æ–∂–∫–∏ –∏–∑–≤–ª–µ—á–µ–Ω–æ: {thumbnail_path}")
                    return thumbnail_path
        return None  # –ï—Å–ª–∏ –æ–±–ª–æ–∂–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
    except Exception as e:
        logging.error(f"üî¥ –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ –æ–±–ª–æ–∂–∫–∏: {e}")
        return None


# –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–∏—Å–ª–∞–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
@router.message(F.document)
async def handle_document(message: Message):
    document = message.document

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
    if not document.file_name.endswith('.fb2'):
        await message.answer(
            "–û–π, –∫–∞–∂–µ—Ç—Å—è —Ç—ã –æ—Ç–ø—Ä–∞–≤–∏–ª —á—Ç–æ-—Ç–æ –Ω–µ —Ç–æ! üòÖüìÑ\n–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ .fb2, –∏ —è —Å–¥–µ–ª–∞—é –∏–∑ –Ω–µ–≥–æ —à–∏–∫–∞—Ä–Ω—ã–π .epub! üìö‚ú®")
        return

    # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
    file_info = await bot.get_file(document.file_id)

    file_name = document.file_name
    fb2_file_path = DATA_DIR / file_name  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª –≤ –ø–∞–ø–∫—É data
    epub_file_path = fb2_file_path.with_suffix('.epub')

    try:
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
        await bot.download_file(file_info.file_path, fb2_file_path.as_posix())

        # –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ –Ω–∞—á–∞–ª–µ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
        converting_message = await message.answer("–ù–∞—á–∏–Ω–∞–µ–º –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é... üõ†üìö –ü–æ–¥–æ–∂–¥–∏ –Ω–µ–º–Ω–æ–≥–æ! ‚è≥")

        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ñ–∞–π–ª –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
        await convert_fb2_to_epub(fb2_file_path, epub_file_path)

        thumbnail_path = DATA_DIR / (fb2_file_path.stem + '_thumbnail.jpg')
        thumbnail = await extract_epub_thumbnail(epub_file_path, thumbnail_path)

        thumb = None
        if thumbnail and thumbnail.exists():
            thumb = FSInputFile(thumbnail)

        await bot.send_document(
            chat_id=message.chat.id,
            reply_to_message_id=message.message_id,
            parse_mode='HTML',
            document=FSInputFile(
                path=epub_file_path.as_posix(),
                filename=epub_file_path.name),
            thumbnail=thumb)

        await message.answer("–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! üéâüìö –ì–æ—Ç–æ–≤—ã–π .epub —Ñ–∞–π–ª —É —Ç–µ–±—è! üöÄ")

        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
        await converting_message.delete()

    except Exception as e:
        await message.answer(f"–û–π-–æ–π! –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫! üòì –û—à–∏–±–∫–∞: {e}")
        logging.error(f"üî¥ –û—à–∏–±–∫–∞: {e}")


# –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@router.message()
async def handle_all_messages(message: Message):
    await message.answer(
        "–≠–π, —è –∂–¥—É .fb2 —Ñ–∞–π–ª! üìÑüòé\n–û—Ç–ø—Ä–∞–≤—å –µ–≥–æ, –∏ —è –ø—Ä–µ–≤—Ä–∞—Ç—é –µ–≥–æ –≤ .epub, –∫–∞–∫ –ø–æ –≤–æ–ª—à–µ–±—Å—Ç–≤—É! ‚ú®\n–î—Ä—É–≥–∏–µ —Ñ–∞–π–ª—ã –º–Ω–µ –Ω–µ —Ç–∞–∫ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã, –Ω–æ —è –≤–µ—Ä—é, —á—Ç–æ —É —Ç–µ–±—è –Ω–∞–π–¥–µ—Ç—Å—è —Ç–æ, —á—Ç–æ –Ω—É–∂–Ω–æ. üòâ")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö —Ñ–∞–π–ª–æ–≤
async def cleanup_old_files():
    while True:
        now = time.time()
        for file_path in DATA_DIR.iterdir():
            if file_path.is_file() and (now - file_path.stat().st_mtime > FILE_LIFETIME):
                try:
                    file_path.unlink()
                    logging.info(f"üü¢ –£–¥–∞–ª–µ–Ω —Ñ–∞–π–ª: {file_path}")
                except Exception as e:
                    logging.error(f"üî¥ –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ {file_path}: {e}")
        await asyncio.sleep(60)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª—ã –∫–∞–∂–¥—ã–µ 60 —Å–µ–∫—É–Ω–¥


async def runbot():
    await asyncio.gather(
        dp.start_polling(bot),
        cleanup_old_files()
    )


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
def main():
    dp.include_router(router)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Calibre –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º –±–æ—Ç–∞
    if not check_calibre_available():
        logging.error("üî¥ –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, —Ç–∞–∫ –∫–∞–∫ Calibre –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")
        return

    bot.delete_webhook(drop_pending_updates=True)
    dp.start_polling(bot)

    asyncio.run(runbot())


if __name__ == '__main__':
    main()