[build-system]
requires = [
  "setuptools>=62.1",
  "setuptools_scm[toml]>=6.2",
  "wheel",]
build-backend = "setuptools.build_meta"

[project]
name = "gildas_uvfit"
description = "Helper function to read IRAM GILDAS uvfit fits file"
requires-python = ">=3.9"
readme = { file = "README.rst", content-type = "text/x-rst" }
license = { file = "licenses/LICENSE.rst" }
authors = [
  { name = "Alexandre Beelen", email = "alexandre.beelen@lam.fr" },
]
dependencies = ["astropy>=4.0", "numpy>=1.16"]
dynamic = ["version"]

[project.optional-dependencies]
test = [
    "pytest",
    "pytest-doctestplus",
    "pytest-cov",
    "specutils",
]
docs = [
    "sphinx",
    "sphinx-automodapi",
]
specutils = [
    "specutils",
]

[project.urls]
repository = "https://github.com/abeelen/gildas-uvfit"

[tool.setuptools]
zip-safe = false
include-package-data = true

[tool.setuptools.packages.find]
exclude = ["gildas_uvfit._dev*"]

[tool.setuptools.package-data]
data = ["*.fits"]

[tool.setuptools_scm]
write_to = "gildas_uvfit/_version.py"

[tool.pytest.ini_options]
testpaths = [
  "gildas_uvfit",
  "docs",
]
doctest_plus = "enabled"
text_file_format = "rst"
addopts = "--doctest-rst"

[tool.coverage.run]
omit = [
 "gildas_uvfit/__init*",
 "gildas_uvfit/conftest.py",
 "gildas_uvfit/*setup_package*",
 "gildas_uvfit/tests/*",
 "gildas_uvfit/*/tests/*",
 "gildas_uvfit/extern/*",
 "gildas_uvfit/version*",
 "*/gildas_uvfit/__init*",
 "*/gildas_uvfit/conftest.py",
 "*/gildas_uvfit/*setup_package*",
 "*/gildas_uvfit/tests/*",
 "*/gildas_uvfit/*/tests/*",
 "*/gildas_uvfit/extern/*",
 "*/gildas_uvfit/version*",
]

[tool.coverage.report]
exclude_lines = [
  # Have to re-enable the standard pragma
  "pragma: no cover",
  # Don't complain about packages we have installed
  "except ImportError",
  # Don't complain if tests don't hit assertions
  "raise AssertionError",
  "raise NotImplementedError",
  # Don't complain about script hooks
  "def main(.*):",
  # Ignore branches that don't pertain to this version of Python
  "pragma: py{ignore_python_version}",
  # Don't complain about IPython completion helper
  "def _ipython_key_completions_",
  # typing.TYPE_CHECKING is False at runtime
  "if TYPE_CHECKING:",
  # Ignore typing overloads
  "@overload",
]
