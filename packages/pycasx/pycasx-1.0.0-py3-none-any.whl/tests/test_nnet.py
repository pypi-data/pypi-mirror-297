# SPDX-FileCopyrightText: 2024 German Aerospace Center (DLR) <https://dlr.de>
#
# SPDX-License-Identifier: MIT

from __future__ import annotations

import unittest
from pathlib import Path

import numpy as np
import numpy.typing as npt
import onnx
import onnxruntime as ort
import torch as th
from onnx2torch import convert
from onnx.onnx_ml_pb2 import ModelProto
from torch.fx import GraphModule

from pycasx.cli.convert_to_onnx import HCAS_FOLDER, VCAS_FOLDER, convert_to_onnx
from pycasx.tools.NNet.nnet import NNet

# The following sequences are from a head on collision scenario.
HCAS_SEQUENCE = np.array(
    [
        [63134.156250, 0.000000, 539.999268],
        [62593.894531, 0.000000, 539.999084],
        [62081.066406, 0.000000, 179.999023],
        [61555.437500, 0.000000, 179.998886],
        [61038.218750, 0.000000, 179.998734],
        [60532.707031, 0.000000, 179.998596],
        [60021.710938, 0.000000, 539.998474],
        [59491.691406, 0.000000, 539.998352],
        [58638.683594, 0.000000, 539.998108],
        [58129.515625, 0.000000, 179.997971],
        [57633.148438, 0.000000, 179.997849],
        [57083.375000, -8.884465, 179.997711],
        [56587.375000, -8.884677, 179.997559],
        [55951.644531, -8.884953, 539.997375],
        [55348.468750, -8.885211, 539.997253],
        [54732.488281, -8.885475, 539.997070],
        [54136.996094, -8.885734, 539.996948],
        [53567.468750, -8.885975, 539.996765],
        [52998.312500, -8.886216, 539.996582],
        [52429.519531, -8.886463, 539.996460],
        [51886.699219, -8.886693, 539.996277],
        [51297.789062, -8.886946, 539.996155],
        [50749.109375, -17.774361, 539.995972],
        [50153.980469, -17.774878, 539.995850],
        [49598.359375, -17.775349, 539.995728],
        [49029.929688, -17.775843, 539.995605],
        [48454.921875, -17.776337, 539.995422],
        [47912.464844, -17.776794, 539.995239],
        [47371.105469, -17.777266, 539.995056],
        [46835.593750, -26.666588, 539.994934],
        [46279.968750, -26.667294, 539.994812],
        [45725.441406, -26.668016, 539.994690],
        [45096.296875, -26.668827, 539.994507],
        [44500.437500, -26.669584, 539.994385],
        [43911.890625, -26.670361, 539.994202],
        [43302.855469, -35.561512, 539.994019],
        [42734.062500, -35.562500, 539.993896],
        [42171.855469, -35.563465, 539.993713],
        [41637.078125, -35.564404, 539.993591],
        [41046.339844, -35.565369, 539.993469],
        [40537.527344, -44.457798, 539.993286],
        [40028.355469, -44.458889, 539.993164],
        [39519.550781, -44.459980, 539.993042],
        [38983.312500, -44.461128, 539.992920],
        [38414.156250, -44.462364, 539.992737],
        [37871.320312, -53.356209, 539.992615],
        [37375.320312, -53.357483, 539.992493],
        [36872.000000, -53.358757, 539.992371],
        [36369.781250, -53.360065, 539.992188],
        [35873.777344, -53.361340, 539.992065],
        [35364.226562, -62.256413, 539.991943],
        [34868.222656, -62.257900, 539.991821],
        [34318.453125, -62.259548, 179.991745],
        [33808.550781, -62.261074, 179.991608],
        [33299.011719, -62.262600, 179.991470],
        [32789.093750, -71.158989, 179.991333],
        [32232.003906, -71.160873, 179.991165],
        [31715.882812, -71.162659, 179.991028],
        [31205.978516, -71.164406, 179.990891],
        [30695.689453, -80.061897, 179.990738],
        [30198.953125, -80.063805, 179.990616],
        [29682.832031, -80.065819, 179.990479],
        [29172.562500, -80.067780, 179.990341],
        [28668.484375, -88.966293, 179.990219],
        [28158.214844, -88.968468, 179.990082],
        [27661.478516, -88.970589, 179.989944],
        [27151.177734, -97.870003, 179.989822],
        [26640.908203, -97.872398, 179.989685],
        [26137.585938, -97.874786, 179.989548],
        [25633.167969, -97.877113, 179.989410],
        [25109.326172, -106.777657, 539.989258],
        [24611.857422, -106.780197, 539.989136],
        [24088.050781, -106.782867, 539.989014],
        [23496.531250, -115.684639, 539.988892],
        [22958.824219, -115.687607, 539.988708],
        [22461.351562, -115.690346, 539.988586],
        [21950.662109, -124.592537, 539.988464],
        [21453.554688, -124.595482, 539.988342],
        [20915.478516, -124.598663, 539.988159],
        [20344.058594, -133.502106, 539.988037],
        [19839.632812, -133.505234, 539.987854],
        [19328.621094, -133.508453, 539.987732],
        [18830.779297, -133.511581, 539.987610],
        [18319.699219, -142.415604, 539.987488],
        [17815.634766, -142.419022, 539.987366],
        [17310.396484, -151.323502, 539.987183],
        [16812.912109, -151.326996, 539.987061],
        [16308.840820, -151.330582, 539.986938],
        [15790.049805, -160.235855, 539.986816],
        [15292.192383, -160.239502, 539.986694],
        [14686.786133, -160.243912, 539.986511],
        [14175.286133, -169.149826, 539.986389],
        [13617.425781, -169.154190, 539.986267],
        [13091.752930, -169.157974, 539.986084],
        [12586.439453, -178.064301, 539.985962],
        [12074.655273, -178.068146, 539.985840],
        [11517.363281, -186.975311, 539.985718],
        [10997.513672, -186.978973, 539.985535],
        [10499.241211, -186.982559, 539.985413],
        [9987.254883, -195.889099, 539.985291],
        [9489.323242, -195.892410, 539.985107],
        [8983.498047, -204.798309, 539.984985],
        [8485.530273, -204.801056, 539.984863],
        [7913.266602, -204.803757, 539.984741],
        [7347.674316, -213.707932, 539.984558],
        [6740.560059, -213.708328, 539.984436],
        [6174.435059, -222.607956, 539.984253],
        [5662.341797, -222.604309, 539.984131],
        [5163.332520, -231.496124, 539.984009],
        [4650.665527, -231.483826, 539.983887],
        [4151.273926, -240.357880, 539.983765],
        [3611.440918, -240.321213, 539.983582],
        [3070.539062, -249.139557, 539.983459],
        [2563.783447, -249.028519, 539.983337],
        [2014.430176, -248.797318, 539.983154],
        [1496.077881, -257.093903, 539.983032],
        [938.897339, -255.321640, 539.982849],
        [346.358643, -250.174149, 539.982727],
        [51.181648, -67.850647, 539.982605],
        [-560.487976, 303.139099, 539.982483],
        [-936.903442, 796.588562, 539.982300],
        [-1339.371338, 1318.420776, 539.982117],
        [-1718.267334, 1810.055176, 539.981995],
    ],
    dtype=np.float32,
)

VCAS_SEQUENCE = np.array(
    [
        [-181.76495, 1004.3557, 0.0, 38.282734],
        [-186.77205, 788.1841, 0.0, 37.94482],
        [-190.56467, 598.71826, 0.0, 37.613674],
        [-193.49367, 404.88205, 0.0, 37.267754],
        [-195.79843, 200.23854, 0.0, 36.805073],
        [-196.82213, 63.75498, 0.0, 36.380054],
        [-196.95258, -47.42238, 0.0, 36.00796],
        [-196.40958, -147.53868, 0.0, 35.60049],
        [-195.39714, -220.12009, 0.0, 35.22791],
        [-194.06406, -278.10043, 0.0, 34.877556],
        [-192.33607, -330.48648, 0.0, 34.500645],
        [-190.11624, -377.2646, 0.0, 34.09245],
        [-187.737, -413.09268, 0.0, 33.70175],
        [-185.03006, -444.01123, 0.0, 33.29238],
        [-182.07637, -469.53516, 0.0, 32.873863],
        [-179.37291, -488.0004, 0.0, 32.508045],
        [-176.30049, -503.76834, 0.0, 32.097683],
        [-172.92165, -515.97833, 0.0, 31.676367],
        [-169.90305, -524.82874, 0.0, 31.29978],
        [-166.61156, -532.0692, 0.0, 30.89597],
        [-163.28186, -537.52844, 0.0, 30.491512],
        [-159.77534, -541.5654, 0.0, 30.06874],
        [-156.53738, -544.1606, 0.0, 29.68162],
        [-153.37485, -545.7781, 0.0, 29.30331],
        [-150.20522, -546.71375, 0.0, 28.925053],
        [-146.78091, -547.15375, 0.0, 28.51509],
        [-143.28061, -547.06665, 0.0, 28.104818],
        [-139.78036, -546.53644, 0.0, 27.686138],
        [-136.38109, -545.724, 0.0, 27.28504],
        [-133.3695, -544.7553, 0.0, 26.924835],
        [-130.50853, -543.686, 0.0, 26.582434],
        [-127.647575, -542.51904, 0.0, 26.244366],
        [-124.861916, -541.268, 0.0, 25.907032],
        [-122.08829, -539.90283, 0.0, 25.573767],
        [-119.2578, -538.49255, 0.0, 25.23177],
        [-116.35282, -537.0478, 0.0, 24.880838],
        [-113.52234, -535.57745, 0.0, 24.543207],
        [-110.70387, -534.1042, 0.0, 24.197203],
        [-107.75646, -532.4822, 0.0, 23.837536],
        [-104.95643, -531.0104, 0.0, 23.496008],
        [-102.23007, -529.495, 0.0, 23.163488],
        [-99.3756, -527.7138, 0.0, 22.817247],
        [-96.67892, -526.0407, 0.0, 22.484795],
        [-93.909355, -524.2761, 0.0, 22.143654],
        [-91.22228, -522.561, 0.0, 21.807232],
        [-88.55524, -520.77075, 0.0, 21.475077],
        [-85.74403, -518.8514, 0.0, 21.12466],
        [-82.6509, -516.96954, 0.0, 20.743391],
        [-79.79965, -514.9932, 0.0, 20.380497],
        [-77.019684, -513.25696, 0.0, 20.030907],
        [-74.3126, -511.46826, 0.0, 19.690386],
        [-71.70483, -509.68567, 0.0, 19.358454],
        [-69.02658, -507.89987, 0.0, 19.01799],
        [-66.34833, -506.1713, 0.0, 18.681757],
        [-63.76378, -504.45468, 0.0, 18.346294],
        [-61.185646, -502.69302, 0.0, 18.015133],
        [-58.537827, -500.94485, 0.0, 17.674799],
        [-55.903625, -499.25226, 0.0, 17.339005],
        [-53.286243, -497.5266, 0.0, 16.998896],
        [-50.737736, -495.804, 0.0, 16.663803],
        [-48.19083, -494.10995, 0.0, 16.33255],
        [-45.535805, -492.44437, 0.0, 15.984081],
        [-43.01693, -490.7683, 0.0, 15.653164],
        [-40.429977, -489.13727, 0.0, 15.317953],
        [-37.862244, -487.49573, 0.0, 14.974201],
        [-35.372997, -485.8948, 0.0, 14.643799],
        [-32.816475, -484.28333, 0.0, 14.304317],
        [-30.260748, -482.69135, 0.0, 13.969092],
        [-27.86761, -481.15344, 0.0, 13.639296],
        [-25.27504, -479.55853, 0.0, 13.295467],
        [-22.682465, -478.04315, 0.0, 12.947493],
        [-20.165976, -476.5743, 0.0, 12.612707],
        [-17.735983, -475.0965, 0.0, 12.282858],
        [-15.305988, -473.6382, 0.0, 11.952836],
        [-12.810312, -472.25952, 0.0, 11.6101265],
        [-10.38832, -470.85977, 0.0, 11.280104],
        [-7.98795, -469.52466, 0.0, 10.950396],
        [-5.522702, -468.20154, 0.0, 10.61189],
        [-3.122329, -466.85886, 0.0, 10.278283],
        [-0.657077, -465.52975, 0.0, 9.944317],
        [1.715265, -464.2441, 0.0, 9.614784],
        [4.342305, -462.87143, 0.0, 9.253922],
        [6.777123, -461.54083, 0.0, 8.911748],
        [9.147869, -460.29276, 0.0, 8.582497],
        [11.56667, -459.05527, 0.0, 8.248992],
        [13.907784, -457.83127, 0.0, 7.9157887],
        [16.375443, -456.51562, 0.0, 7.5648146],
        [18.843105, -455.28564, 0.0, 7.226478],
        [21.184246, -454.27188, 0.0, 6.8932805],
        [23.503756, -453.20407, 0.0, 6.564752],
        [25.87773, -452.14224, 0.0, 6.2312264],
        [28.251709, -451.10748, 0.0, 5.8895774],
        [30.62569, -450.09222, 0.0, 5.5562053],
        [32.937202, -449.1341, 0.0, 5.223613],
        [35.247112, -448.15637, 0.0, 4.8951874],
        [37.71401, -447.1516, 0.0, 4.544163],
        [40.24258, -446.0913, 0.0, 4.176342],
        [42.647808, -445.16165, 0.0, 3.8343782],
        [45.11471, -444.18396, 0.0, 3.4794595],
        [47.396595, -443.29483, 0.0, 3.1470048],
        [49.737755, -442.39374, 0.0, 2.8143659],
        [52.111748, -441.4716, 0.0, 2.464199],
        [54.364002, -440.60208, 0.0, 2.1359935],
        [56.616257, -439.743, 0.0, 1.8083178],
        [58.92939, -438.9065, 0.0, 1.4753929],
        [61.60775, -437.93027, 0.0, 1.0854686],
        [63.920883, -437.0817, 0.0, 0.74878687],
        [66.397408, -436.18512, 0.0, 0.38543698],
        [68.620033, -435.39215, 0.0, 0.057499189],
        [70.90273, -434.54807, 0.0, 40.0],
        [73.18543, -433.76263, 0.0, 40.0],
        [75.58827, -432.9336, 0.0, 40.0],
        [77.99112, -432.08807, 0.0, 40.0],
    ],
    dtype=np.float32,
)


class TestNNetConversions(unittest.TestCase):
    def setUp(self) -> None:
        # Convert NNet files to ONNX files
        convert_to_onnx()

        self.networks: list[Path] = []
        for nnet_file in HCAS_FOLDER.glob("*.nnet"):
            self.networks.append(Path(nnet_file.resolve().parent, nnet_file.stem))
        for nnet_file in VCAS_FOLDER.glob("*.nnet"):
            self.networks.append(Path(nnet_file.resolve().parent, nnet_file.stem))

    def _generate_models(
        self, model_path: Path
    ) -> tuple[NNet, ModelProto, GraphModule]:
        """Helper function to generate neural networks."""
        nnet_model = NNet(str(model_path.resolve()) + ".nnet")
        onnx_model = onnx.load(str(model_path.resolve()) + ".onnx")
        torch_model = convert(onnx_model, save_input_names=True)
        return nnet_model, onnx_model, torch_model

    def _evaluate_nnet(
        self, model: NNet, inputs: npt.NDArray[np.float32]
    ) -> npt.NDArray[np.float32]:
        """Helper function to evaluate neural networks with NNet."""
        return model.evaluate_network(inputs)

    def _evaluate_onnx(
        self, model: ModelProto, inputs: npt.NDArray[np.float32]
    ) -> npt.NDArray[np.float32]:
        """Helper function to evaluate neural networks with onnxruntime."""
        session = ort.InferenceSession(model.SerializeToString())
        return session.run(None, {"X": inputs})[0]

    def _evaluate_torch(
        self, model: GraphModule, inputs: npt.NDArray[np.float32]
    ) -> npt.NDArray[np.float32]:
        """Helper function to evaluate neural networks with PyTorch."""
        with th.no_grad():
            return model.forward(th.from_numpy(inputs)).numpy()

    def _evaluate(
        self,
        models: tuple[NNet, ModelProto, GraphModule],
        inputs: npt.NDArray[np.float32],
    ) -> None:
        nnet_model, onnx_model, torch_model = models
        nnet_output = self._evaluate_nnet(nnet_model, inputs)
        onnx_output = self._evaluate_onnx(onnx_model, inputs)
        torch_output = self._evaluate_torch(torch_model, inputs)

        # We can have a small error due to floating point precision.
        # Thus, the tolerances can be pretty high.
        # The most important test is, that the argmax is the same.
        np.testing.assert_allclose(nnet_output, onnx_output, rtol=1e-3, atol=1e-3)
        np.testing.assert_allclose(nnet_output, torch_output, rtol=1e-3, atol=1e-3)
        self.assertEqual(np.argmax(nnet_output), np.argmax(onnx_output))
        self.assertEqual(np.argmax(nnet_output), np.argmax(torch_output))

    def test_conversion(self) -> None:
        # Check that the ONNX files were created
        for network in self.networks:
            self.assertTrue(
                (HCAS_FOLDER / f"{network}.onnx").exists()
                or (VCAS_FOLDER / f"{network}.onnx").exists()
            )

    def test_same_output_predefined_sequence(self) -> None:
        # Check that the ONNX files have the same output as the NNet files
        for network in self.networks:
            nnet_model, onnx_model, torch_model = self._generate_models(network)
            # Evaluate with pre-defined sequence
            if "VertCAS" in str(network):
                sequence = VCAS_SEQUENCE
            elif "HCAS" in str(network):
                sequence = HCAS_SEQUENCE
            else:
                raise ValueError("Unknown network.")
            for inputs in sequence:
                self._evaluate((nnet_model, onnx_model, torch_model), inputs)

    def test_same_output_random_inputs(self) -> None:
        # Check that the ONNX files have the same output as the NNet files
        for network in self.networks:
            nnet_model, onnx_model, torch_model = self._generate_models(network)
            # Evaluate with random data
            for _ in range(10):
                inputs = np.random.uniform(
                    low=nnet_model.mins,
                    high=nnet_model.maxes,
                ).astype(np.float32)
                self._evaluate((nnet_model, onnx_model, torch_model), inputs)
